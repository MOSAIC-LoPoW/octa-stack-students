ARM GAS  /tmp/cc1YrvUu.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"event_groups.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.prvTestWaitCondition,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	prvTestWaitCondition:
  25              	.LFB14:
  26              		.file 1 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c"
   1:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*
   2:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * FreeRTOS Kernel V10.0.1
   3:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  *
   5:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * the Software without restriction, including without limitation the rights to
   8:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * subject to the following conditions:
  11:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  *
  12:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * The above copyright notice and this permission notice shall be included in all
  13:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * copies or substantial portions of the Software.
  14:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  *
  15:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  *
  22:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * http://www.FreeRTOS.org
  23:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * http://aws.amazon.com/freertos
  24:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  *
  25:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * 1 tab == 4 spaces!
  26:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  */
  27:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  28:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /* Standard includes. */
  29:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #include <stdlib.h>
  30:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  31:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  32:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** all the API functions to use the MPU wrappers.  That should only be done when
ARM GAS  /tmp/cc1YrvUu.s 			page 2


  33:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** task.h is included from an application file. */
  34:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  35:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  36:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /* FreeRTOS includes. */
  37:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #include "FreeRTOS.h"
  38:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #include "task.h"
  39:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #include "timers.h"
  40:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #include "event_groups.h"
  41:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  42:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  43:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  44:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** header files above, but not in this file, in order to generate the correct
  45:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** privileged Vs unprivileged linkage and placement. */
  46:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  47:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  48:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /* The following bit fields convey control information in a task's event list
  49:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** item value.  It is important they don't clash with the
  50:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** taskEVENT_LIST_ITEM_VALUE_IN_USE definition. */
  51:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #if configUSE_16_BIT_TICKS == 1
  52:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventCLEAR_EVENTS_ON_EXIT_BIT	0x0100U
  53:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventUNBLOCKED_DUE_TO_BIT_SET	0x0200U
  54:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventWAIT_FOR_ALL_BITS			0x0400U
  55:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventEVENT_BITS_CONTROL_BYTES	0xff00U
  56:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #else
  57:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventCLEAR_EVENTS_ON_EXIT_BIT	0x01000000UL
  58:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventUNBLOCKED_DUE_TO_BIT_SET	0x02000000UL
  59:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventWAIT_FOR_ALL_BITS			0x04000000UL
  60:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventEVENT_BITS_CONTROL_BYTES	0xff000000UL
  61:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #endif
  62:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  63:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** typedef struct xEventGroupDefinition
  64:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
  65:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	EventBits_t uxEventBits;
  66:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	List_t xTasksWaitingForBits;		/*< List of tasks waiting for a bit to be set. */
  67:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  68:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#if( configUSE_TRACE_FACILITY == 1 )
  69:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		UBaseType_t uxEventGroupNumber;
  70:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#endif
  71:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  72:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
  73:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uint8_t ucStaticallyAllocated; /*< Set to pdTRUE if the event group is statically allocated to en
  74:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#endif
  75:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** } EventGroup_t;
  76:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  77:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
  78:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  79:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*
  80:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * Test the bits set in uxCurrentEventBits to see if the wait condition is met.
  81:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * The wait condition is defined by xWaitForAllBits.  If xWaitForAllBits is
  82:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * pdTRUE then the wait condition is met if all the bits set in uxBitsToWaitFor
  83:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * are also set in uxCurrentEventBits.  If xWaitForAllBits is pdFALSE then the
  84:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * wait condition is met if any of the bits set in uxBitsToWait for are also set
  85:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * in uxCurrentEventBits.
  86:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  */
  87:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxB
  88:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  89:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/cc1YrvUu.s 			page 3


  90:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  91:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
  92:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  93:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
  94:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
  95:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	EventGroup_t *pxEventBits;
  96:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  97:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* A StaticEventGroup_t object must be provided. */
  98:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		configASSERT( pxEventGroupBuffer );
  99:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 100:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		#if( configASSERT_DEFINED == 1 )
 101:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 102:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* Sanity check that the size of the structure used to declare a
 103:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			variable of type StaticEventGroup_t equals the size of the real
 104:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			event group structure. */
 105:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			volatile size_t xSize = sizeof( StaticEventGroup_t );
 106:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			configASSERT( xSize == sizeof( EventGroup_t ) );
 107:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 108:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		#endif /* configASSERT_DEFINED */
 109:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 110:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* The user has provided a statically allocated event group - use it. */
 111:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 EventGroup_t and StaticEventGro
 112:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 113:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( pxEventBits != NULL )
 114:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 115:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			pxEventBits->uxEventBits = 0;
 116:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 117:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 118:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 119:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 120:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* Both static and dynamic allocation can be used, so note that
 121:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				this event group was created statically in case the event group
 122:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				is later deleted. */
 123:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				pxEventBits->ucStaticallyAllocated = pdTRUE;
 124:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 125:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 126:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 127:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			traceEVENT_GROUP_CREATE( pxEventBits );
 128:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 129:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 130:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 131:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			traceEVENT_GROUP_CREATE_FAILED();
 132:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 133:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 134:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		return ( EventGroupHandle_t ) pxEventBits;
 135:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 136:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 137:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 138:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 139:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 140:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 141:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 142:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	EventGroupHandle_t xEventGroupCreate( void )
 143:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 144:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	EventGroup_t *pxEventBits;
 145:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 146:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Allocate the event group. */
ARM GAS  /tmp/cc1YrvUu.s 			page 4


 147:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 148:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 149:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( pxEventBits != NULL )
 150:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 151:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			pxEventBits->uxEventBits = 0;
 152:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 153:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 154:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 155:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 156:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* Both static and dynamic allocation can be used, so note this
 157:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				event group was allocated statically in case the event group is
 158:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				later deleted. */
 159:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				pxEventBits->ucStaticallyAllocated = pdFALSE;
 160:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 161:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 162:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 163:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			traceEVENT_GROUP_CREATE( pxEventBits );
 164:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 165:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 166:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 167:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			traceEVENT_GROUP_CREATE_FAILED();
 168:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 169:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 170:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		return ( EventGroupHandle_t ) pxEventBits;
 171:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 172:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 173:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 174:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 175:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 176:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, const E
 177:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 178:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t uxOriginalBitValue, uxReturn;
 179:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 180:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** BaseType_t xAlreadyYielded;
 181:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** BaseType_t xTimeoutOccurred = pdFALSE;
 182:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 183:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 184:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 185:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 186:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 187:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
 188:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 189:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#endif
 190:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 191:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	vTaskSuspendAll();
 192:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 193:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uxOriginalBitValue = pxEventBits->uxEventBits;
 194:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
 196:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 197:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
 198:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 199:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* All the rendezvous bits are now set - no need to block. */
 200:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxReturn = ( uxOriginalBitValue | uxBitsToSet );
 201:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 202:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* Rendezvous always clear the bits.  They will have been cleared
 203:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			already unless this is the only task in the rendezvous. */
ARM GAS  /tmp/cc1YrvUu.s 			page 5


 204:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 205:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 206:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xTicksToWait = 0;
 207:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 208:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 209:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 210:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			if( xTicksToWait != ( TickType_t ) 0 )
 211:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 212:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				traceEVENT_GROUP_SYNC_BLOCK( xEventGroup, uxBitsToSet, uxBitsToWaitFor );
 213:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 214:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* Store the bits that the calling task is waiting for in the
 215:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				task's event list item so the kernel knows when a match is
 216:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				found.  Then enter the blocked state. */
 217:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | eve
 218:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 219:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* This assignment is obsolete as uxReturn will get set after
 220:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				the task unblocks, but some compilers mistakenly generate a
 221:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				warning about uxReturn being returned without being set if the
 222:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				assignment is omitted. */
 223:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				uxReturn = 0;
 224:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 225:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			else
 226:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 227:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* The rendezvous bits were not set, but no block time was
 228:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				specified - just return the current event bit value. */
 229:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				uxReturn = pxEventBits->uxEventBits;
 230:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				xTimeoutOccurred = pdTRUE;
 231:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 232:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 233:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 234:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	xAlreadyYielded = xTaskResumeAll();
 235:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 236:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	if( xTicksToWait != ( TickType_t ) 0 )
 237:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 238:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( xAlreadyYielded == pdFALSE )
 239:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 240:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			portYIELD_WITHIN_API();
 241:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 242:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 243:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 244:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			mtCOVERAGE_TEST_MARKER();
 245:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 246:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 247:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* The task blocked to wait for its required bits to be set - at this
 248:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		point either the required bits were set or the block time expired.  If
 249:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		the required bits were set they will have been stored in the task's
 250:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		event list item, and they should now be retrieved then cleared. */
 251:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uxReturn = uxTaskResetEventItemValue();
 252:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 253:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 254:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 255:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The task timed out, just return the current event bit value. */
 256:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			taskENTER_CRITICAL();
 257:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 258:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				uxReturn = pxEventBits->uxEventBits;
 259:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 260:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* Although the task got here because it timed out before the
ARM GAS  /tmp/cc1YrvUu.s 			page 6


 261:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				bits it was waiting for were set, it is possible that since it
 262:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				unblocked another task has set the bits.  If this is the case
 263:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				then it needs to clear the bits before exiting. */
 264:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
 265:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 266:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 267:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 268:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				else
 269:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 270:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					mtCOVERAGE_TEST_MARKER();
 271:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 272:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 273:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			taskEXIT_CRITICAL();
 274:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 275:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xTimeoutOccurred = pdTRUE;
 276:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 277:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 278:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 279:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The task unblocked because the bits were set. */
 280:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 281:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 282:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Control bits might be set as the task had blocked should not be
 283:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		returned. */
 284:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 285:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 286:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 287:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	traceEVENT_GROUP_SYNC_END( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTimeoutOccurred );
 288:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 289:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	/* Prevent compiler warnings when trace macros are not used. */
 290:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	( void ) xTimeoutOccurred;
 291:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 292:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	return uxReturn;
 293:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 294:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 295:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 296:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor,
 297:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 298:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 299:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t uxReturn, uxControlBits = 0;
 300:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** BaseType_t xWaitConditionMet, xAlreadyYielded;
 301:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** BaseType_t xTimeoutOccurred = pdFALSE;
 302:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 303:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	/* Check the user is not attempting to wait on the bits used by the kernel
 304:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	itself, and that at least one bit is being requested. */
 305:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( xEventGroup );
 306:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 307:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 308:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 309:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 310:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
 311:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 312:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#endif
 313:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 314:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	vTaskSuspendAll();
 315:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 316:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 317:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
ARM GAS  /tmp/cc1YrvUu.s 			page 7


 318:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Check to see if the wait condition is already met or not. */
 319:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 320:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 321:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( xWaitConditionMet != pdFALSE )
 322:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 323:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The wait condition has already been met so there is no need to
 324:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			block. */
 325:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxReturn = uxCurrentEventBits;
 326:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xTicksToWait = ( TickType_t ) 0;
 327:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 328:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* Clear the wait bits if requested to do so. */
 329:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			if( xClearOnExit != pdFALSE )
 330:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 331:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 332:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 333:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			else
 334:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 335:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				mtCOVERAGE_TEST_MARKER();
 336:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 337:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 338:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else if( xTicksToWait == ( TickType_t ) 0 )
 339:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 340:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The wait condition has not been met, but no block time was
 341:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			specified, so just return the current value. */
 342:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxReturn = uxCurrentEventBits;
 343:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xTimeoutOccurred = pdTRUE;
 344:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 345:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 346:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 347:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The task is going to block to wait for its required bits to be
 348:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			set.  uxControlBits are used to remember the specified behaviour of
 349:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			this call to xEventGroupWaitBits() - for use when the event bits
 350:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			unblock the task. */
 351:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			if( xClearOnExit != pdFALSE )
 352:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 353:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 354:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 355:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			else
 356:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 357:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				mtCOVERAGE_TEST_MARKER();
 358:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 359:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 360:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			if( xWaitForAllBits != pdFALSE )
 361:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 362:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 363:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 364:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			else
 365:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 366:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				mtCOVERAGE_TEST_MARKER();
 367:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 368:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 369:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* Store the bits that the calling task is waiting for in the
 370:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			task's event list item so the kernel knows when a match is
 371:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			found.  Then enter the blocked state. */
 372:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxCo
 373:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 374:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* This is obsolete as it will get set after the task unblocks, but
ARM GAS  /tmp/cc1YrvUu.s 			page 8


 375:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			some compilers mistakenly generate a warning about the variable
 376:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			being returned without being set if it is not done. */
 377:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxReturn = 0;
 378:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 379:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
 380:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 381:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 382:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	xAlreadyYielded = xTaskResumeAll();
 383:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 384:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	if( xTicksToWait != ( TickType_t ) 0 )
 385:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 386:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( xAlreadyYielded == pdFALSE )
 387:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 388:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			portYIELD_WITHIN_API();
 389:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 390:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 391:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 392:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			mtCOVERAGE_TEST_MARKER();
 393:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 394:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 395:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* The task blocked to wait for its required bits to be set - at this
 396:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		point either the required bits were set or the block time expired.  If
 397:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		the required bits were set they will have been stored in the task's
 398:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		event list item, and they should now be retrieved then cleared. */
 399:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uxReturn = uxTaskResetEventItemValue();
 400:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 401:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 402:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 403:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			taskENTER_CRITICAL();
 404:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 405:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* The task timed out, just return the current event bit value. */
 406:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				uxReturn = pxEventBits->uxEventBits;
 407:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 408:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* It is possible that the event bits were updated between this
 409:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				task leaving the Blocked state and running again. */
 410:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 411:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 412:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					if( xClearOnExit != pdFALSE )
 413:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					{
 414:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 415:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					}
 416:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					else
 417:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					{
 418:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 						mtCOVERAGE_TEST_MARKER();
 419:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					}
 420:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 421:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				else
 422:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 423:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					mtCOVERAGE_TEST_MARKER();
 424:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 425:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				xTimeoutOccurred = pdTRUE;
 426:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 427:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			taskEXIT_CRITICAL();
 428:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 429:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 430:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 431:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The task unblocked because the bits were set. */
ARM GAS  /tmp/cc1YrvUu.s 			page 9


 432:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 433:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 434:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* The task blocked so control bits may have been set. */
 435:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 436:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 437:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );
 438:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 439:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	/* Prevent compiler warnings when trace macros are not used. */
 440:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	( void ) xTimeoutOccurred;
 441:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 442:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	return uxReturn;
 443:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 444:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 445:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 446:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
 447:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 448:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 449:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t uxReturn;
 450:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 451:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	/* Check the user is not attempting to clear the bits used by the kernel
 452:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	itself. */
 453:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( xEventGroup );
 454:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 455:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 456:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	taskENTER_CRITICAL();
 457:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 458:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );
 459:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 460:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* The value returned is the event group value prior to the bits being
 461:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		cleared. */
 462:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uxReturn = pxEventBits->uxEventBits;
 463:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 464:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Clear the bits. */
 465:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		pxEventBits->uxEventBits &= ~uxBitsToClear;
 466:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 467:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	taskEXIT_CRITICAL();
 468:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 469:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	return uxReturn;
 470:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 471:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 472:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 473:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_T
 474:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 475:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsTo
 476:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 477:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		BaseType_t xReturn;
 478:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 479:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
 480:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( 
 481:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 482:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		return xReturn;
 483:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 484:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 485:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #endif
 486:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 487:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 488:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
ARM GAS  /tmp/cc1YrvUu.s 			page 10


 489:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 490:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** UBaseType_t uxSavedInterruptStatus;
 491:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 492:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t uxReturn;
 493:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 494:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 495:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 496:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uxReturn = pxEventBits->uxEventBits;
 497:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 498:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 499:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 500:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	return uxReturn;
 501:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 502:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 503:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 504:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
 505:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 506:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** ListItem_t *pxListItem, *pxNext;
 507:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** ListItem_t const *pxListEnd;
 508:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** List_t *pxList;
 509:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 510:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 511:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** BaseType_t xMatchFound = pdFALSE;
 512:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 513:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	/* Check the user is not attempting to set the bits used by the kernel
 514:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	itself. */
 515:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( xEventGroup );
 516:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 517:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 518:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	pxList = &( pxEventBits->xTasksWaitingForBits );
 519:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as th
 520:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	vTaskSuspendAll();
 521:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 522:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );
 523:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 524:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		pxListItem = listGET_HEAD_ENTRY( pxList );
 525:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 526:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Set the bits. */
 527:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		pxEventBits->uxEventBits |= uxBitsToSet;
 528:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 529:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* See if the new bit value should unblock any tasks. */
 530:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		while( pxListItem != pxListEnd )
 531:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 532:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			pxNext = listGET_NEXT( pxListItem );
 533:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 534:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xMatchFound = pdFALSE;
 535:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 536:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* Split the bits waited for from the control bits. */
 537:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 538:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 539:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 540:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 541:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 542:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* Just looking for single bit being set. */
 543:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 544:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 545:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					xMatchFound = pdTRUE;
ARM GAS  /tmp/cc1YrvUu.s 			page 11


 546:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 547:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				else
 548:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 549:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					mtCOVERAGE_TEST_MARKER();
 550:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 551:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 552:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 553:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 554:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* All bits are set. */
 555:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				xMatchFound = pdTRUE;
 556:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 557:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			else
 558:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 559:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* Need all bits to be set, but not all the bits were set. */
 560:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 561:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 562:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			if( xMatchFound != pdFALSE )
 563:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 564:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* The bits match.  Should the bits be cleared on exit? */
 565:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 566:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 567:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					uxBitsToClear |= uxBitsWaitedFor;
 568:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 569:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				else
 570:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 571:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					mtCOVERAGE_TEST_MARKER();
 572:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 573:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 574:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* Store the actual event flag value in the task's event list
 575:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				item before removing the task from the event list.  The
 576:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
 577:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				that is was unblocked due to its required bits matching, rather
 578:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				than because it timed out. */
 579:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO
 580:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 581:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 582:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* Move onto the next list item.  Note pxListItem->pxNext is not
 583:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			used here as the list item may have been removed from the event list
 584:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			and inserted into the ready/pending reading list. */
 585:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			pxListItem = pxNext;
 586:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 587:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 588:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
 589:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		bit was set in the control word. */
 590:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		pxEventBits->uxEventBits &= ~uxBitsToClear;
 591:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 592:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	( void ) xTaskResumeAll();
 593:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 594:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	return pxEventBits->uxEventBits;
 595:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 596:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 597:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 598:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** void vEventGroupDelete( EventGroupHandle_t xEventGroup )
 599:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 600:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 601:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** const List_t *pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
 602:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
ARM GAS  /tmp/cc1YrvUu.s 			page 12


 603:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	vTaskSuspendAll();
 604:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 605:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		traceEVENT_GROUP_DELETE( xEventGroup );
 606:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 607:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 608:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 609:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* Unblock the task, returning 0 as the event list is being deleted
 610:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			and cannot therefore have any bits set. */
 611:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaiting
 612:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO
 613:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 614:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 615:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
 616:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 617:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The event group can only have been allocated dynamically - free
 618:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			it again. */
 619:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			vPortFree( pxEventBits );
 620:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 621:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 622:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 623:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The event group could have been allocated statically or
 624:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			dynamically, so check before attempting to free the memory. */
 625:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			if( pxEventBits->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 626:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 627:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				vPortFree( pxEventBits );
 628:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 629:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			else
 630:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 631:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				mtCOVERAGE_TEST_MARKER();
 632:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 633:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 634:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 635:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 636:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	( void ) xTaskResumeAll();
 637:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 638:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 639:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 640:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /* For internal use only - execute a 'set bits' command that was pended from
 641:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** an interrupt. */
 642:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
 643:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 644:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 645:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 646:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 647:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 648:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /* For internal use only - execute a 'clear bits' command that was pended from
 649:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** an interrupt. */
 650:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
 651:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 652:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
 653:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 654:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 655:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 656:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxB
 657:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
  27              		.loc 1 657 0
  28              		.cfi_startproc
ARM GAS  /tmp/cc1YrvUu.s 			page 13


  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
 658:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** BaseType_t xWaitConditionMet = pdFALSE;
 659:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 660:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	if( xWaitForAllBits == pdFALSE )
  33              		.loc 1 660 0
  34 0000 1AB9     		cbnz	r2, .L2
 661:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 662:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Task only has to wait for one bit within uxBitsToWaitFor to be
 663:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		set.  Is one already set? */
 664:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
  35              		.loc 1 664 0
  36 0002 0842     		tst	r0, r1
  37 0004 06D1     		bne	.L4
 658:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** BaseType_t xWaitConditionMet = pdFALSE;
  38              		.loc 1 658 0
  39 0006 0020     		movs	r0, #0
  40              	.LVL1:
  41 0008 7047     		bx	lr
  42              	.LVL2:
  43              	.L2:
 665:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 666:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xWaitConditionMet = pdTRUE;
 667:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 668:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 669:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 670:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			mtCOVERAGE_TEST_MARKER();
 671:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 672:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 673:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	else
 674:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 675:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
 676:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		Are they set already? */
 677:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
  44              		.loc 1 677 0
  45 000a 31EA0003 		bics	r3, r1, r0
  46 000e 03D0     		beq	.L5
 658:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  47              		.loc 1 658 0
  48 0010 0020     		movs	r0, #0
  49              	.LVL3:
  50 0012 7047     		bx	lr
  51              	.LVL4:
  52              	.L4:
 666:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
  53              		.loc 1 666 0
  54 0014 0120     		movs	r0, #1
  55              	.LVL5:
  56 0016 7047     		bx	lr
  57              	.LVL6:
  58              	.L5:
 678:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 679:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xWaitConditionMet = pdTRUE;
  59              		.loc 1 679 0
  60 0018 0120     		movs	r0, #1
ARM GAS  /tmp/cc1YrvUu.s 			page 14


  61              	.LVL7:
 680:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 681:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 682:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 683:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			mtCOVERAGE_TEST_MARKER();
 684:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 685:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 686:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 687:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	return xWaitConditionMet;
 688:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
  62              		.loc 1 688 0
  63 001a 7047     		bx	lr
  64              		.cfi_endproc
  65              	.LFE14:
  67              		.section	.text.xEventGroupCreate,"ax",%progbits
  68              		.align	1
  69              		.global	xEventGroupCreate
  70              		.syntax unified
  71              		.thumb
  72              		.thumb_func
  73              		.fpu fpv4-sp-d16
  75              	xEventGroupCreate:
  76              	.LFB5:
 143:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	EventGroup_t *pxEventBits;
  77              		.loc 1 143 0
  78              		.cfi_startproc
  79              		@ args = 0, pretend = 0, frame = 0
  80              		@ frame_needed = 0, uses_anonymous_args = 0
  81 0000 10B5     		push	{r4, lr}
  82              	.LCFI0:
  83              		.cfi_def_cfa_offset 8
  84              		.cfi_offset 4, -8
  85              		.cfi_offset 14, -4
 147:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  86              		.loc 1 147 0
  87 0002 1820     		movs	r0, #24
  88 0004 FFF7FEFF 		bl	pvPortMalloc
  89              	.LVL8:
 149:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
  90              		.loc 1 149 0
  91 0008 0446     		mov	r4, r0
  92 000a 20B1     		cbz	r0, .L6
 151:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
  93              		.loc 1 151 0
  94 000c 0023     		movs	r3, #0
  95 000e 40F8043B 		str	r3, [r0], #4
  96              	.LVL9:
 152:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  97              		.loc 1 152 0
  98 0012 FFF7FEFF 		bl	vListInitialise
  99              	.LVL10:
 100              	.L6:
 171:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 101              		.loc 1 171 0
 102 0016 2046     		mov	r0, r4
 103 0018 10BD     		pop	{r4, pc}
 104              		.cfi_endproc
ARM GAS  /tmp/cc1YrvUu.s 			page 15


 105              	.LFE5:
 107              		.section	.text.xEventGroupWaitBits,"ax",%progbits
 108              		.align	1
 109              		.global	xEventGroupWaitBits
 110              		.syntax unified
 111              		.thumb
 112              		.thumb_func
 113              		.fpu fpv4-sp-d16
 115              	xEventGroupWaitBits:
 116              	.LFB7:
 297:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 117              		.loc 1 297 0
 118              		.cfi_startproc
 119              		@ args = 4, pretend = 0, frame = 0
 120              		@ frame_needed = 0, uses_anonymous_args = 0
 121              	.LVL11:
 122 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 123              	.LCFI1:
 124              		.cfi_def_cfa_offset 32
 125              		.cfi_offset 4, -32
 126              		.cfi_offset 5, -28
 127              		.cfi_offset 6, -24
 128              		.cfi_offset 7, -20
 129              		.cfi_offset 8, -16
 130              		.cfi_offset 9, -12
 131              		.cfi_offset 10, -8
 132              		.cfi_offset 14, -4
 133 0004 DDF82090 		ldr	r9, [sp, #32]
 134              	.LVL12:
 305:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 135              		.loc 1 305 0
 136 0008 60B1     		cbz	r0, .L29
 137 000a 0646     		mov	r6, r0
 306:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 138              		.loc 1 306 0
 139 000c 11F07F4A 		ands	r10, r1, #-16777216
 140 0010 11D0     		beq	.L12
 141              	.LBB31:
 142              	.LBB32:
 143              		.file 2 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
   1:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FreeRTOS Kernel V10.0.1
   3:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
   5:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * subject to the following conditions:
  11:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  12:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * copies or substantial portions of the Software.
  14:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  15:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
ARM GAS  /tmp/cc1YrvUu.s 			page 16


  18:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  22:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://www.FreeRTOS.org
  23:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://aws.amazon.com/freertos
  24:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  25:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * 1 tab == 4 spaces!
  26:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  27:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  28:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  29:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  30:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  31:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  32:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  33:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern "C" {
  34:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  35:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  36:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  37:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  38:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  39:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  41:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  42:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  43:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  44:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  45:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  46:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  47:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR		char
  48:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT		float
  49:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE		double
  50:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG		long
  51:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT		short
  52:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE	long
  54:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  55:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef long BaseType_t;
  57:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long UBaseType_t;
  58:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  59:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint16_t TickType_t;
  61:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #else
  63:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint32_t TickType_t;
  64:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  66:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	not need to be guarded with a critical section. */
  68:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  70:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  71:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  72:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
  73:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
ARM GAS  /tmp/cc1YrvUu.s 			page 17


  75:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  77:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  78:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
  79:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD() 															\
  80:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {																				\
  81:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 																				\
  84:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "isb" );													\
  88:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
  89:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  90:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  95:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  96:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
  97:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
  98:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
  99:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 106:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 107:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** (which build with all the ports) will build. */
 111:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 114:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 115:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 116:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 120:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 121:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 122:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 123:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 126:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 127:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 129:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Generic helper function. */
 130:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
ARM GAS  /tmp/cc1YrvUu.s 			page 18


 132:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	uint8_t ucReturn;
 133:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 134:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 136:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 137:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 138:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Check the configuration. */
 139:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#endif
 142:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 143:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 147:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 149:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 151:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 153:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 154:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 155:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 156:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 159:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 160:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 161:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 162:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 163:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portINLINE	__inline
 164:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 165:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 166:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 168:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 170:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 171:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulCurrentInterrupt;
 172:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** BaseType_t xReturn;
 173:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 174:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 175:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 176:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 177:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 178:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 179:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdFALSE;
 180:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 181:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	else
 182:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 183:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdTRUE;
 184:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 185:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 186:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return xReturn;
 187:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 188:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  /tmp/cc1YrvUu.s 			page 19


 189:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 190:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 192:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 193:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulNewBASEPRI;
 194:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 144              		.loc 2 195 0
 145              		.syntax unified
 146              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 147 0012 4FF01003 			mov r3, #16												
 148 0016 83F31188 		msr basepri, r3											
 149 001a BFF36F8F 		isb														
 150 001e BFF34F8F 		dsb														
 151              	
 152              	@ 0 "" 2
 153              	.LVL13:
 154              		.thumb
 155              		.syntax unified
 156              	.L13:
 157 0022 FEE7     		b	.L13
 158              	.LVL14:
 159              	.L29:
 160              	.LBE32:
 161              	.LBE31:
 162              	.LBB33:
 163              	.LBB34:
 164              		.syntax unified
 165              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 166 0024 4FF01003 			mov r3, #16												
 167 0028 83F31188 		msr basepri, r3											
 168 002c BFF36F8F 		isb														
 169 0030 BFF34F8F 		dsb														
 170              	
 171              	@ 0 "" 2
 172              	.LVL15:
 173              		.thumb
 174              		.syntax unified
 175              	.L11:
 176 0034 FEE7     		b	.L11
 177              	.LVL16:
 178              	.L12:
 179              	.LBE34:
 180              	.LBE33:
 307:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 181              		.loc 1 307 0
 182 0036 41B9     		cbnz	r1, .L14
 183              	.LBB35:
 184              	.LBB36:
 185              		.loc 2 195 0
 186              		.syntax unified
 187              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 188 0038 4FF01003 			mov r3, #16												
 189 003c 83F31188 		msr basepri, r3											
 190 0040 BFF36F8F 		isb														
 191 0044 BFF34F8F 		dsb														
 192              	
ARM GAS  /tmp/cc1YrvUu.s 			page 20


 193              	@ 0 "" 2
 194              	.LVL17:
 195              		.thumb
 196              		.syntax unified
 197              	.L15:
 198 0048 FEE7     		b	.L15
 199              	.LVL18:
 200              	.L14:
 201 004a 9846     		mov	r8, r3
 202 004c 1746     		mov	r7, r2
 203 004e 0C46     		mov	r4, r1
 204              	.LBE36:
 205              	.LBE35:
 310:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 206              		.loc 1 310 0
 207 0050 FFF7FEFF 		bl	xTaskGetSchedulerState
 208              	.LVL19:
 209 0054 58B9     		cbnz	r0, .L16
 310:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 210              		.loc 1 310 0 is_stmt 0 discriminator 2
 211 0056 B9F1000F 		cmp	r9, #0
 212 005a 08D0     		beq	.L16
 213              	.LBB37:
 214              	.LBB38:
 215              		.loc 2 195 0 is_stmt 1
 216              		.syntax unified
 217              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 218 005c 4FF01003 			mov r3, #16												
 219 0060 83F31188 		msr basepri, r3											
 220 0064 BFF36F8F 		isb														
 221 0068 BFF34F8F 		dsb														
 222              	
 223              	@ 0 "" 2
 224              	.LVL20:
 225              		.thumb
 226              		.syntax unified
 227              	.L17:
 228 006c FEE7     		b	.L17
 229              	.L16:
 230              	.LBE38:
 231              	.LBE37:
 314:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 232              		.loc 1 314 0
 233 006e FFF7FEFF 		bl	vTaskSuspendAll
 234              	.LVL21:
 235              	.LBB39:
 316:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 236              		.loc 1 316 0
 237 0072 3568     		ldr	r5, [r6]
 238              	.LVL22:
 319:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 239              		.loc 1 319 0
 240 0074 4246     		mov	r2, r8
 241 0076 2146     		mov	r1, r4
 242 0078 2846     		mov	r0, r5
 243 007a FFF7FEFF 		bl	prvTestWaitCondition
 244              	.LVL23:
ARM GAS  /tmp/cc1YrvUu.s 			page 21


 321:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 245              		.loc 1 321 0
 246 007e 58B3     		cbz	r0, .L18
 247              	.LVL24:
 329:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 248              		.loc 1 329 0
 249 0080 17B1     		cbz	r7, .L19
 331:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 250              		.loc 1 331 0
 251 0082 25EA0403 		bic	r3, r5, r4
 252 0086 3360     		str	r3, [r6]
 253              	.LVL25:
 254              	.L19:
 255              	.LBE39:
 382:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 256              		.loc 1 382 0
 257 0088 FFF7FEFF 		bl	xTaskResumeAll
 258              	.LVL26:
 384:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 259              		.loc 1 384 0
 260 008c BAF1000F 		cmp	r10, #0
 261 0090 1FD0     		beq	.L9
 386:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 262              		.loc 1 386 0
 263 0092 38B9     		cbnz	r0, .L23
 388:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 264              		.loc 1 388 0
 265 0094 1C4B     		ldr	r3, .L30
 266 0096 4FF08052 		mov	r2, #268435456
 267 009a 1A60     		str	r2, [r3]
 268              		.syntax unified
 269              	@ 388 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c" 1
 270 009c BFF34F8F 		dsb
 271              	@ 0 "" 2
 272              	@ 388 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c" 1
 273 00a0 BFF36F8F 		isb
 274              	@ 0 "" 2
 275              		.thumb
 276              		.syntax unified
 277              	.L23:
 399:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 278              		.loc 1 399 0
 279 00a4 FFF7FEFF 		bl	uxTaskResetEventItemValue
 280              	.LVL27:
 281 00a8 0546     		mov	r5, r0
 282              	.LVL28:
 401:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 283              		.loc 1 401 0
 284 00aa 10F0007F 		tst	r0, #33554432
 285 00ae 0ED1     		bne	.L24
 403:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 286              		.loc 1 403 0
 287 00b0 FFF7FEFF 		bl	vPortEnterCritical
 288              	.LVL29:
 406:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 289              		.loc 1 406 0
 290 00b4 3568     		ldr	r5, [r6]
ARM GAS  /tmp/cc1YrvUu.s 			page 22


 291              	.LVL30:
 410:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 292              		.loc 1 410 0
 293 00b6 4246     		mov	r2, r8
 294 00b8 2146     		mov	r1, r4
 295 00ba 2846     		mov	r0, r5
 296 00bc FFF7FEFF 		bl	prvTestWaitCondition
 297              	.LVL31:
 298 00c0 18B1     		cbz	r0, .L25
 412:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					{
 299              		.loc 1 412 0
 300 00c2 17B1     		cbz	r7, .L25
 414:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					}
 301              		.loc 1 414 0
 302 00c4 25EA0404 		bic	r4, r5, r4
 303              	.LVL32:
 304 00c8 3460     		str	r4, [r6]
 305              	.L25:
 306              	.LVL33:
 427:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 307              		.loc 1 427 0
 308 00ca FFF7FEFF 		bl	vPortExitCritical
 309              	.LVL34:
 310              	.L24:
 435:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 311              		.loc 1 435 0
 312 00ce 25F07F45 		bic	r5, r5, #-16777216
 313              	.LVL35:
 314              	.L9:
 443:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 315              		.loc 1 443 0
 316 00d2 2846     		mov	r0, r5
 317 00d4 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 318              	.LVL36:
 319              	.L18:
 320              	.LBB40:
 338:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 321              		.loc 1 338 0
 322 00d8 B9F1000F 		cmp	r9, #0
 323 00dc 11D0     		beq	.L26
 351:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 324              		.loc 1 351 0
 325 00de 6FB9     		cbnz	r7, .L27
 326              	.LBE40:
 299:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** BaseType_t xWaitConditionMet, xAlreadyYielded;
 327              		.loc 1 299 0
 328 00e0 0021     		movs	r1, #0
 329              	.L20:
 330              	.LVL37:
 331              	.LBB41:
 360:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 332              		.loc 1 360 0
 333 00e2 B8F1000F 		cmp	r8, #0
 334 00e6 01D0     		beq	.L21
 362:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 335              		.loc 1 362 0
 336 00e8 41F08061 		orr	r1, r1, #67108864
ARM GAS  /tmp/cc1YrvUu.s 			page 23


 337              	.LVL38:
 338              	.L21:
 372:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 339              		.loc 1 372 0
 340 00ec 4A46     		mov	r2, r9
 341 00ee 2143     		orrs	r1, r1, r4
 342              	.LVL39:
 343 00f0 301D     		adds	r0, r6, #4
 344              	.LVL40:
 345 00f2 FFF7FEFF 		bl	vTaskPlaceOnUnorderedEventList
 346              	.LVL41:
 347 00f6 CA46     		mov	r10, r9
 377:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 348              		.loc 1 377 0
 349 00f8 0025     		movs	r5, #0
 350              	.LVL42:
 351 00fa C5E7     		b	.L19
 352              	.LVL43:
 353              	.L27:
 353:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 354              		.loc 1 353 0
 355 00fc 4FF08071 		mov	r1, #16777216
 356 0100 EFE7     		b	.L20
 357              	.L26:
 358 0102 CA46     		mov	r10, r9
 359 0104 C0E7     		b	.L19
 360              	.L31:
 361 0106 00BF     		.align	2
 362              	.L30:
 363 0108 04ED00E0 		.word	-536810236
 364              	.LBE41:
 365              		.cfi_endproc
 366              	.LFE7:
 368              		.section	.text.xEventGroupClearBits,"ax",%progbits
 369              		.align	1
 370              		.global	xEventGroupClearBits
 371              		.syntax unified
 372              		.thumb
 373              		.thumb_func
 374              		.fpu fpv4-sp-d16
 376              	xEventGroupClearBits:
 377              	.LFB8:
 447:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 378              		.loc 1 447 0
 379              		.cfi_startproc
 380              		@ args = 0, pretend = 0, frame = 0
 381              		@ frame_needed = 0, uses_anonymous_args = 0
 382              	.LVL44:
 453:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 383              		.loc 1 453 0
 384 0000 40B9     		cbnz	r0, .L33
 385              	.LBB42:
 386              	.LBB43:
 387              		.loc 2 195 0
 388              		.syntax unified
 389              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 390 0002 4FF01003 			mov r3, #16												
ARM GAS  /tmp/cc1YrvUu.s 			page 24


 391 0006 83F31188 		msr basepri, r3											
 392 000a BFF36F8F 		isb														
 393 000e BFF34F8F 		dsb														
 394              	
 395              	@ 0 "" 2
 396              	.LVL45:
 397              		.thumb
 398              		.syntax unified
 399              	.L34:
 400 0012 FEE7     		b	.L34
 401              	.L33:
 402              	.LBE43:
 403              	.LBE42:
 447:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 404              		.loc 1 447 0
 405 0014 70B5     		push	{r4, r5, r6, lr}
 406              	.LCFI2:
 407              		.cfi_def_cfa_offset 16
 408              		.cfi_offset 4, -16
 409              		.cfi_offset 5, -12
 410              		.cfi_offset 6, -8
 411              		.cfi_offset 14, -4
 412 0016 0546     		mov	r5, r0
 454:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 413              		.loc 1 454 0
 414 0018 11F07F4F 		tst	r1, #-16777216
 415 001c 08D0     		beq	.L35
 416              	.LBB44:
 417              	.LBB45:
 418              		.loc 2 195 0
 419              		.syntax unified
 420              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 421 001e 4FF01003 			mov r3, #16												
 422 0022 83F31188 		msr basepri, r3											
 423 0026 BFF36F8F 		isb														
 424 002a BFF34F8F 		dsb														
 425              	
 426              	@ 0 "" 2
 427              	.LVL46:
 428              		.thumb
 429              		.syntax unified
 430              	.L36:
 431 002e FEE7     		b	.L36
 432              	.L35:
 433 0030 0C46     		mov	r4, r1
 434              	.LBE45:
 435              	.LBE44:
 456:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 436              		.loc 1 456 0
 437 0032 FFF7FEFF 		bl	vPortEnterCritical
 438              	.LVL47:
 462:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 439              		.loc 1 462 0
 440 0036 2E68     		ldr	r6, [r5]
 441              	.LVL48:
 465:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 442              		.loc 1 465 0
ARM GAS  /tmp/cc1YrvUu.s 			page 25


 443 0038 26EA0404 		bic	r4, r6, r4
 444              	.LVL49:
 445 003c 2C60     		str	r4, [r5]
 467:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 446              		.loc 1 467 0
 447 003e FFF7FEFF 		bl	vPortExitCritical
 448              	.LVL50:
 470:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 449              		.loc 1 470 0
 450 0042 3046     		mov	r0, r6
 451 0044 70BD     		pop	{r4, r5, r6, pc}
 452              		.cfi_endproc
 453              	.LFE8:
 455              		.section	.text.xEventGroupGetBitsFromISR,"ax",%progbits
 456              		.align	1
 457              		.global	xEventGroupGetBitsFromISR
 458              		.syntax unified
 459              		.thumb
 460              		.thumb_func
 461              		.fpu fpv4-sp-d16
 463              	xEventGroupGetBitsFromISR:
 464              	.LFB9:
 489:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** UBaseType_t uxSavedInterruptStatus;
 465              		.loc 1 489 0
 466              		.cfi_startproc
 467              		@ args = 0, pretend = 0, frame = 0
 468              		@ frame_needed = 0, uses_anonymous_args = 0
 469              		@ link register save eliminated.
 470              	.LVL51:
 471              	.LBB46:
 472              	.LBB47:
 196:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 197:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %0, %1												\n"	\
 198:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0											\n" \
 199:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 200:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 201:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 202:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 203:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 204:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 205:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 206:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 207:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 208:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 209:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 210:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 211:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 473              		.loc 2 211 0
 474              		.syntax unified
 475              	@ 211 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 476 0000 EFF31183 			mrs r3, basepri											
 477 0004 4FF01002 		mov r2, #16												
 478 0008 82F31188 		msr basepri, r2											
 479 000c BFF36F8F 		isb														
 480 0010 BFF34F8F 		dsb														
 481              	
 482              	@ 0 "" 2
ARM GAS  /tmp/cc1YrvUu.s 			page 26


 483              		.thumb
 484              		.syntax unified
 485              	.LBE47:
 486              	.LBE46:
 496:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 487              		.loc 1 496 0
 488 0014 0068     		ldr	r0, [r0]
 489              	.LVL52:
 490              	.LBB48:
 491              	.LBB49:
 212:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 213:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mrs %0, basepri											\n" \
 214:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %1, %2												\n"	\
 215:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %1											\n" \
 216:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 217:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 218:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 219:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 220:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 221:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 222:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	warnings. */
 223:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return ulOriginalBASEPRI;
 224:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 225:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 226:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 227:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 228:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 229:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 492              		.loc 2 229 0
 493              		.syntax unified
 494              	@ 229 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 495 0016 83F31188 			msr basepri, r3	
 496              	@ 0 "" 2
 497              		.thumb
 498              		.syntax unified
 499              	.LBE49:
 500              	.LBE48:
 501:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 501              		.loc 1 501 0
 502 001a 7047     		bx	lr
 503              		.cfi_endproc
 504              	.LFE9:
 506              		.section	.text.xEventGroupSetBits,"ax",%progbits
 507              		.align	1
 508              		.global	xEventGroupSetBits
 509              		.syntax unified
 510              		.thumb
 511              		.thumb_func
 512              		.fpu fpv4-sp-d16
 514              	xEventGroupSetBits:
 515              	.LFB10:
 505:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** ListItem_t *pxListItem, *pxNext;
 516              		.loc 1 505 0
 517              		.cfi_startproc
 518              		@ args = 0, pretend = 0, frame = 0
 519              		@ frame_needed = 0, uses_anonymous_args = 0
 520              	.LVL53:
ARM GAS  /tmp/cc1YrvUu.s 			page 27


 521 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 522              	.LCFI3:
 523              		.cfi_def_cfa_offset 24
 524              		.cfi_offset 3, -24
 525              		.cfi_offset 4, -20
 526              		.cfi_offset 5, -16
 527              		.cfi_offset 6, -12
 528              		.cfi_offset 7, -8
 529              		.cfi_offset 14, -4
 530              	.LVL54:
 515:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 531              		.loc 1 515 0
 532 0002 40B9     		cbnz	r0, .L41
 533              	.LBB50:
 534              	.LBB51:
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 535              		.loc 2 195 0
 536              		.syntax unified
 537              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 538 0004 4FF01003 			mov r3, #16												
 539 0008 83F31188 		msr basepri, r3											
 540 000c BFF36F8F 		isb														
 541 0010 BFF34F8F 		dsb														
 542              	
 543              	@ 0 "" 2
 544              	.LVL55:
 545              		.thumb
 546              		.syntax unified
 547              	.L42:
 548 0014 FEE7     		b	.L42
 549              	.L41:
 550 0016 0446     		mov	r4, r0
 551              	.LBE51:
 552              	.LBE50:
 516:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 553              		.loc 1 516 0
 554 0018 11F07F4F 		tst	r1, #-16777216
 555 001c 08D0     		beq	.L43
 556              	.LBB52:
 557              	.LBB53:
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 558              		.loc 2 195 0
 559              		.syntax unified
 560              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 561 001e 4FF01003 			mov r3, #16												
 562 0022 83F31188 		msr basepri, r3											
 563 0026 BFF36F8F 		isb														
 564 002a BFF34F8F 		dsb														
 565              	
 566              	@ 0 "" 2
 567              	.LVL56:
 568              		.thumb
 569              		.syntax unified
 570              	.L44:
 571 002e FEE7     		b	.L44
 572              	.L43:
 573 0030 0D46     		mov	r5, r1
ARM GAS  /tmp/cc1YrvUu.s 			page 28


 574              	.LVL57:
 575              	.LBE53:
 576              	.LBE52:
 519:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	vTaskSuspendAll();
 577              		.loc 1 519 0
 578 0032 00F10C06 		add	r6, r0, #12
 579              	.LVL58:
 520:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 580              		.loc 1 520 0
 581 0036 FFF7FEFF 		bl	vTaskSuspendAll
 582              	.LVL59:
 524:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 583              		.loc 1 524 0
 584 003a 2069     		ldr	r0, [r4, #16]
 585              	.LVL60:
 527:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 586              		.loc 1 527 0
 587 003c 2368     		ldr	r3, [r4]
 588 003e 2B43     		orrs	r3, r3, r5
 589 0040 2360     		str	r3, [r4]
 509:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 590              		.loc 1 509 0
 591 0042 0025     		movs	r5, #0
 592              	.LVL61:
 530:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 593              		.loc 1 530 0
 594 0044 04E0     		b	.L45
 595              	.LVL62:
 596              	.L46:
 552:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 597              		.loc 1 552 0
 598 0046 2168     		ldr	r1, [r4]
 599 0048 33EA0101 		bics	r1, r3, r1
 600 004c 0CD0     		beq	.L47
 601              	.LVL63:
 602              	.L48:
 505:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** ListItem_t *pxListItem, *pxNext;
 603              		.loc 1 505 0
 604 004e 3846     		mov	r0, r7
 605              	.LVL64:
 606              	.L45:
 530:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 607              		.loc 1 530 0
 608 0050 B042     		cmp	r0, r6
 609 0052 13D0     		beq	.L52
 532:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 610              		.loc 1 532 0
 611 0054 4768     		ldr	r7, [r0, #4]
 612              	.LVL65:
 533:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xMatchFound = pdFALSE;
 613              		.loc 1 533 0
 614 0056 0268     		ldr	r2, [r0]
 615              	.LVL66:
 538:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 616              		.loc 1 538 0
 617 0058 22F07F43 		bic	r3, r2, #-16777216
 618              	.LVL67:
ARM GAS  /tmp/cc1YrvUu.s 			page 29


 540:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 619              		.loc 1 540 0
 620 005c 12F0806F 		tst	r2, #67108864
 621 0060 F1D1     		bne	.L46
 543:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 622              		.loc 1 543 0
 623 0062 2168     		ldr	r1, [r4]
 624 0064 1942     		tst	r1, r3
 625 0066 F2D0     		beq	.L48
 626              	.L47:
 565:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 627              		.loc 1 565 0
 628 0068 12F0807F 		tst	r2, #16777216
 629 006c 00D0     		beq	.L49
 567:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 630              		.loc 1 567 0
 631 006e 1D43     		orrs	r5, r5, r3
 632              	.LVL68:
 633              	.L49:
 579:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 634              		.loc 1 579 0
 635 0070 2168     		ldr	r1, [r4]
 636 0072 41F00071 		orr	r1, r1, #33554432
 637 0076 FFF7FEFF 		bl	vTaskRemoveFromUnorderedEventList
 638              	.LVL69:
 639 007a E8E7     		b	.L48
 640              	.LVL70:
 641              	.L52:
 590:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 642              		.loc 1 590 0
 643 007c 2368     		ldr	r3, [r4]
 644 007e 23EA0503 		bic	r3, r3, r5
 645 0082 2360     		str	r3, [r4]
 592:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 646              		.loc 1 592 0
 647 0084 FFF7FEFF 		bl	xTaskResumeAll
 648              	.LVL71:
 595:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 649              		.loc 1 595 0
 650 0088 2068     		ldr	r0, [r4]
 651 008a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 652              		.cfi_endproc
 653              	.LFE10:
 655              		.section	.text.xEventGroupSync,"ax",%progbits
 656              		.align	1
 657              		.global	xEventGroupSync
 658              		.syntax unified
 659              		.thumb
 660              		.thumb_func
 661              		.fpu fpv4-sp-d16
 663              	xEventGroupSync:
 664              	.LFB6:
 177:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t uxOriginalBitValue, uxReturn;
 665              		.loc 1 177 0
 666              		.cfi_startproc
 667              		@ args = 0, pretend = 0, frame = 0
 668              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cc1YrvUu.s 			page 30


 669              	.LVL72:
 183:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 670              		.loc 1 183 0
 671 0000 12F07F4F 		tst	r2, #-16777216
 672 0004 08D0     		beq	.L54
 673              	.LBB54:
 674              	.LBB55:
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 675              		.loc 2 195 0
 676              		.syntax unified
 677              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 678 0006 4FF01003 			mov r3, #16												
 679 000a 83F31188 		msr basepri, r3											
 680 000e BFF36F8F 		isb														
 681 0012 BFF34F8F 		dsb														
 682              	
 683              	@ 0 "" 2
 684              	.LVL73:
 685              		.thumb
 686              		.syntax unified
 687              	.L55:
 688 0016 FEE7     		b	.L55
 689              	.LVL74:
 690              	.L54:
 691              	.LBE55:
 692              	.LBE54:
 177:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t uxOriginalBitValue, uxReturn;
 693              		.loc 1 177 0
 694 0018 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 695              	.LCFI4:
 696              		.cfi_def_cfa_offset 24
 697              		.cfi_offset 4, -24
 698              		.cfi_offset 5, -20
 699              		.cfi_offset 6, -16
 700              		.cfi_offset 7, -12
 701              		.cfi_offset 8, -8
 702              		.cfi_offset 14, -4
 703 001c 0646     		mov	r6, r0
 704 001e 8846     		mov	r8, r1
 705 0020 1546     		mov	r5, r2
 706 0022 1F46     		mov	r7, r3
 184:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 707              		.loc 1 184 0
 708 0024 42B9     		cbnz	r2, .L56
 709              	.LBB56:
 710              	.LBB57:
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 711              		.loc 2 195 0
 712              		.syntax unified
 713              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 714 0026 4FF01003 			mov r3, #16												
 715 002a 83F31188 		msr basepri, r3											
 716 002e BFF36F8F 		isb														
 717 0032 BFF34F8F 		dsb														
 718              	
 719              	@ 0 "" 2
 720              	.LVL75:
ARM GAS  /tmp/cc1YrvUu.s 			page 31


 721              		.thumb
 722              		.syntax unified
 723              	.L57:
 724 0036 FEE7     		b	.L57
 725              	.LVL76:
 726              	.L56:
 727              	.LBE57:
 728              	.LBE56:
 187:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 729              		.loc 1 187 0
 730 0038 FFF7FEFF 		bl	xTaskGetSchedulerState
 731              	.LVL77:
 732 003c 48B9     		cbnz	r0, .L58
 187:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 733              		.loc 1 187 0 is_stmt 0 discriminator 2
 734 003e 47B1     		cbz	r7, .L58
 735              	.LBB58:
 736              	.LBB59:
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 737              		.loc 2 195 0 is_stmt 1
 738              		.syntax unified
 739              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 740 0040 4FF01003 			mov r3, #16												
 741 0044 83F31188 		msr basepri, r3											
 742 0048 BFF36F8F 		isb														
 743 004c BFF34F8F 		dsb														
 744              	
 745              	@ 0 "" 2
 746              	.LVL78:
 747              		.thumb
 748              		.syntax unified
 749              	.L59:
 750 0050 FEE7     		b	.L59
 751              	.L58:
 752              	.LBE59:
 753              	.LBE58:
 191:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 754              		.loc 1 191 0
 755 0052 FFF7FEFF 		bl	vTaskSuspendAll
 756              	.LVL79:
 193:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 757              		.loc 1 193 0
 758 0056 3468     		ldr	r4, [r6]
 759              	.LVL80:
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 760              		.loc 1 195 0
 761 0058 4146     		mov	r1, r8
 762 005a 3046     		mov	r0, r6
 763 005c FFF7FEFF 		bl	xEventGroupSetBits
 764              	.LVL81:
 197:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 765              		.loc 1 197 0
 766 0060 44EA0804 		orr	r4, r4, r8
 767              	.LVL82:
 768 0064 35EA0403 		bics	r3, r5, r4
 769 0068 26D1     		bne	.L60
 770              	.LVL83:
ARM GAS  /tmp/cc1YrvUu.s 			page 32


 204:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 771              		.loc 1 204 0
 772 006a 3368     		ldr	r3, [r6]
 773 006c 23EA0503 		bic	r3, r3, r5
 774 0070 3360     		str	r3, [r6]
 775              	.LVL84:
 206:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 776              		.loc 1 206 0
 777 0072 0027     		movs	r7, #0
 778              	.LVL85:
 779              	.L61:
 234:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 780              		.loc 1 234 0
 781 0074 FFF7FEFF 		bl	xTaskResumeAll
 782              	.LVL86:
 236:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 783              		.loc 1 236 0
 784 0078 DFB1     		cbz	r7, .L53
 238:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 785              		.loc 1 238 0
 786 007a 38B9     		cbnz	r0, .L64
 240:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 787              		.loc 1 240 0
 788 007c 144B     		ldr	r3, .L69
 789 007e 4FF08052 		mov	r2, #268435456
 790 0082 1A60     		str	r2, [r3]
 791              		.syntax unified
 792              	@ 240 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c" 1
 793 0084 BFF34F8F 		dsb
 794              	@ 0 "" 2
 795              	@ 240 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c" 1
 796 0088 BFF36F8F 		isb
 797              	@ 0 "" 2
 798              		.thumb
 799              		.syntax unified
 800              	.L64:
 251:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 801              		.loc 1 251 0
 802 008c FFF7FEFF 		bl	uxTaskResetEventItemValue
 803              	.LVL87:
 804 0090 0446     		mov	r4, r0
 805              	.LVL88:
 253:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 806              		.loc 1 253 0
 807 0092 10F0007F 		tst	r0, #33554432
 808 0096 0AD1     		bne	.L65
 256:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 809              		.loc 1 256 0
 810 0098 FFF7FEFF 		bl	vPortEnterCritical
 811              	.LVL89:
 258:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 812              		.loc 1 258 0
 813 009c 3468     		ldr	r4, [r6]
 814              	.LVL90:
 264:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 815              		.loc 1 264 0
 816 009e 35EA0403 		bics	r3, r5, r4
ARM GAS  /tmp/cc1YrvUu.s 			page 33


 817 00a2 02D1     		bne	.L66
 266:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 818              		.loc 1 266 0
 819 00a4 24EA0505 		bic	r5, r4, r5
 820              	.LVL91:
 821 00a8 3560     		str	r5, [r6]
 822              	.L66:
 273:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 823              		.loc 1 273 0
 824 00aa FFF7FEFF 		bl	vPortExitCritical
 825              	.LVL92:
 826              	.L65:
 284:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 827              		.loc 1 284 0
 828 00ae 24F07F44 		bic	r4, r4, #-16777216
 829              	.LVL93:
 830              	.L53:
 293:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 831              		.loc 1 293 0
 832 00b2 2046     		mov	r0, r4
 833 00b4 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 834              	.LVL94:
 835              	.L60:
 210:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 836              		.loc 1 210 0
 837 00b8 3FB1     		cbz	r7, .L62
 217:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 838              		.loc 1 217 0
 839 00ba 3A46     		mov	r2, r7
 840 00bc 45F0A061 		orr	r1, r5, #83886080
 841 00c0 301D     		adds	r0, r6, #4
 842 00c2 FFF7FEFF 		bl	vTaskPlaceOnUnorderedEventList
 843              	.LVL95:
 223:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 844              		.loc 1 223 0
 845 00c6 0024     		movs	r4, #0
 846 00c8 D4E7     		b	.L61
 847              	.LVL96:
 848              	.L62:
 229:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				xTimeoutOccurred = pdTRUE;
 849              		.loc 1 229 0
 850 00ca 3468     		ldr	r4, [r6]
 851              	.LVL97:
 852 00cc D2E7     		b	.L61
 853              	.L70:
 854 00ce 00BF     		.align	2
 855              	.L69:
 856 00d0 04ED00E0 		.word	-536810236
 857              		.cfi_endproc
 858              	.LFE6:
 860              		.section	.text.vEventGroupDelete,"ax",%progbits
 861              		.align	1
 862              		.global	vEventGroupDelete
 863              		.syntax unified
 864              		.thumb
 865              		.thumb_func
 866              		.fpu fpv4-sp-d16
ARM GAS  /tmp/cc1YrvUu.s 			page 34


 868              	vEventGroupDelete:
 869              	.LFB11:
 599:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 870              		.loc 1 599 0
 871              		.cfi_startproc
 872              		@ args = 0, pretend = 0, frame = 0
 873              		@ frame_needed = 0, uses_anonymous_args = 0
 874              	.LVL98:
 875 0000 10B5     		push	{r4, lr}
 876              	.LCFI5:
 877              		.cfi_def_cfa_offset 8
 878              		.cfi_offset 4, -8
 879              		.cfi_offset 14, -4
 880 0002 0446     		mov	r4, r0
 881              	.LVL99:
 603:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 882              		.loc 1 603 0
 883 0004 FFF7FEFF 		bl	vTaskSuspendAll
 884              	.LVL100:
 885              	.L72:
 607:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 886              		.loc 1 607 0
 887 0008 6368     		ldr	r3, [r4, #4]
 888 000a 93B1     		cbz	r3, .L77
 611:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO
 889              		.loc 1 611 0
 890 000c 2069     		ldr	r0, [r4, #16]
 891 000e 04F10C03 		add	r3, r4, #12
 892 0012 9842     		cmp	r0, r3
 893 0014 04D0     		beq	.L78
 612:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 894              		.loc 1 612 0
 895 0016 4FF00071 		mov	r1, #33554432
 896 001a FFF7FEFF 		bl	vTaskRemoveFromUnorderedEventList
 897              	.LVL101:
 898 001e F3E7     		b	.L72
 899              	.L78:
 900              	.LBB60:
 901              	.LBB61:
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 902              		.loc 2 195 0
 903              		.syntax unified
 904              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 905 0020 4FF01003 			mov r3, #16												
 906 0024 83F31188 		msr basepri, r3											
 907 0028 BFF36F8F 		isb														
 908 002c BFF34F8F 		dsb														
 909              	
 910              	@ 0 "" 2
 911              	.LVL102:
 912              		.thumb
 913              		.syntax unified
 914              	.L74:
 915 0030 FEE7     		b	.L74
 916              	.L77:
 917              	.LBE61:
 918              	.LBE60:
ARM GAS  /tmp/cc1YrvUu.s 			page 35


 619:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 919              		.loc 1 619 0
 920 0032 2046     		mov	r0, r4
 921 0034 FFF7FEFF 		bl	vPortFree
 922              	.LVL103:
 636:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 923              		.loc 1 636 0
 924 0038 FFF7FEFF 		bl	xTaskResumeAll
 925              	.LVL104:
 637:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 926              		.loc 1 637 0
 927 003c 10BD     		pop	{r4, pc}
 928              		.cfi_endproc
 929              	.LFE11:
 931              		.section	.text.vEventGroupSetBitsCallback,"ax",%progbits
 932              		.align	1
 933              		.global	vEventGroupSetBitsCallback
 934              		.syntax unified
 935              		.thumb
 936              		.thumb_func
 937              		.fpu fpv4-sp-d16
 939              	vEventGroupSetBitsCallback:
 940              	.LFB12:
 643:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 941              		.loc 1 643 0
 942              		.cfi_startproc
 943              		@ args = 0, pretend = 0, frame = 0
 944              		@ frame_needed = 0, uses_anonymous_args = 0
 945              	.LVL105:
 946 0000 08B5     		push	{r3, lr}
 947              	.LCFI6:
 948              		.cfi_def_cfa_offset 8
 949              		.cfi_offset 3, -8
 950              		.cfi_offset 14, -4
 644:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 951              		.loc 1 644 0
 952 0002 FFF7FEFF 		bl	xEventGroupSetBits
 953              	.LVL106:
 645:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 954              		.loc 1 645 0
 955 0006 08BD     		pop	{r3, pc}
 956              		.cfi_endproc
 957              	.LFE12:
 959              		.section	.text.vEventGroupClearBitsCallback,"ax",%progbits
 960              		.align	1
 961              		.global	vEventGroupClearBitsCallback
 962              		.syntax unified
 963              		.thumb
 964              		.thumb_func
 965              		.fpu fpv4-sp-d16
 967              	vEventGroupClearBitsCallback:
 968              	.LFB13:
 651:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
 969              		.loc 1 651 0
 970              		.cfi_startproc
 971              		@ args = 0, pretend = 0, frame = 0
 972              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cc1YrvUu.s 			page 36


 973              	.LVL107:
 974 0000 08B5     		push	{r3, lr}
 975              	.LCFI7:
 976              		.cfi_def_cfa_offset 8
 977              		.cfi_offset 3, -8
 978              		.cfi_offset 14, -4
 652:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 979              		.loc 1 652 0
 980 0002 FFF7FEFF 		bl	xEventGroupClearBits
 981              	.LVL108:
 653:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 982              		.loc 1 653 0
 983 0006 08BD     		pop	{r3, pc}
 984              		.cfi_endproc
 985              	.LFE13:
 987              		.text
 988              	.Letext0:
 989              		.file 3 "/home/mats/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/machine/_default_type
 990              		.file 4 "/home/mats/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/lock.h"
 991              		.file 5 "/home/mats/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/_types.h"
 992              		.file 6 "/home/mats/gcc-arm-none-eabi-7-2018-q2-update/lib/gcc/arm-none-eabi/7.3.1/include/stddef.
 993              		.file 7 "/home/mats/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/reent.h"
 994              		.file 8 "/home/mats/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/stdlib.h"
 995              		.file 9 "/home/mats/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/_stdint.h"
 996              		.file 10 "../../core/platform/octa/inc/FreeRTOSConfig.h"
 997              		.file 11 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/include/list.h"
 998              		.file 12 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/include/event_groups.h"
 999              		.file 13 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 1000              		.file 14 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/include/portable.h"
ARM GAS  /tmp/cc1YrvUu.s 			page 37


DEFINED SYMBOLS
                            *ABS*:0000000000000000 event_groups.c
     /tmp/cc1YrvUu.s:18     .text.prvTestWaitCondition:0000000000000000 $t
     /tmp/cc1YrvUu.s:24     .text.prvTestWaitCondition:0000000000000000 prvTestWaitCondition
     /tmp/cc1YrvUu.s:68     .text.xEventGroupCreate:0000000000000000 $t
     /tmp/cc1YrvUu.s:75     .text.xEventGroupCreate:0000000000000000 xEventGroupCreate
     /tmp/cc1YrvUu.s:108    .text.xEventGroupWaitBits:0000000000000000 $t
     /tmp/cc1YrvUu.s:115    .text.xEventGroupWaitBits:0000000000000000 xEventGroupWaitBits
     /tmp/cc1YrvUu.s:363    .text.xEventGroupWaitBits:0000000000000108 $d
     /tmp/cc1YrvUu.s:369    .text.xEventGroupClearBits:0000000000000000 $t
     /tmp/cc1YrvUu.s:376    .text.xEventGroupClearBits:0000000000000000 xEventGroupClearBits
     /tmp/cc1YrvUu.s:456    .text.xEventGroupGetBitsFromISR:0000000000000000 $t
     /tmp/cc1YrvUu.s:463    .text.xEventGroupGetBitsFromISR:0000000000000000 xEventGroupGetBitsFromISR
     /tmp/cc1YrvUu.s:507    .text.xEventGroupSetBits:0000000000000000 $t
     /tmp/cc1YrvUu.s:514    .text.xEventGroupSetBits:0000000000000000 xEventGroupSetBits
     /tmp/cc1YrvUu.s:656    .text.xEventGroupSync:0000000000000000 $t
     /tmp/cc1YrvUu.s:663    .text.xEventGroupSync:0000000000000000 xEventGroupSync
     /tmp/cc1YrvUu.s:856    .text.xEventGroupSync:00000000000000d0 $d
     /tmp/cc1YrvUu.s:861    .text.vEventGroupDelete:0000000000000000 $t
     /tmp/cc1YrvUu.s:868    .text.vEventGroupDelete:0000000000000000 vEventGroupDelete
     /tmp/cc1YrvUu.s:932    .text.vEventGroupSetBitsCallback:0000000000000000 $t
     /tmp/cc1YrvUu.s:939    .text.vEventGroupSetBitsCallback:0000000000000000 vEventGroupSetBitsCallback
     /tmp/cc1YrvUu.s:960    .text.vEventGroupClearBitsCallback:0000000000000000 $t
     /tmp/cc1YrvUu.s:967    .text.vEventGroupClearBitsCallback:0000000000000000 vEventGroupClearBitsCallback

UNDEFINED SYMBOLS
pvPortMalloc
vListInitialise
xTaskGetSchedulerState
vTaskSuspendAll
xTaskResumeAll
uxTaskResetEventItemValue
vPortEnterCritical
vPortExitCritical
vTaskPlaceOnUnorderedEventList
vTaskRemoveFromUnorderedEventList
vPortFree
