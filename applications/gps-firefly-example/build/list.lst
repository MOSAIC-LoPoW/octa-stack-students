ARM GAS  /tmp/ccHhRlaB.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"list.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.vListInitialise,"ax",%progbits
  18              		.align	1
  19              		.global	vListInitialise
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	vListInitialise:
  26              	.LFB5:
  27              		.file 1 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c"
   1:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** /*
   2:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c ****  * FreeRTOS Kernel V10.0.1
   3:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c ****  * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c ****  *
   5:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c ****  * the Software without restriction, including without limitation the rights to
   8:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c ****  * subject to the following conditions:
  11:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c ****  *
  12:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c ****  * The above copyright notice and this permission notice shall be included in all
  13:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c ****  * copies or substantial portions of the Software.
  14:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c ****  *
  15:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c ****  *
  22:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c ****  * http://www.FreeRTOS.org
  23:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c ****  * http://aws.amazon.com/freertos
  24:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c ****  *
  25:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c ****  * 1 tab == 4 spaces!
  26:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c ****  */
  27:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 
  28:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 
  29:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** #include <stdlib.h>
  30:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** #include "FreeRTOS.h"
  31:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** #include "list.h"
ARM GAS  /tmp/ccHhRlaB.s 			page 2


  32:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 
  33:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** /*-----------------------------------------------------------
  34:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c ****  * PUBLIC LIST API documented in list.h
  35:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c ****  *----------------------------------------------------------*/
  36:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 
  37:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** void vListInitialise( List_t * const pxList )
  38:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** {
  28              		.loc 1 38 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.LVL0:
  39:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 	/* The list structure contains a list item which is used to mark the
  40:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 	end of the list.  To initialise the list the list end is inserted
  41:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 	as the only list entry. */
  42:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list struc
  34              		.loc 1 42 0
  35 0000 00F10803 		add	r3, r0, #8
  36 0004 4360     		str	r3, [r0, #4]
  43:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 
  44:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 	/* The list end value is the highest possible value in the list to
  45:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 	ensure it remains at the end of the list. */
  46:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 	pxList->xListEnd.xItemValue = portMAX_DELAY;
  37              		.loc 1 46 0
  38 0006 4FF0FF32 		mov	r2, #-1
  39 000a 8260     		str	r2, [r0, #8]
  47:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 
  48:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 	/* The list end next and previous pointers point to itself so we know
  49:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 	when the list is empty. */
  50:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list
  40              		.loc 1 50 0
  41 000c C360     		str	r3, [r0, #12]
  51:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini l
  42              		.loc 1 51 0
  43 000e 0361     		str	r3, [r0, #16]
  52:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 
  53:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  44              		.loc 1 53 0
  45 0010 0023     		movs	r3, #0
  46 0012 0360     		str	r3, [r0]
  54:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 
  55:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 	/* Write known values into the list if
  56:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
  57:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
  58:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
  59:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** }
  47              		.loc 1 59 0
  48 0014 7047     		bx	lr
  49              		.cfi_endproc
  50              	.LFE5:
  52              		.section	.text.vListInitialiseItem,"ax",%progbits
  53              		.align	1
  54              		.global	vListInitialiseItem
  55              		.syntax unified
  56              		.thumb
  57              		.thumb_func
ARM GAS  /tmp/ccHhRlaB.s 			page 3


  58              		.fpu fpv4-sp-d16
  60              	vListInitialiseItem:
  61              	.LFB6:
  60:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** /*-----------------------------------------------------------*/
  61:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 
  62:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** void vListInitialiseItem( ListItem_t * const pxItem )
  63:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** {
  62              		.loc 1 63 0
  63              		.cfi_startproc
  64              		@ args = 0, pretend = 0, frame = 0
  65              		@ frame_needed = 0, uses_anonymous_args = 0
  66              		@ link register save eliminated.
  67              	.LVL1:
  64:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 	/* Make sure the list item is not recorded as being on a list. */
  65:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 	pxItem->pvContainer = NULL;
  68              		.loc 1 65 0
  69 0000 0023     		movs	r3, #0
  70 0002 0361     		str	r3, [r0, #16]
  66:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 
  67:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 	/* Write known values into the list item if
  68:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
  69:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
  70:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
  71:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** }
  71              		.loc 1 71 0
  72 0004 7047     		bx	lr
  73              		.cfi_endproc
  74              	.LFE6:
  76              		.section	.text.vListInsertEnd,"ax",%progbits
  77              		.align	1
  78              		.global	vListInsertEnd
  79              		.syntax unified
  80              		.thumb
  81              		.thumb_func
  82              		.fpu fpv4-sp-d16
  84              	vListInsertEnd:
  85              	.LFB7:
  72:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** /*-----------------------------------------------------------*/
  73:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 
  74:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
  75:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** {
  86              		.loc 1 75 0
  87              		.cfi_startproc
  88              		@ args = 0, pretend = 0, frame = 0
  89              		@ frame_needed = 0, uses_anonymous_args = 0
  90              		@ link register save eliminated.
  91              	.LVL2:
  76:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** ListItem_t * const pxIndex = pxList->pxIndex;
  92              		.loc 1 76 0
  93 0000 4368     		ldr	r3, [r0, #4]
  94              	.LVL3:
  77:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 
  78:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 	/* Only effective when configASSERT() is also defined, these tests may catch
  79:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 	the list data structures being overwritten in memory.  They will not catch
  80:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 	data errors caused by incorrect configuration or use of FreeRTOS. */
  81:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 	listTEST_LIST_INTEGRITY( pxList );
  82:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );
ARM GAS  /tmp/ccHhRlaB.s 			page 4


  83:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 
  84:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 	/* Insert a new list item into pxList, but rather than sort the list,
  85:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 	makes the new list item the last item to be removed by a call to
  86:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 	listGET_OWNER_OF_NEXT_ENTRY(). */
  87:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 	pxNewListItem->pxNext = pxIndex;
  95              		.loc 1 87 0
  96 0002 4B60     		str	r3, [r1, #4]
  88:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  97              		.loc 1 88 0
  98 0004 9A68     		ldr	r2, [r3, #8]
  99 0006 8A60     		str	r2, [r1, #8]
  89:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 
  90:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 	/* Only used during decision coverage testing. */
  91:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 	mtCOVERAGE_TEST_DELAY();
  92:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 
  93:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 	pxIndex->pxPrevious->pxNext = pxNewListItem;
 100              		.loc 1 93 0
 101 0008 9A68     		ldr	r2, [r3, #8]
 102 000a 5160     		str	r1, [r2, #4]
  94:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 	pxIndex->pxPrevious = pxNewListItem;
 103              		.loc 1 94 0
 104 000c 9960     		str	r1, [r3, #8]
  95:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 
  96:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 	/* Remember which list the item is in. */
  97:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 	pxNewListItem->pvContainer = ( void * ) pxList;
 105              		.loc 1 97 0
 106 000e 0861     		str	r0, [r1, #16]
  98:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 
  99:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 	( pxList->uxNumberOfItems )++;
 107              		.loc 1 99 0
 108 0010 0368     		ldr	r3, [r0]
 109              	.LVL4:
 110 0012 0133     		adds	r3, r3, #1
 111 0014 0360     		str	r3, [r0]
 100:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** }
 112              		.loc 1 100 0
 113 0016 7047     		bx	lr
 114              		.cfi_endproc
 115              	.LFE7:
 117              		.section	.text.vListInsert,"ax",%progbits
 118              		.align	1
 119              		.global	vListInsert
 120              		.syntax unified
 121              		.thumb
 122              		.thumb_func
 123              		.fpu fpv4-sp-d16
 125              	vListInsert:
 126              	.LFB8:
 101:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** /*-----------------------------------------------------------*/
 102:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 
 103:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
 104:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** {
 127              		.loc 1 104 0
 128              		.cfi_startproc
 129              		@ args = 0, pretend = 0, frame = 0
 130              		@ frame_needed = 0, uses_anonymous_args = 0
 131              		@ link register save eliminated.
ARM GAS  /tmp/ccHhRlaB.s 			page 5


 132              	.LVL5:
 133 0000 30B4     		push	{r4, r5}
 134              	.LCFI0:
 135              		.cfi_def_cfa_offset 8
 136              		.cfi_offset 4, -8
 137              		.cfi_offset 5, -4
 105:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** ListItem_t *pxIterator;
 106:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 138              		.loc 1 106 0
 139 0002 0D68     		ldr	r5, [r1]
 140              	.LVL6:
 107:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 
 108:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 	/* Only effective when configASSERT() is also defined, these tests may catch
 109:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 	the list data structures being overwritten in memory.  They will not catch
 110:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 	data errors caused by incorrect configuration or use of FreeRTOS. */
 111:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 	listTEST_LIST_INTEGRITY( pxList );
 112:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );
 113:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 
 114:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 	/* Insert the new list item into the list, sorted in xItemValue order.
 115:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 
 116:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 	If the list already contains a list item with the same item value then the
 117:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 	new list item should be placed after it.  This ensures that TCB's which are
 118:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 	stored in ready lists (all of which have the same xItemValue value) get a
 119:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 	share of the CPU.  However, if the xItemValue is the same as the back marker
 120:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 	the iteration loop below will not end.  Therefore the value is checked
 121:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 	first, and the algorithm slightly modified if necessary. */
 122:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 	if( xValueOfInsertion == portMAX_DELAY )
 141              		.loc 1 122 0
 142 0004 B5F1FF3F 		cmp	r5, #-1
 143 0008 02D0     		beq	.L10
 123:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 	{
 124:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 		pxIterator = pxList->xListEnd.pxPrevious;
 125:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 	}
 126:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 	else
 127:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 	{
 128:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 		/* *** NOTE ***********************************************************
 129:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 		If you find your application is crashing here then likely causes are
 130:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 		listed below.  In addition see http://www.freertos.org/FAQHelp.html for
 131:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 		more tips, and ensure configASSERT() is defined!
 132:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 		http://www.freertos.org/a00110.html#configASSERT
 133:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 
 134:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 			1) Stack overflow -
 135:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 			   see http://www.freertos.org/Stacks-and-stack-overflow-checking.html
 136:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 			2) Incorrect interrupt priority assignment, especially on Cortex-M
 137:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 			   parts where numerically high priority values denote low actual
 138:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 			   interrupt priorities, which can seem counter intuitive.  See
 139:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 			   http://www.freertos.org/RTOS-Cortex-M3-M4.html and the definition
 140:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 			   of configMAX_SYSCALL_INTERRUPT_PRIORITY on
 141:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 			   http://www.freertos.org/a00110.html
 142:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 			3) Calling an API function from within a critical section or when
 143:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 			   the scheduler is suspended, or calling an API function that does
 144:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 			   not end in "FromISR" from an interrupt.
 145:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 			4) Using a queue or semaphore before it has been initialised or
 146:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 			   before the scheduler has been started (are interrupts firing
 147:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 			   before vTaskStartScheduler() has been called?).
 148:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 		**********************************************************************/
 149:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 
ARM GAS  /tmp/ccHhRlaB.s 			page 6


 150:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValu
 144              		.loc 1 150 0
 145 000a 00F10802 		add	r2, r0, #8
 146              	.LVL7:
 147 000e 02E0     		b	.L7
 148              	.LVL8:
 149              	.L10:
 124:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 	}
 150              		.loc 1 124 0
 151 0010 0269     		ldr	r2, [r0, #16]
 152              	.LVL9:
 153 0012 04E0     		b	.L6
 154              	.L8:
 155              		.loc 1 150 0
 156 0014 1A46     		mov	r2, r3
 157              	.LVL10:
 158              	.L7:
 159              		.loc 1 150 0 is_stmt 0 discriminator 1
 160 0016 5368     		ldr	r3, [r2, #4]
 161 0018 1C68     		ldr	r4, [r3]
 162 001a AC42     		cmp	r4, r5
 163 001c FAD9     		bls	.L8
 164              	.L6:
 151:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 		{
 152:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 			/* There is nothing to do here, just iterating to the wanted
 153:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 			insertion position. */
 154:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 		}
 155:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 	}
 156:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 
 157:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 	pxNewListItem->pxNext = pxIterator->pxNext;
 165              		.loc 1 157 0 is_stmt 1
 166 001e 5368     		ldr	r3, [r2, #4]
 167 0020 4B60     		str	r3, [r1, #4]
 158:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 168              		.loc 1 158 0
 169 0022 9960     		str	r1, [r3, #8]
 159:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 	pxNewListItem->pxPrevious = pxIterator;
 170              		.loc 1 159 0
 171 0024 8A60     		str	r2, [r1, #8]
 160:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 	pxIterator->pxNext = pxNewListItem;
 172              		.loc 1 160 0
 173 0026 5160     		str	r1, [r2, #4]
 161:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 
 162:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 	/* Remember which list the item is in.  This allows fast removal of the
 163:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 	item later. */
 164:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 	pxNewListItem->pvContainer = ( void * ) pxList;
 174              		.loc 1 164 0
 175 0028 0861     		str	r0, [r1, #16]
 165:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 
 166:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 	( pxList->uxNumberOfItems )++;
 176              		.loc 1 166 0
 177 002a 0368     		ldr	r3, [r0]
 178 002c 0133     		adds	r3, r3, #1
 179 002e 0360     		str	r3, [r0]
 167:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** }
 180              		.loc 1 167 0
 181 0030 30BC     		pop	{r4, r5}
ARM GAS  /tmp/ccHhRlaB.s 			page 7


 182              	.LCFI1:
 183              		.cfi_restore 5
 184              		.cfi_restore 4
 185              		.cfi_def_cfa_offset 0
 186              	.LVL11:
 187 0032 7047     		bx	lr
 188              		.cfi_endproc
 189              	.LFE8:
 191              		.section	.text.uxListRemove,"ax",%progbits
 192              		.align	1
 193              		.global	uxListRemove
 194              		.syntax unified
 195              		.thumb
 196              		.thumb_func
 197              		.fpu fpv4-sp-d16
 199              	uxListRemove:
 200              	.LFB9:
 168:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** /*-----------------------------------------------------------*/
 169:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 
 170:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
 171:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** {
 201              		.loc 1 171 0
 202              		.cfi_startproc
 203              		@ args = 0, pretend = 0, frame = 0
 204              		@ frame_needed = 0, uses_anonymous_args = 0
 205              		@ link register save eliminated.
 206              	.LVL12:
 172:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** /* The list item knows which list it is in.  Obtain the list from the list
 173:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** item. */
 174:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 207              		.loc 1 174 0
 208 0000 0369     		ldr	r3, [r0, #16]
 209              	.LVL13:
 175:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 
 176:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 210              		.loc 1 176 0
 211 0002 4268     		ldr	r2, [r0, #4]
 212 0004 8168     		ldr	r1, [r0, #8]
 213 0006 9160     		str	r1, [r2, #8]
 177:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 214              		.loc 1 177 0
 215 0008 8268     		ldr	r2, [r0, #8]
 216 000a 4168     		ldr	r1, [r0, #4]
 217 000c 5160     		str	r1, [r2, #4]
 178:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 
 179:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 	/* Only used during decision coverage testing. */
 180:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 	mtCOVERAGE_TEST_DELAY();
 181:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 
 182:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 	/* Make sure the index is left pointing to a valid item. */
 183:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 	if( pxList->pxIndex == pxItemToRemove )
 218              		.loc 1 183 0
 219 000e 5A68     		ldr	r2, [r3, #4]
 220 0010 8242     		cmp	r2, r0
 221 0012 06D0     		beq	.L13
 222              	.L12:
 184:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 	{
 185:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 		pxList->pxIndex = pxItemToRemove->pxPrevious;
ARM GAS  /tmp/ccHhRlaB.s 			page 8


 186:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 	}
 187:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 	else
 188:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 	{
 189:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 		mtCOVERAGE_TEST_MARKER();
 190:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 	}
 191:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 
 192:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 	pxItemToRemove->pvContainer = NULL;
 223              		.loc 1 192 0
 224 0014 0022     		movs	r2, #0
 225 0016 0261     		str	r2, [r0, #16]
 193:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 	( pxList->uxNumberOfItems )--;
 226              		.loc 1 193 0
 227 0018 1A68     		ldr	r2, [r3]
 228 001a 013A     		subs	r2, r2, #1
 229 001c 1A60     		str	r2, [r3]
 194:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 	return pxList->uxNumberOfItems;
 230              		.loc 1 195 0
 231 001e 1868     		ldr	r0, [r3]
 232              	.LVL14:
 196:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** }
 233              		.loc 1 196 0
 234 0020 7047     		bx	lr
 235              	.LVL15:
 236              	.L13:
 185:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/list.c **** 	}
 237              		.loc 1 185 0
 238 0022 8268     		ldr	r2, [r0, #8]
 239 0024 5A60     		str	r2, [r3, #4]
 240 0026 F5E7     		b	.L12
 241              		.cfi_endproc
 242              	.LFE9:
 244              		.text
 245              	.Letext0:
 246              		.file 2 "/home/mats/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/machine/_default_type
 247              		.file 3 "/home/mats/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/lock.h"
 248              		.file 4 "/home/mats/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/_types.h"
 249              		.file 5 "/home/mats/gcc-arm-none-eabi-7-2018-q2-update/lib/gcc/arm-none-eabi/7.3.1/include/stddef.
 250              		.file 6 "/home/mats/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/reent.h"
 251              		.file 7 "/home/mats/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/stdlib.h"
 252              		.file 8 "/home/mats/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/_stdint.h"
 253              		.file 9 "../../core/platform/octa/inc/FreeRTOSConfig.h"
 254              		.file 10 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
 255              		.file 11 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/include/list.h"
ARM GAS  /tmp/ccHhRlaB.s 			page 9


DEFINED SYMBOLS
                            *ABS*:0000000000000000 list.c
     /tmp/ccHhRlaB.s:18     .text.vListInitialise:0000000000000000 $t
     /tmp/ccHhRlaB.s:25     .text.vListInitialise:0000000000000000 vListInitialise
     /tmp/ccHhRlaB.s:53     .text.vListInitialiseItem:0000000000000000 $t
     /tmp/ccHhRlaB.s:60     .text.vListInitialiseItem:0000000000000000 vListInitialiseItem
     /tmp/ccHhRlaB.s:77     .text.vListInsertEnd:0000000000000000 $t
     /tmp/ccHhRlaB.s:84     .text.vListInsertEnd:0000000000000000 vListInsertEnd
     /tmp/ccHhRlaB.s:118    .text.vListInsert:0000000000000000 $t
     /tmp/ccHhRlaB.s:125    .text.vListInsert:0000000000000000 vListInsert
     /tmp/ccHhRlaB.s:192    .text.uxListRemove:0000000000000000 $t
     /tmp/ccHhRlaB.s:199    .text.uxListRemove:0000000000000000 uxListRemove

NO UNDEFINED SYMBOLS
