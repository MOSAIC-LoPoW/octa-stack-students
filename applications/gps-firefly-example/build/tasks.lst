ARM GAS  /tmp/ccPN8tEQ.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"tasks.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	prvTaskIsTaskSuspended:
  25              	.LFB14:
  26              		.file 1 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c"
   1:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
   2:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * FreeRTOS Kernel V10.0.1
   3:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
   5:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the Software without restriction, including without limitation the rights to
   8:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * subject to the following conditions:
  11:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  12:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The above copyright notice and this permission notice shall be included in all
  13:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * copies or substantial portions of the Software.
  14:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  15:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  22:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * http://www.FreeRTOS.org
  23:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * http://aws.amazon.com/freertos
  24:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  25:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * 1 tab == 4 spaces!
  26:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  27:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  28:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Standard includes. */
  29:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <stdlib.h>
  30:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <string.h>
  31:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  32:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
ARM GAS  /tmp/ccPN8tEQ.s 			page 2


  33:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  34:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** task.h is included from an application file. */
  35:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  36:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  37:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* FreeRTOS includes. */
  38:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "FreeRTOS.h"
  39:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "task.h"
  40:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "timers.h"
  41:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "stack_macros.h"
  42:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  43:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  44:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  45:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** header files above, but not in this file, in order to generate the correct
  46:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** privileged Vs unprivileged linkage and placement. */
  47:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  48:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  49:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  50:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** functions but without including stdio.h here. */
  51:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  52:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  53:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to generate human readable text from the raw data generated by the
  54:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  55:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  56:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#include <stdio.h>
  57:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
  58:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  59:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_PREEMPTION == 0 )
  60:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
  61:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed just because a higher priority task has been woken. */
  62:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
  63:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
  64:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
  65:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
  66:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  67:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
  68:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOT_WAITING_NOTIFICATION	( ( uint8_t ) 0 )
  69:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskWAITING_NOTIFICATION		( ( uint8_t ) 1 )
  70:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOTIFICATION_RECEIVED		( ( uint8_t ) 2 )
  71:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  72:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
  73:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
  74:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is used purely for checking the high water mark for tasks.
  75:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  76:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
  77:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  78:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Sometimes the FreeRTOSConfig.h settings only allow a task to be created using
  79:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** dynamically allocated RAM, in which case when any task is deleted it is known
  80:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** that both the task's stack and TCB need to be freed.  Sometimes the
  81:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** FreeRTOSConfig.h settings only allow a task to be created using statically
  82:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** allocated RAM, in which case when any task is deleted it is known that neither
  83:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the task's stack or TCB should be freed.  Sometimes the FreeRTOSConfig.h
  84:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** settings allow a task to be created using either statically or dynamically
  85:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** allocated RAM, in which case a member of the TCB is used to record whether the
  86:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** stack and/or TCB were allocated statically or dynamically, so when a task is
  87:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** deleted the RAM that was allocated dynamically is freed again and no attempt is
  88:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** made to free the RAM that was allocated statically.
  89:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE is only true if it is possible for a
ARM GAS  /tmp/ccPN8tEQ.s 			page 3


  90:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** task to be created using either statically or dynamically allocated RAM.  Note
  91:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** that if portUSING_MPU_WRAPPERS is 1 then a protected task can be created with
  92:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** a statically allocated stack and a dynamically allocated TCB.
  93:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** !!!NOTE!!! If the definition of tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE is
  94:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** changed then the definition of StaticTask_t must also be updated. */
  95:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE	( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( c
  96:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB 		( ( uint8_t ) 0 )
  97:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY 			( ( uint8_t ) 1 )
  98:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB		( ( uint8_t ) 2 )
  99:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 100:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* If any of the following are set then task stacks are filled with a known
 101:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** value so the high water mark can be determined.  If none of the following are
 102:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** set then don't fill the stack so there is no unnecessary dependency on memset. */
 103:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTas
 104:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	1
 105:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
 106:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	0
 107:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 108:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 109:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 110:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
 111:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 112:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskRUNNING_CHAR		( 'X' )
 113:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
 114:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskREADY_CHAR		( 'R' )
 115:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDELETED_CHAR		( 'D' )
 116:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 117:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 118:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 119:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 120:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * global, rather than file scope.
 121:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 122:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 123:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define static
 124:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 125:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 126:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The name allocated to the Idle task.  This can be overridden by defining
 127:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** configIDLE_TASK_NAME in FreeRTOSConfig.h. */
 128:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifndef configIDLE_TASK_NAME
 129:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define configIDLE_TASK_NAME "IDLE"
 130:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 131:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 132:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 133:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 134:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 135:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a generic way that is not optimised to any particular
 136:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	microcontroller architecture. */
 137:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 138:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 139:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	state task. */
 140:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 141:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 142:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 143:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 144:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 145:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 146:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
ARM GAS  /tmp/ccPN8tEQ.s 			page 4


 147:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 148:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 149:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 150:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 151:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 152:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority = uxTopReadyPriority;														\
 153:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 154:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 155:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) )							\
 156:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 157:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxTopPriority );																\
 158:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			--uxTopPriority;																			\
 159:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 160:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 161:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 162:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 163:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			\
 164:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTopReadyPriority = uxTopPriority;																\
 165:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 166:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 167:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 168:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 169:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 170:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	they are only required when a port optimised method of task selection is
 171:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	being used. */
 172:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 173:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 174:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 175:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 176:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 177:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 178:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 179:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	architecture being used. */
 180:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 181:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 182:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 183:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 184:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 185:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 186:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 187:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																								\
 188:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 189:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 190:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority list that contains ready tasks. */								\
 191:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 192:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 193:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 194:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 196:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 197:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 198:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 199:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 200:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	or suspended list then it won't be in a ready list. */
 201:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 202:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 203:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
ARM GAS  /tmp/ccPN8tEQ.s 			page 5


 204:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 205:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 206:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 207:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 208:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 209:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 210:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 211:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 212:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 213:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 214:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** count overflows. */
 215:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 216:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {																									\
 217:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t *pxTemp;																					\
 218:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 219:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 220:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 221:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 222:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 223:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 224:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 225:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xNumOfOverflows++;																				\
 226:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 227:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 228:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 229:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 230:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 231:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 232:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 233:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task.  It is inserted at the end of the list.
 234:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 235:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 236:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
 237:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 238:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
 239:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 240:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 241:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 242:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 243:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 244:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 245:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 246:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 247:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 248:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? ( TCB_t * ) pxCurrentTCB : ( T
 249:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 250:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 251:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 252:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 253:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** is important its value is not updated due to a task priority change while it is
 254:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 255:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 256:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 257:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** to its original value when it is released. */
 258:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_16_BIT_TICKS == 1 )
 259:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 260:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
ARM GAS  /tmp/ccPN8tEQ.s 			page 6


 261:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 262:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 263:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 264:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 265:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 266:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and stores task state information, including a pointer to the task's context
 267:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * (the task's run time environment, including register values)
 268:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 269:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef struct tskTaskControlBlock
 270:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 271:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 272:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 273:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 274:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 275:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 276:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 277:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xStateListItem;	/*< The list that the state list item of a task is reference from den
 278:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 279:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 280:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
 281:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 282:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 283:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
 284:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the highest valid address for the stack. */
 285:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 286:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 287:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 288:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxCriticalNesting;	/*< Holds the critical section nesting depth for ports that do no
 289:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 290:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 291:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 292:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 293:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. *
 294:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 295:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 296:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 297:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 298:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxMutexesHeld;
 299:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 300:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 301:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 302:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 303:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 304:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 305:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 306:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		void			*pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 307:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 308:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 309:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configGENERATE_RUN_TIME_STATS == 1 )
 310:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 311:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 312:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 313:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 314:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 315:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 316:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 317:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
ARM GAS  /tmp/ccPN8tEQ.s 			page 7


 318:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 319:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 320:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		implements a system-wide malloc() that must be provided with locks. */
 321:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		struct	_reent xNewLib_reent;
 322:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 323:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 324:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TASK_NOTIFICATIONS == 1 )
 325:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 326:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint8_t ucNotifyState;
 327:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 328:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 329:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* See the comments above the definition of
 330:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 331:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for
 332:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t	ucStaticallyAllocated; 		/*< Set to pdTRUE if the task is a statically allocated to ensur
 333:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 334:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 335:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 336:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t ucDelayAborted;
 337:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 338:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 339:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** } tskTCB;
 340:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 341:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 342:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** below to enable the use of older kernel aware debuggers. */
 343:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef tskTCB TCB_t;
 344:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 345:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 346:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** which static variables must be declared volatile. */
 347:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 348:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 349:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 350:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lists for ready and blocked tasks. --------------------*/
 351:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ] = {0};	/*< Prioritised read
 352:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1 = {0};								/*< Delayed tasks. */
 353:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2 = {0};								/*< Delayed tasks (two lists are used
 354:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList = NULL;					/*< Points to the delayed ta
 355:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList = NULL;			/*< Points to the dela
 356:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList = {0};								/*< Tasks that have been readied whil
 357:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 358:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( INCLUDE_vTaskDelete == 1 )
 359:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 360:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xTasksWaitingTermination = {0};					/*< Tasks that have been deleted
 361:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 362:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 363:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 364:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 365:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 366:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 367:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList = {0};						/*< Tasks that are currently suspende
 368:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 369:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 370:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 371:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Other file private variables. --------------------------------*/
 372:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
 373:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) configINITIAL_TICK_COUNT
 374:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
ARM GAS  /tmp/ccPN8tEQ.s 			page 8


 375:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 376:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxPendedTicks 			= ( UBaseType_t ) 0U;
 377:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 378:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 379:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
 380:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /* Initialise
 381:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			/*< Holds the handle of the idle 
 382:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 383:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 384:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 385:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 386:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 387:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 388:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 389:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 390:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** accessed from a critical section. */
 391:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;
 392:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 393:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 394:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 395:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter
 396:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution tim
 397:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 398:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 399:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 400:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint -restore */
 401:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 402:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 403:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 404:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Callback function prototypes. --------------------------*/
 405:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if(  configCHECK_FOR_STACK_OVERFLOW > 0 )
 406:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 407:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 408:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 409:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICK_HOOK > 0 )
 410:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationTickHook( void );
 411:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 412:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 413:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 414:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxI
 415:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 416:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 417:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* File private functions. --------------------------------*/
 418:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 419:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /**
 420:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 421:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 422:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is in any other state.
 423:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 424:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 425:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 426:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 427:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 428:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 429:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 430:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 431:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
ARM GAS  /tmp/ccPN8tEQ.s 			page 9


 432:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * automatically upon the creation of the first task.
 433:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 434:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 435:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 436:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 437:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 438:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 439:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * creation of the first user task.
 440:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 441:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 442:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 443:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 444:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
 445:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 446:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 447:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 448:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 449:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 450:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 451:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * including the stack pointed to by the TCB.
 452:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 453:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 454:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 455:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 456:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 457:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 458:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 459:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 460:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 461:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 462:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 463:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 464:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 465:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and its TCB deleted.
 466:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 467:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 468:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 469:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 470:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 471:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * either the current or the overflow delayed task list.
 472:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 473:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
 474:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 475:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 476:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 477:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 478:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * a suspended list, etc.).
 479:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 480:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 481:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * NORMAL APPLICATION CODE.
 482:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 483:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 484:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 485:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
 486:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 487:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 488:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccPN8tEQ.s 			page 10


 489:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 490:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 491:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 492:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 493:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 494:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 495:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] ) PRIVI
 496:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 497:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 498:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 499:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 500:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 501:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 502:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * determining how much of the stack remains at the original preset value.
 503:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 504:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
 505:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 506:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGED_FUNCTION;
 507:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 508:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 509:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 510:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 511:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 512:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * next move a task from the Blocked state to the Running state.
 513:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 514:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 515:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 516:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 517:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * set to a value other than 1.
 518:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 519:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 520:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 521:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 522:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 523:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 524:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 525:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 526:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 527:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * will exit the Blocked state.
 528:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 529:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 530:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 531:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 532:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 533:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*
 534:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 535:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * human readable tables of task information.
 536:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 */
 537:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName ) PRIVILEGED_FUNCTION;
 538:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 539:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 540:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 541:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 542:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 543:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * dynamically to fill in the structure's members.
 544:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 545:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
ARM GAS  /tmp/ccPN8tEQ.s 			page 11


 546:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName, 		/*lint !e971 Unqualified char types are allowed for strings a
 547:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 548:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 549:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 550:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 551:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 552:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION;
 553:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 554:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 555:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a new task has been created and initialised to place the task
 556:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * under the control of the scheduler.
 557:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 558:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB ) PRIVILEGED_FUNCTION;
 559:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 560:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 561:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * freertos_tasks_c_additions_init() should only be called if the user definable
 562:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is the only macro
 563:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * called by the function.
 564:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 565:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
 566:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 567:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void freertos_tasks_c_additions_init( void ) PRIVILEGED_FUNCTION;
 568:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 569:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 570:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 571:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 572:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 573:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 574:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 575:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 576:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 577:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 578:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 579:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 580:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StackType_t * const puxStackBuffer,
 581:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StaticTask_t * const pxTaskBuffer )
 582:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 583:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 584:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
 585:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 586:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( puxStackBuffer != NULL );
 587:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 588:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 589:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configASSERT_DEFINED == 1 )
 590:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 591:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Sanity check that the size of the structure used to declare a
 592:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			variable of type StaticTask_t equals the size of the real task
 593:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure. */
 594:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			volatile size_t xSize = sizeof( StaticTask_t );
 595:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( xSize == sizeof( TCB_t ) );
 596:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 597:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configASSERT_DEFINED */
 598:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 599:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 600:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 601:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 602:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The memory used for the task's TCB and stack are passed into this
ARM GAS  /tmp/ccPN8tEQ.s 			page 12


 603:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function - use them. */
 604:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are desig
 605:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 606:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 607:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated f
 608:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 609:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 610:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 611:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 612:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 613:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 614:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 615:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNe
 616:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 617:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 618:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 619:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 620:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = NULL;
 621:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 622:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 623:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 624:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 625:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 626:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 627:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 628:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 629:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 630:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 631:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestrictedStatic( const TaskParameters_t * const pxTaskDefinition, TaskHandl
 632:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 633:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 634:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 635:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 636:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
 637:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
 638:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 639:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskDefinition->puxStackBuffer != NULL ) && ( pxTaskDefinition->pxTaskBuffer != NULL ) )
 640:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 641:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 642:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 643:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 644:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskDefinition->pxTaskBuffer;
 645:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 646:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Store the stack location in the TCB. */
 647:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 648:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 649:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 650:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 651:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 652:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 653:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 654:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 655:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 656:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 657:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 658:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->pcName,
 659:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									( uint32_t ) pxTaskDefinition->usStackDepth,
ARM GAS  /tmp/ccPN8tEQ.s 			page 13


 660:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->pvParameters,
 661:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->uxPriority,
 662:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxCreatedTask, pxNewTCB,
 663:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->xRegions );
 664:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 665:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 666:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 667:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 668:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 669:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 670:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 671:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 672:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 673:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 674:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 675:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 676:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 677:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *p
 678:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 679:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 680:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 681:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 682:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer );
 683:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 684:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskDefinition->puxStackBuffer != NULL )
 685:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 686:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 687:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 688:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 689:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 690:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 691:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 692:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 693:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Store the stack location in the TCB. */
 694:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 695:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 696:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 697:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 698:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Tasks can be created statically or dynamically, so note
 699:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task had a statically allocated stack in case it is
 700:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					later deleted.  The TCB was allocated dynamically. */
 701:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 702:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 703:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
 704:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 705:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 706:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pcName,
 707:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										( uint32_t ) pxTaskDefinition->usStackDepth,
 708:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pvParameters,
 709:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->uxPriority,
 710:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxCreatedTask, pxNewTCB,
 711:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->xRegions );
 712:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 713:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddNewTaskToReadyList( pxNewTCB );
 714:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 715:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 716:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/ccPN8tEQ.s 			page 14


 717:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 718:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 719:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 720:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 721:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 722:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 723:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 724:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 725:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 726:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 727:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and 
 728:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const configSTACK_DEPTH_TYPE usStackDepth,
 729:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							void * const pvParameters,
 730:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							UBaseType_t uxPriority,
 731:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							TaskHandle_t * const pxCreatedTask )
 732:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 733:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 734:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 735:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 736:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the stack grows down then allocate the stack then the TCB so the stack
 737:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		does not grow into the TCB.  Likewise if the stack grows up then allocate
 738:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the TCB then the stack. */
 739:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portSTACK_GROWTH > 0 )
 740:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 741:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends on
 742:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the implementation of the port malloc function and whether or not static
 743:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allocation is being used. */
 744:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 745:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 746:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 747:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 748:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the stack used by the task being created.
 749:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				The base of the stack memory stored in the TCB so the task can
 750:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				be deleted later if required. */
 751:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Sta
 752:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 753:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB->pxStack == NULL )
 754:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 755:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Could not allocate the stack.  Delete the allocated TCB. */
 756:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxNewTCB );
 757:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB = NULL;
 758:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 759:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 760:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 761:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portSTACK_GROWTH */
 762:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 763:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxStack;
 764:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 765:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the stack used by the task being created. */
 766:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) 
 767:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 768:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxStack != NULL )
 769:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 770:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the TCB. */
 771:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the cas
 772:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 773:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB != NULL )
ARM GAS  /tmp/ccPN8tEQ.s 			page 15


 774:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 775:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Store the stack location in the TCB. */
 776:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB->pxStack = pxStack;
 777:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 778:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
 779:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 780:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The stack cannot be used as the TCB was not created.  Free
 781:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it again. */
 782:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxStack );
 783:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 784:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 785:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 786:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 787:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = NULL;
 788:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 789:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 790:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portSTACK_GROWTH */
 791:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 792:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxNewTCB != NULL )
 793:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 794:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated f
 795:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 796:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 797:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created dynamically in case it is later deleted. */
 798:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 799:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 800:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 801:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 802:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, p
 803:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 804:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 805:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 806:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 807:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 808:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 809:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 810:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 811:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 812:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 813:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 814:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 815:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 816:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 817:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 818:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 819:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 820:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 821:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 822:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 823:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 824:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions )
 825:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 826:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** StackType_t *pxTopOfStack;
 827:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t x;
 828:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 829:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 830:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Should the task be created in privileged mode? */
ARM GAS  /tmp/ccPN8tEQ.s 			page 16


 831:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		BaseType_t xRunPrivileged;
 832:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 833:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 834:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdTRUE;
 835:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 836:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 837:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 838:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdFALSE;
 839:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 840:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority &= ~portPRIVILEGE_BIT;
 841:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS == 1 */
 842:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 843:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Avoid dependency on memset() if it is not required. */
 844:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
 845:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 846:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Fill the stack with a known value to assist debugging. */
 847:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof(
 848:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 849:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* tskSET_NEW_STACKS_TO_KNOWN_VALUE */
 850:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 851:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Calculate the top of stack address.  This depends on whether the stack
 852:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	grows from high memory to low (as per the 80x86) or vice versa.
 853:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portSTACK_GROWTH is used to make the result positive or negative as required
 854:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	by the port. */
 855:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portSTACK_GROWTH < 0 )
 856:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 857:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 858:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 859:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 860:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the calculated top of stack is correct. */
 861:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALI
 862:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 863:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
 864:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 865:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Also record the stack's high address, which may assist
 866:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			debugging. */
 867:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxEndOfStack = pxTopOfStack;
 868:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 869:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configRECORD_STACK_HIGH_ADDRESS */
 870:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 871:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portSTACK_GROWTH */
 872:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 873:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack;
 874:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 875:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the stack buffer is correct. */
 876:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYT
 877:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 878:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The other extreme of the stack space is required if stack checking is
 879:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		performed. */
 880:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 881:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 882:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portSTACK_GROWTH */
 883:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 884:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the task name in the TCB. */
 885:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 886:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 887:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
ARM GAS  /tmp/ccPN8tEQ.s 			page 17


 888:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 889:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 890:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configMAX_TASK_NAME_LEN characters just in case the memory after the
 891:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		string is not accessible (extremely unlikely). */
 892:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pcName[ x ] == 0x00 )
 893:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 894:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			break;
 895:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 896:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 897:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 898:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 899:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 900:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 901:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 902:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure the name string is terminated in the case that the string length
 903:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	was greater or equal to configMAX_TASK_NAME_LEN. */
 904:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 905:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 906:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
 907:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	remove the privilege bit if one is present. */
 908:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 909:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 910:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 911:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 912:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
 913:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 914:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 915:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 916:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 917:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxNewTCB->uxPriority = uxPriority;
 918:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 919:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 920:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxBasePriority = uxPriority;
 921:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 922:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 923:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_MUTEXES */
 924:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 925:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 926:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 927:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 928:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 929:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
 930:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 931:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 932:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Event lists are always in priority order. */
 933:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( Ti
 934:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 935:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 936:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 937:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 938:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 939:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 940:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
 941:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 942:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 943:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 944:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTaskTag = NULL;
ARM GAS  /tmp/ccPN8tEQ.s 			page 18


 945:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 946:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
 947:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 948:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 949:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 950:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulRunTimeCounter = 0UL;
 951:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 952:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
 953:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 954:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 955:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 956:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth
 957:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 958:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
 959:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 960:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning about unreferenced parameter. */
 961:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xRegions;
 962:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 963:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 964:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 965:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 966:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 967:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 968:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 969:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 970:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 971:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 972:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 973:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 974:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 975:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 976:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulNotifiedValue = 0;
 977:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 978:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 979:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 980:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 981:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 982:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 983:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Initialise this task's Newlib reent structure. */
 984:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 985:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 986:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 987:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 988:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 989:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 990:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucDelayAborted = pdFALSE;
 991:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 992:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 993:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 994:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Initialize the TCB stack to look as if the task was already running,
 995:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	but had been interrupted by the scheduler.  The return address is set
 996:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to the start of the task function. Once the stack has been initialised
 997:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the top of stack variable is updated. */
 998:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 999:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1000:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivi
1001:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  /tmp/ccPN8tEQ.s 			page 19


1002:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
1003:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1004:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1005:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1006:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
1007:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1008:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( ( void * ) pxCreatedTask != NULL )
1009:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1010:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pass the handle out in an anonymous way.  The handle can be used to
1011:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		change the created task's priority, delete the created task, etc.*/
1012:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1013:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1014:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1015:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1016:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1017:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1018:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
1019:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1020:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1021:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
1022:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
1023:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
1024:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	updated. */
1025:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
1026:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1027:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxCurrentNumberOfTasks++;
1028:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
1029:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1030:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are no other tasks, or all the other tasks are in
1031:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the suspended state - make this the current task. */
1032:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB = pxNewTCB;
1033:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1034:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1035:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1036:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* This is the first task to be created so do the preliminary
1037:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				initialisation required.  We will not recover if this call
1038:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				fails, but we will report the failure. */
1039:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseTaskLists();
1040:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1041:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1042:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1043:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1044:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1045:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1046:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1047:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1048:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the scheduler is not already running, make this task the
1049:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			current task if it is the highest priority task to be created
1050:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			so far. */
1051:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning == pdFALSE )
1052:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1053:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1054:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1055:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = pxNewTCB;
1056:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1057:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1058:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  /tmp/ccPN8tEQ.s 			page 20


1059:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1060:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1061:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1062:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1063:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1064:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1065:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1066:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1067:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1068:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTaskNumber++;
1069:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1070:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
1071:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1072:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add a counter into the TCB for tracing only. */
1073:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->uxTCBNumber = uxTaskNumber;
1074:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1075:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TRACE_FACILITY */
1076:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_CREATE( pxNewTCB );
1077:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1078:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxNewTCB );
1079:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1080:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portSETUP_TCB( pxNewTCB );
1081:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1082:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
1083:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1084:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xSchedulerRunning != pdFALSE )
1085:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1086:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the created task is of a higher priority than the current task
1087:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then it should run now. */
1088:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1089:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1090:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD_IF_USING_PREEMPTION();
1091:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1092:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1093:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1094:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1095:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1096:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1097:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1098:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1099:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1100:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1101:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
1102:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1103:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1104:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1105:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1106:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
1107:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1108:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1109:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1110:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1111:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1112:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the calling task that is
1113:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being deleted. */
1114:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
1115:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccPN8tEQ.s 			page 21


1116:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready list. */
1117:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1118:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1119:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1120:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1121:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1122:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1123:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1124:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1125:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1126:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1127:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1128:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1129:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1130:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1131:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1132:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1133:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1134:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1135:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1136:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Increment the uxTaskNumber also so kernel aware debuggers can
1137:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			detect that the task lists need re-generating.  This is done before
1138:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1139:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not return. */
1140:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTaskNumber++;
1141:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1142:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1143:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1144:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task is deleting itself.  This cannot complete within the
1145:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task itself, as a context switch to another task is required.
1146:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Place the task in the termination list.  The idle task will
1147:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the termination list and free up any memory allocated by
1148:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the scheduler for the TCB and stack of the deleted task. */
1149:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
1150:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1151:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Increment the ucTasksDeleted variable so the idle task knows
1152:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				there is a task that has been deleted and that it should therefore
1153:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the xTasksWaitingTermination list. */
1154:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				++uxDeletedTasksWaitingCleanUp;
1155:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1156:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
1157:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in which Windows specific clean up operations are performed,
1158:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				after which it is not possible to yield away from this task -
1159:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
1160:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				required. */
1161:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1162:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1163:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1164:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1165:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
1166:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
1167:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1168:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
1169:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task that has just been deleted. */
1170:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
1171:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1172:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccPN8tEQ.s 			page 22


1173:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_DELETE( pxTCB );
1174:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1175:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1176:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1177:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
1178:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been deleted. */
1179:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1180:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1181:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1182:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1183:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1184:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
1185:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1186:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1187:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1188:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1189:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1190:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1191:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1192:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1193:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1194:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1196:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
1197:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1198:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
1199:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1200:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xTimeToWake;
1201:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
1202:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1203:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxPreviousWakeTime );
1204:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
1205:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
1206:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1207:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
1208:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1209:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1210:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			block. */
1211:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
1212:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1213:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
1214:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1215:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1216:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
1217:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1218:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick count has overflowed since this function was
1219:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lasted called.  In this case the only time we should ever
1220:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				actually delay is if the wake time has also	overflowed,
1221:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				and the wake time is greater than the tick time.  When this
1222:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is the case it is as if neither time had overflowed. */
1223:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1224:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1225:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
1226:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1227:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1228:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1229:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
ARM GAS  /tmp/ccPN8tEQ.s 			page 23


1230:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1231:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1232:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1233:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1234:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
1235:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				delay if either the wake time has overflowed, and/or the
1236:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				tick time is less than the wake time. */
1237:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1238:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1239:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
1240:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1241:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1242:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1243:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1244:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1245:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1246:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1247:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Update the wake time ready for the next call. */
1248:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
1249:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1250:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xShouldDelay != pdFALSE )
1251:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1252:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY_UNTIL( xTimeToWake );
1253:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1254:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* prvAddCurrentTaskToDelayedList() needs the block time, not
1255:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the time to wake, so subtract the current tick count. */
1256:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1257:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1258:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1259:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1260:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1261:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1262:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1263:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
1264:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1265:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1266:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1267:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1268:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1269:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
1270:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1271:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1272:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1273:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1274:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1275:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1276:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1277:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
1278:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1279:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1280:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1281:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1282:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
1283:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1284:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
1285:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1286:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
ARM GAS  /tmp/ccPN8tEQ.s 			page 24


1287:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
1288:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1289:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
1290:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
1291:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1292:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY();
1293:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1294:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task that is removed from the event list while the
1295:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended will not get placed in the ready
1296:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list or removed from the blocked list until the scheduler
1297:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is resumed.
1298:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1299:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				This task cannot be in an event list as it is the currently
1300:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				executing task. */
1301:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1302:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1303:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
1304:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1305:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1306:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1307:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1308:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1309:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1310:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1311:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1312:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1313:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1314:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
1315:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1316:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1317:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1318:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1319:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1320:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1321:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1322:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1323:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1324:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1325:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) )
1326:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1327:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
1328:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1329:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eReturn;
1330:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t *pxStateList;
1331:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
1332:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1333:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
1334:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1335:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1336:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1337:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task calling this function is querying its own state. */
1338:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eRunning;
1339:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1340:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1341:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1342:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1343:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  /tmp/ccPN8tEQ.s 			page 25


1344:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
1345:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1346:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1347:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1348:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
1349:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1350:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1351:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lists. */
1352:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eBlocked;
1353:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1354:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1355:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1356:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
1357:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1358:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the suspended
1359:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list.  Is it genuinely suspended or is it block
1360:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					indefinitely? */
1361:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
1362:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1363:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						eReturn = eSuspended;
1364:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1365:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1366:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1367:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						eReturn = eBlocked;
1368:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1369:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1370:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1371:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1372:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1373:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
1374:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1375:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the deleted
1376:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tasks list, or it is not referenced from any lists at
1377:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					all. */
1378:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					eReturn = eDeleted;
1379:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1380:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1381:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1382:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1383:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1384:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is not in any other state, it must be in the
1385:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Ready (including pending ready) state. */
1386:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eReady;
1387:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1388:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1389:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1390:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
1391:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1392:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1393:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1394:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1395:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1396:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1397:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1398:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
1399:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1400:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
ARM GAS  /tmp/ccPN8tEQ.s 			page 26


1401:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
1402:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1403:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1404:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1405:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the that
1406:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			called uxTaskPriorityGet() that is being queried. */
1407:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1408:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1409:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1410:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1411:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1412:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
1413:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1414:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1415:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1416:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1417:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1418:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1419:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1420:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask )
1421:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1422:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1423:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1424:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1425:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1426:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1427:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1428:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1429:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1430:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1431:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1432:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1433:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1434:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1435:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1436:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1437:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1438:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1439:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1440:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1441:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1442:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1443:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
1444:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1445:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1446:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being queried. */
1447:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1448:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1449:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1450:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1451:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1452:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
1453:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1454:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1455:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1456:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1457:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccPN8tEQ.s 			page 27


1458:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1459:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1460:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1461:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1462:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1463:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1464:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1465:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1466:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
1467:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1468:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Ensure the new priority is valid. */
1469:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1470:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1471:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1472:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1473:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1474:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1475:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1476:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1477:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1478:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1479:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1480:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1481:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being changed. */
1482:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1483:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1484:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1485:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1486:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1487:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1488:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
1489:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1490:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
1491:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1492:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1493:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1494:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1495:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1496:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
1497:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1498:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The priority change may have readied a task of higher
1499:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority than the calling task. */
1500:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
1501:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1502:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB != pxCurrentTCB )
1503:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1504:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of a task other than the currently
1505:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						running task is being raised.  Is the priority being
1506:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						raised above that of the running task? */
1507:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
1508:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1509:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xYieldRequired = pdTRUE;
1510:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1511:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
1512:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1513:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1514:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
ARM GAS  /tmp/ccPN8tEQ.s 			page 28


1515:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1516:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1517:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1518:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of the running task is being raised,
1519:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but the running task must already be the highest
1520:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority task able to run so no yield is required. */
1521:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1522:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1523:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
1524:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1525:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of the running task down means
1526:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					there may now be another task of higher priority that
1527:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is ready to execute. */
1528:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldRequired = pdTRUE;
1529:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1530:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1531:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1532:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of any other task down does not
1533:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					require a yield as the running task must be above the
1534:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new priority of the task being modified. */
1535:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1536:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1537:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remember the ready list the task might be referenced from
1538:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				before its uxPriority member is changed so the
1539:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1540:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
1541:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1542:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1543:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1544:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Only change the priority being used if the task is not
1545:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					currently using an inherited priority. */
1546:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
1547:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1548:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
1549:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1550:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1551:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1552:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1553:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1554:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1555:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The base priority gets set whatever. */
1556:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
1557:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1558:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
1559:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1560:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1561:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1562:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
1563:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1564:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only reset the event list item value if the value is not
1565:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				being used for anything else. */
1566:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
1567:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1568:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
1569:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1570:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1571:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  /tmp/ccPN8tEQ.s 			page 29


1572:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1573:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1574:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1575:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1576:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing more than change its priority variable. However, if
1577:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1578:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in the list appropriate to its new priority. */
1579:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateL
1580:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1581:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is currently in its ready list - remove before
1582:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					adding it to it's new ready list.  As we are in a critical
1583:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section we can do this even if the scheduler is suspended. */
1584:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1585:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1586:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is known that the task is in its ready list so
1587:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						there is no need to check again and the port level
1588:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						reset macro can be called directly. */
1589:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1590:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1591:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1592:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1593:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1594:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1595:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1596:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1597:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1598:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1599:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1600:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1601:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1602:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldRequired != pdFALSE )
1603:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1604:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
1605:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1606:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1607:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1608:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1609:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1610:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1611:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1612:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				optimised task selection is not being used. */
1613:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1614:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1615:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1616:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1617:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1618:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1619:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1620:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1621:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1622:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1623:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1624:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1625:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1626:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1627:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1628:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
ARM GAS  /tmp/ccPN8tEQ.s 			page 30


1629:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1630:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the running task that is
1631:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being suspended. */
1632:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
1633:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1634:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1635:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1636:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1637:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			suspended list. */
1638:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1639:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1640:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1641:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1642:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1643:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1644:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1645:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1646:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1647:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1648:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1649:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1650:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1651:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1652:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1653:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1654:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1655:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1656:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1657:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
1658:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1659:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( configUSE_TASK_NOTIFICATIONS == 1 )
1660:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1661:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
1662:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1663:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task was blocked to wait for a notification, but is
1664:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					now suspended, so no notification was received. */
1665:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1666:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1667:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1668:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1669:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1670:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1671:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1672:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1673:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1674:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Reset the next expected unblock time in case it referred to the
1675:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is now in the Suspended state. */
1676:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1677:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1678:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
1679:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1680:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1681:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1682:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1683:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1684:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1685:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/ccPN8tEQ.s 			page 31


1686:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1687:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1688:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1689:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
1690:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1691:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The current task has just been suspended. */
1692:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1693:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
1694:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1695:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1696:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1697:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1698:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1699:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be adjusted to point to a different task. */
1700:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
1701:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1702:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1703:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1704:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be set to point to it no matter what its relative priority
1705:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is. */
1706:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = NULL;
1707:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1708:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1709:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1710:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vTaskSwitchContext();
1711:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1712:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1713:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1714:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1715:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1716:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1717:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1718:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1719:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1720:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1721:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1722:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1723:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1724:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1725:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1726:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
  27              		.loc 1 1726 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
1727:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
1728:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
1729:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1730:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1731:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		section. */
1732:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1733:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1734:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTask );
  33              		.loc 1 1734 0
  34 0000 50B1     		cbz	r0, .L8
ARM GAS  /tmp/ccPN8tEQ.s 			page 32


1735:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1736:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1737:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
  35              		.loc 1 1737 0
  36 0002 4169     		ldr	r1, [r0, #20]
  37 0004 0C4A     		ldr	r2, .L9
  38 0006 9142     		cmp	r1, r2
  39 0008 0FD1     		bne	.L5
1738:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1739:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1740:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
  40              		.loc 1 1740 0
  41 000a 836A     		ldr	r3, [r0, #40]
  42 000c 0B4A     		ldr	r2, .L9+4
  43 000e 9342     		cmp	r3, r2
  44 0010 0DD0     		beq	.L6
1741:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1742:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1743:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				state, or because is is blocked with no timeout? */
1744:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The
  45              		.loc 1 1744 0
  46 0012 73B1     		cbz	r3, .L7
1727:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
  47              		.loc 1 1727 0
  48 0014 0020     		movs	r0, #0
  49              	.LVL1:
  50 0016 7047     		bx	lr
  51              	.LVL2:
  52              	.L8:
  53              	.LBB96:
  54              	.LBB97:
  55              		.file 2 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
   1:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FreeRTOS Kernel V10.0.1
   3:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
   5:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * subject to the following conditions:
  11:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  12:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * copies or substantial portions of the Software.
  14:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  15:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  22:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://www.FreeRTOS.org
  23:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://aws.amazon.com/freertos
  24:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  25:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * 1 tab == 4 spaces!
ARM GAS  /tmp/ccPN8tEQ.s 			page 33


  26:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  27:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  28:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  29:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  30:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  31:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  32:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  33:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern "C" {
  34:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  35:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  36:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  37:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  38:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  39:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  41:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  42:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  43:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  44:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  45:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  46:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  47:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR		char
  48:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT		float
  49:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE		double
  50:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG		long
  51:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT		short
  52:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE	long
  54:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  55:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef long BaseType_t;
  57:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long UBaseType_t;
  58:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  59:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint16_t TickType_t;
  61:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #else
  63:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint32_t TickType_t;
  64:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  66:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	not need to be guarded with a critical section. */
  68:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  70:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  71:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  72:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
  73:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  77:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  78:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
  79:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD() 															\
  80:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {																				\
  81:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
ARM GAS  /tmp/ccPN8tEQ.s 			page 34


  83:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 																				\
  84:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "isb" );													\
  88:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
  89:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  90:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  95:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  96:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
  97:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
  98:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
  99:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 106:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 107:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** (which build with all the ports) will build. */
 111:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 114:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 115:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 116:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 120:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 121:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 122:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 123:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 126:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 127:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 129:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Generic helper function. */
 130:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 132:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	uint8_t ucReturn;
 133:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 134:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 136:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 137:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 138:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Check the configuration. */
 139:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
ARM GAS  /tmp/ccPN8tEQ.s 			page 35


 140:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#endif
 142:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 143:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 147:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 149:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 151:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 153:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 154:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 155:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 156:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 159:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 160:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 161:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 162:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 163:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portINLINE	__inline
 164:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 165:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 166:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 168:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 170:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 171:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulCurrentInterrupt;
 172:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** BaseType_t xReturn;
 173:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 174:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 175:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 176:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 177:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 178:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 179:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdFALSE;
 180:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 181:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	else
 182:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 183:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdTRUE;
 184:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 185:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 186:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return xReturn;
 187:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 188:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 189:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 190:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 192:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 193:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulNewBASEPRI;
 194:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
  56              		.loc 2 195 0
ARM GAS  /tmp/ccPN8tEQ.s 			page 36


  57              		.syntax unified
  58              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
  59 0018 4FF01003 			mov r3, #16												
  60 001c 83F31188 		msr basepri, r3											
  61 0020 BFF36F8F 		isb														
  62 0024 BFF34F8F 		dsb														
  63              	
  64              	@ 0 "" 2
  65              	.LVL3:
  66              		.thumb
  67              		.syntax unified
  68              	.L3:
  69 0028 FEE7     		b	.L3
  70              	.L5:
  71              	.LBE97:
  72              	.LBE96:
1727:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
  73              		.loc 1 1727 0
  74 002a 0020     		movs	r0, #0
  75              	.LVL4:
  76 002c 7047     		bx	lr
  77              	.LVL5:
  78              	.L6:
  79 002e 0020     		movs	r0, #0
  80              	.LVL6:
  81 0030 7047     		bx	lr
  82              	.LVL7:
  83              	.L7:
1745:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1746:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
  84              		.loc 1 1746 0
  85 0032 0120     		movs	r0, #1
  86              	.LVL8:
1747:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1748:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1749:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1750:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1751:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1752:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1753:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1754:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1755:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1756:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1757:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1758:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1759:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1760:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1761:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1762:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1763:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
1764:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
  87              		.loc 1 1764 0
  88 0034 7047     		bx	lr
  89              	.L10:
  90 0036 00BF     		.align	2
  91              	.L9:
  92 0038 00000000 		.word	.LANCHOR0
ARM GAS  /tmp/ccPN8tEQ.s 			page 37


  93 003c 00000000 		.word	.LANCHOR1
  94              		.cfi_endproc
  95              	.LFE14:
  97              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
  98              		.align	1
  99              		.syntax unified
 100              		.thumb
 101              		.thumb_func
 102              		.fpu fpv4-sp-d16
 104              	prvResetNextTaskUnblockTime:
 105              	.LFB40:
1765:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1766:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1767:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1768:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1769:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1770:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1771:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1772:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1773:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
1774:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1775:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to resume the calling task. */
1776:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
1777:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1778:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1779:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		currently executing task. */
1780:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
1781:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1782:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1783:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1784:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1785:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1786:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_RESUME( pxTCB );
1787:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1788:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The ready list can be accessed even if the scheduler is
1789:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					suspended because this is inside a critical section. */
1790:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
1791:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1792:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1793:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A higher priority task may have just been resumed. */
1794:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1795:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1796:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1797:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but will leave the lists in the correct state for the
1798:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						next yield. */
1799:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
1800:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1801:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1802:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1803:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1804:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1805:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1806:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1807:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1808:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1809:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1810:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /tmp/ccPN8tEQ.s 			page 38


1811:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1812:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1813:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1814:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1815:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1816:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1817:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1818:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1819:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1820:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1821:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1822:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1823:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1824:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1825:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1826:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1827:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1828:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
1829:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1830:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1831:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
1832:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1833:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1834:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1835:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1836:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1837:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1838:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1839:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1840:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1841:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1842:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1843:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1844:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1845:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1846:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1847:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1848:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1849:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1850:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1851:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1852:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1853:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1854:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1855:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1856:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1857:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check the ready lists can be accessed. */
1858:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1859:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1860:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1861:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					suspended list to the ready list directly. */
1862:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1863:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1864:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldRequired = pdTRUE;
1865:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1866:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1867:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
ARM GAS  /tmp/ccPN8tEQ.s 			page 39


1868:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1869:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1870:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1871:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1872:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1873:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1874:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1875:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1876:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1877:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is held in the pending ready list until the scheduler is
1878:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unsuspended. */
1879:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
1880:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1881:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1882:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1883:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1884:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1885:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1886:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1887:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1888:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1889:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xYieldRequired;
1890:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1891:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1892:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1893:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1894:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1895:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskStartScheduler( void )
1896:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
1897:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
1898:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1899:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Add the idle task at the lowest priority. */
1900:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
1901:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1902:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1903:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
1904:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t ulIdleTaskStackSize;
1905:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1906:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is created using user provided RAM - obtain the
1907:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		address of the RAM then create the idle task. */
1908:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize
1909:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1910:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												configIDLE_TASK_NAME,
1911:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												ulIdleTaskStackSize,
1912:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
1913:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1914:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskStackBuffer,
1915:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant
1916:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1917:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIdleTaskHandle != NULL )
1918:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1919:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
1920:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1921:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1922:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1923:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
1924:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/ccPN8tEQ.s 			page 40


1925:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1926:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
1927:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1928:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is being created using dynamically allocated RAM. */
1929:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTaskCreate(	prvIdleTask,
1930:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								configIDLE_TASK_NAME,
1931:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								configMINIMAL_STACK_SIZE,
1932:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								( void * ) NULL,
1933:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1934:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explic
1935:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1936:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configSUPPORT_STATIC_ALLOCATION */
1937:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1938:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
1939:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1940:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xReturn == pdPASS )
1941:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1942:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTimerCreateTimerTask();
1943:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1944:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1945:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1946:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1947:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1948:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1949:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_TIMERS */
1950:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1951:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xReturn == pdPASS )
1952:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1953:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* freertos_tasks_c_additions_init() should only be called if the user
1954:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		definable macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is
1955:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the only macro called by the function. */
1956:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
1957:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1958:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			freertos_tasks_c_additions_init();
1959:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1960:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
1961:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1962:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
1963:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
1964:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the created tasks contain a status word with interrupts switched on
1965:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
1966:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		starts to run. */
1967:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
1968:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1969:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
1970:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1971:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
1972:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to the task that will run first. */
1973:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
1974:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1975:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
1976:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1977:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
1978:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
1979:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
1980:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1981:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
ARM GAS  /tmp/ccPN8tEQ.s 			page 41


1982:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
1983:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
1984:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is set to 0 and the following line fails to build then ensure you do not
1985:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
1986:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		FreeRTOSConfig.h file. */
1987:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
1988:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1989:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
1990:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portable interface. */
1991:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
1992:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1993:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should not reach here as if the scheduler is running the
1994:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function will not return. */
1995:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1996:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1997:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1998:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
1999:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2000:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2001:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2002:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2003:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
2004:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
2005:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		or the timer task. */
2006:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
2007:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2008:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2009:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
2010:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	meaning xIdleTaskHandle is not used anywhere else. */
2011:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) xIdleTaskHandle;
2012:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2013:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2014:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2015:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskEndScheduler( void )
2016:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2017:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
2018:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
2019:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
2020:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portDISABLE_INTERRUPTS();
2021:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xSchedulerRunning = pdFALSE;
2022:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
2023:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2024:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2025:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2026:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSuspendAll( void )
2027:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2028:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
2029:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
2030:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
2031:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	http://goo.gl/wu4acr */
2032:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	++uxSchedulerSuspended;
2033:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2034:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2035:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2036:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2037:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2038:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
ARM GAS  /tmp/ccPN8tEQ.s 			page 42


2039:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2040:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xReturn;
2041:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
2042:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2043:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxHigherPriorityReadyTasks takes care of the case where
2044:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
2045:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		task that are in the Ready state, even though the idle task is
2046:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		running. */
2047:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
2048:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2049:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > tskIDLE_PRIORITY )
2050:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2051:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2052:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2053:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2054:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
2055:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2056:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
2057:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2058:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When port optimised task selection is used the uxTopReadyPriority
2059:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			variable is used as a bit map.  If bits other than the least
2060:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			significant bit are set then there are tasks that have a priority
2061:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			above the idle priority that are in the Ready state.  This takes
2062:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			care of the case where the co-operative scheduler is in use. */
2063:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > uxLeastSignificantBit )
2064:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2065:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2066:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2067:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2068:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2069:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2070:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
2071:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2072:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2073:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2074:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
2075:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2076:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
2077:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			time slicing is used then the very next tick interrupt must be
2078:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			processed. */
2079:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2080:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2081:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( uxHigherPriorityReadyTasks != pdFALSE )
2082:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2083:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are tasks in the Ready state that have a priority above the
2084:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			idle priority.  This path can only be reached if
2085:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configUSE_PREEMPTION is 0. */
2086:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2087:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2088:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2089:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2090:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
2091:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2092:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2093:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2094:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2095:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccPN8tEQ.s 			page 43


2096:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2097:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2098:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2099:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskResumeAll( void )
2100:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2101:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
2102:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
2103:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2104:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
2105:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	previous call to vTaskSuspendAll(). */
2106:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended );
2107:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2108:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
2109:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
2110:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
2111:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
2112:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks from this list into their appropriate ready list. */
2113:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
2114:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2115:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		--uxSchedulerSuspended;
2116:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2117:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2118:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2119:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
2120:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2121:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Move any readied tasks from the pending list into the
2122:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				appropriate ready list. */
2123:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
2124:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2125:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
2126:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2127:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2128:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2129:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2130:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the moved task has a priority higher than the current
2131:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					task then a yield must be performed. */
2132:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2133:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2134:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
2135:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2136:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2137:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2138:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2139:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2140:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2141:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2142:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
2143:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2144:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task was unblocked while the scheduler was suspended,
2145:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					which may have prevented the next unblock time from being
2146:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					re-calculated, in which case re-calculate it now.  Mainly
2147:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					important for low power tickless implementations, where
2148:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this can prevent an unnecessary exit from low power
2149:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					state. */
2150:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
2151:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2152:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccPN8tEQ.s 			page 44


2153:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
2154:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				they should be processed now.  This ensures the tick count does
2155:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
2156:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				time. */
2157:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2158:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
2159:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2160:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxPendedCounts > ( UBaseType_t ) 0U )
2161:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2162:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						do
2163:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2164:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( xTaskIncrementTick() != pdFALSE )
2165:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2166:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								xYieldPending = pdTRUE;
2167:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2168:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							else
2169:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2170:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2171:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2172:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							--uxPendedCounts;
2173:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						} while( uxPendedCounts > ( UBaseType_t ) 0U );
2174:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2175:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						uxPendedTicks = 0;
2176:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2177:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2178:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2179:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2180:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2181:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2182:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2183:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldPending != pdFALSE )
2184:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2185:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
2186:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2187:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xAlreadyYielded = pdTRUE;
2188:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2189:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif
2190:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
2191:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2192:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2193:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2194:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2196:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2197:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2198:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2199:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2200:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2201:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2202:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2203:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
2204:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2205:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xAlreadyYielded;
2206:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2207:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2208:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2209:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCount( void )
ARM GAS  /tmp/ccPN8tEQ.s 			page 45


2210:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2211:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTicks;
2212:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2213:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
2214:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
2215:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2216:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTicks = xTickCount;
2217:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2218:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
2219:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2220:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xTicks;
2221:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2222:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2223:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2224:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2225:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2226:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xReturn;
2227:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxSavedInterruptStatus;
2228:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2229:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
2230:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
2231:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
2232:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
2233:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2234:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2235:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
2236:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	assigned a priority above the configured maximum system call priority.
2237:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
2238:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
2239:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
2240:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
2241:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
2242:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
2243:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
2244:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2245:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
2246:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2247:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTickCount;
2248:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2249:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2250:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2251:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
2252:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2253:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2254:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2255:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2256:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2257:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
2258:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t. */
2259:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxCurrentNumberOfTasks;
2260:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2261:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2262:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2263:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed fo
2264:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2265:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
2266:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccPN8tEQ.s 			page 46


2267:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If null is passed in here then the name of the calling task is being
2268:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queried. */
2269:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
2270:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
2271:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
2272:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2273:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2274:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2275:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2276:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2277:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
2278:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2279:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
2280:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t x;
2281:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cNextChar;
2282:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2283:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function is called with the scheduler suspended. */
2284:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2285:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2286:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2287:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
2288:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2289:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2290:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2291:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
2292:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2293:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check each character in the name looking for a match or
2294:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mismatch. */
2295:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2296:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2297:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					cNextChar = pxNextTCB->pcTaskName[ x ];
2298:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2299:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( cNextChar != pcNameToQuery[ x ] )
2300:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2301:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Characters didn't match. */
2302:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
2303:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2304:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else if( cNextChar == 0x00 )
2305:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2306:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Both strings terminated, a match must have been
2307:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						found. */
2308:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxReturn = pxNextTCB;
2309:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
2310:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2311:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2312:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2313:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2314:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2315:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2316:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2317:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxReturn != NULL )
2318:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2319:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The handle has been found. */
2320:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2321:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2322:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2323:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
ARM GAS  /tmp/ccPN8tEQ.s 			page 47


2324:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2325:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2326:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2327:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2328:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2329:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2330:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxReturn;
2331:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2332:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2333:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2334:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2335:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2336:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2337:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2338:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are a
2339:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2340:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
2341:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t* pxTCB;
2342:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2343:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2344:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2345:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2346:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2347:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2348:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the ready lists. */
2349:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2350:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2351:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxQueue--;
2352:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNam
2353:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2354:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
2355:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2356:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Found the handle. */
2357:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2358:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2359:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2360:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts
2361:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2362:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the delayed lists. */
2363:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2364:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2365:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
2366:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2367:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2368:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2369:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2370:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery
2371:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2372:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2373:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
2374:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2375:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2376:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2377:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the suspended list. */
2378:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
2379:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2380:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /tmp/ccPN8tEQ.s 			page 48


2381:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2382:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2383:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
2384:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2385:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2386:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2387:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the deleted list. */
2388:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
2389:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2390:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2391:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2392:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2393:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2394:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2395:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ( TaskHandle_t ) pxTCB;
2396:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2397:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2398:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2399:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2400:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2401:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2402:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2403:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
2404:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2405:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
2406:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2407:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2408:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2409:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is there a space in the array for each task in the system? */
2410:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
2411:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2412:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2413:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Ready state. */
2414:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				do
2415:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2416:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxQueue--;
2417:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
2418:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2419:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
2420:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2421:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2422:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Blocked state. */
2423:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelaye
2424:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
2425:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2426:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
2427:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2428:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2429:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
2430:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermin
2431:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2432:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2433:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2434:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2435:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2436:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2437:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task in the Suspended state. */
ARM GAS  /tmp/ccPN8tEQ.s 			page 49


2438:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList,
2439:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2440:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2441:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2442:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
2443:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2444:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2445:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2446:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2447:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2448:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
2449:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2450:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
2451:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2452:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2453:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
2454:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2455:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2456:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2457:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pulTotalRunTime = 0;
2458:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2459:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2460:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2461:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2462:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2463:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2464:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2465:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2466:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2467:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2468:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2469:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
2470:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2471:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2472:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2473:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2474:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2475:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2476:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2477:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
2478:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2479:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2480:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
2481:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
2482:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xIdleTaskHandle;
2483:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2484:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2485:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2486:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2487:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2488:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2489:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
2490:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2491:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 1. */
2492:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2493:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2494:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
ARM GAS  /tmp/ccPN8tEQ.s 			page 50


2495:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2496:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Correct the tick count value after a period during which the tick
2497:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
2498:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		each stepped tick. */
2499:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2500:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount += xTicksToJump;
2501:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
2502:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2503:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2504:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2505:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2506:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2507:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2508:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2509:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2510:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2511:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB = ( TCB_t * ) xTask;
2512:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2513:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2514:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
2515:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2516:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2517:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2518:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only be prematurely removed from the Blocked state if
2519:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			it is actually in the Blocked state. */
2520:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( eTaskGetState( xTask ) == eBlocked )
2521:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2522:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
2523:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2524:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove the reference to the task from the blocked list.  An
2525:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				interrupt won't touch the xStateListItem because the
2526:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended. */
2527:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2528:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2529:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is the task waiting on an event also?  If so remove it from
2530:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the event list too.  Interrupts can touch the event list item,
2531:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				even though the scheduler is suspended, so a critical section
2532:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
2533:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskENTER_CRITICAL();
2534:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2535:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2536:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2537:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2538:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
2539:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2540:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2541:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2542:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2543:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2544:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2545:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskEXIT_CRITICAL();
2546:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2547:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Place the unblocked task into the appropriate ready list. */
2548:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
2549:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2550:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task being unblocked cannot cause an immediate context
2551:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch if preemption is turned off. */
ARM GAS  /tmp/ccPN8tEQ.s 			page 51


2552:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if (  configUSE_PREEMPTION == 1 )
2553:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2554:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Preemption is on, but a context switch should only be
2555:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					performed if the unblocked task has a priority that is
2556:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					equal to or higher than the currently executing task. */
2557:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2558:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2559:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Pend the yield to be performed when the scheduler
2560:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						is unsuspended. */
2561:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
2562:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2563:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2564:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2565:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2566:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2567:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2568:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* configUSE_PREEMPTION */
2569:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2570:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2571:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2572:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
2573:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2574:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2575:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2576:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2577:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2578:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2579:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2580:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2581:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2582:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2583:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskIncrementTick( void )
2584:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2585:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
2586:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xItemValue;
2587:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
2588:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2589:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
2590:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
2591:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks to be unblocked. */
2592:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
2593:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2594:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2595:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this
2596:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		block. */
2597:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
2598:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2599:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
2600:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		delayed lists if it wraps to 0. */
2601:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = xConstTickCount;
2602:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2603:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as
2604:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2605:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskSWITCH_DELAYED_LISTS();
2606:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2607:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2608:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/ccPN8tEQ.s 			page 52


2609:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2610:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2611:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2612:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if this tick has made a timeout expire.  Tasks are stored in
2613:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	queue in the order of their wake time - meaning once one task
2614:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		has been found whose block time has not expired there is no need to
2615:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		look any further down the list. */
2616:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount >= xNextTaskUnblockTime )
2617:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2618:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( ;; )
2619:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2620:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
2621:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2622:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is empty.  Set xNextTaskUnblockTime
2623:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					to the maximum possible value so it is extremely
2624:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unlikely that the
2625:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xTickCount >= xNextTaskUnblockTime ) test will pass
2626:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					next time through. */
2627:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redun
2628:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2629:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2630:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2631:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2632:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is not empty, get the value of the
2633:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					item at the head of the delayed list.  This is the time
2634:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					at which the task at the head of the delayed list must
2635:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be removed from the Blocked state. */
2636:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
2637:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
2638:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2639:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xConstTickCount < xItemValue )
2640:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2641:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is not time to unblock this item yet, but the
2642:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						item value is the time at which the task at the head
2643:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						of the blocked list must be removed from the Blocked
2644:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						state -	so record the item value in
2645:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime. */
2646:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime = xItemValue;
2647:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
2648:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2649:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2650:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2651:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2652:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2653:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2654:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* It is time to remove the item from the Blocked state. */
2655:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2656:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2657:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Is the task waiting on an event also?  If so remove
2658:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it from the event list. */
2659:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2660:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2661:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2662:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2663:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2664:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2665:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
ARM GAS  /tmp/ccPN8tEQ.s 			page 53


2666:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2667:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2668:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Place the unblocked task into the appropriate ready
2669:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list. */
2670:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2671:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2672:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task being unblocked cannot cause an immediate
2673:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					context switch if preemption is turned off. */
2674:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if (  configUSE_PREEMPTION == 1 )
2675:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2676:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Preemption is on, but a context switch should
2677:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						only be performed if the unblocked task has a
2678:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority that is equal to or higher than the
2679:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						currently executing task. */
2680:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2681:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2682:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xSwitchRequired = pdTRUE;
2683:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2684:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
2685:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2686:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2687:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2688:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2689:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif /* configUSE_PREEMPTION */
2690:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2691:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2692:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2693:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2694:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2695:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		processing time (time slice) if preemption is on, and the application
2696:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		writer has not explicitly turned time slicing off. */
2697:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2698:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2699:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
2700:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2701:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xSwitchRequired = pdTRUE;
2702:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2703:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2704:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2705:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2706:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2707:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2708:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2709:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2710:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2711:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2712:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
2713:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2714:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxPendedTicks == ( UBaseType_t ) 0U )
2715:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2716:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vApplicationTickHook();
2717:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2718:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2719:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2720:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2721:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2722:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/ccPN8tEQ.s 			page 54


2723:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2724:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2725:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2726:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2727:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		++uxPendedTicks;
2728:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2729:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2730:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		scheduler is locked. */
2731:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2732:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2733:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationTickHook();
2734:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2735:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2736:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2737:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2738:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_PREEMPTION == 1 )
2739:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2740:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xYieldPending != pdFALSE )
2741:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2742:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xSwitchRequired = pdTRUE;
2743:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2744:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2745:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2746:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2747:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2748:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2749:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_PREEMPTION */
2750:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2751:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xSwitchRequired;
2752:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2753:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2754:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2755:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2756:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2757:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2758:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2759:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2760:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2761:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2762:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		getting set. */
2763:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2764:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2765:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2766:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2767:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2768:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2769:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2770:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2771:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2772:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2773:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2774:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2775:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2776:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2777:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2778:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2779:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
ARM GAS  /tmp/ccPN8tEQ.s 			page 55


2780:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2781:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2782:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2783:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2784:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2785:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2786:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2787:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xReturn;
2788:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2789:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are setting our own task hook. */
2790:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2791:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2792:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2793:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2794:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2795:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2796:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2797:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2798:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2799:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2800:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2801:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2802:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2803:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag;
2804:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2805:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2806:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2807:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2808:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2809:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2810:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2811:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2812:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2813:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2814:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2815:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2816:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2817:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2818:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2819:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2820:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2821:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2822:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2823:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2824:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2825:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2826:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2827:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2828:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2829:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2830:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2831:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2832:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2833:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2834:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2835:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2836:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
ARM GAS  /tmp/ccPN8tEQ.s 			page 56


2837:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2838:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2839:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2840:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2841:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2842:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2843:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2844:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2845:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSwitchContext( void )
2846:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2847:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
2848:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2849:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2850:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		switch. */
2851:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
2852:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2853:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2854:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2855:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdFALSE;
2856:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
2857:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2858:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
2859:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2860:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2861:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
2862:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
2863:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2864:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2865:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2866:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Add the amount of time the task has been running to the
2867:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				accumulated time so far.  The time the task started running was
2868:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				stored in ulTaskSwitchedInTime.  Note that there is no overflow
2869:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				protection here so count values are only valid until the timer
2870:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				overflows.  The guard against negative values is to protect
2871:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				against suspect run time stat counter implementations - which
2872:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				are provided by the application, not the kernel. */
2873:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ulTotalRunTime > ulTaskSwitchedInTime )
2874:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2875:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
2876:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2877:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2878:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2879:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2880:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2881:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				ulTaskSwitchedInTime = ulTotalRunTime;
2882:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2883:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
2884:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2885:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check for stack overflow, if configured. */
2886:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
2887:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2888:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Select a new task to run using either the generic C or port
2889:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		optimised asm code. */
2890:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK();
2891:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
2892:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2893:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
ARM GAS  /tmp/ccPN8tEQ.s 			page 57


2894:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2895:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2896:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to this task. */
2897:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2898:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2899:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2900:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2901:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2902:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2903:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2904:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
2905:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2906:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
2907:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2908:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
2909:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
2910:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2911:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
2912:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This is placed in the list in priority order so the highest priority task
2913:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
2914:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
2915:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2916:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2917:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
2918:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2919:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2920:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2921:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
2922:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2923:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
2924:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2925:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2926:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event groups implementation. */
2927:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
2928:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2929:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
2930:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event list item here as interrupts won't access the event list item of a
2931:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	task that is not in the Blocked state. */
2932:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
2933:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2934:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
2935:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
2936:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event group implementation - and interrupts don't access event groups
2937:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
2938:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the task level). */
2939:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2940:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2941:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
2942:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2943:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2944:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2945:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TIMERS == 1 )
2946:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2947:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const B
2948:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2949:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxEventList );
2950:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccPN8tEQ.s 			page 58


2951:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function should not be called by application code hence the
2952:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
2953:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
2954:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should be called with the scheduler suspended. */
2955:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2956:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2957:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
2958:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		In this case it is assume that this is the only task that is going to
2959:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
2960:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		can be used in place of vListInsert. */
2961:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2962:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2963:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the task should block indefinitely then set the block time to a
2964:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value that will be recognised as an indefinite delay inside the
2965:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList() function. */
2966:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xWaitIndefinitely != pdFALSE )
2967:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2968:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTicksToWait = portMAX_DELAY;
2969:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2970:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2971:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
2972:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
2973:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2974:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2975:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TIMERS */
2976:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2977:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2978:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
2979:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2980:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
2981:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
2982:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2983:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
2984:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	called from a critical section within an ISR. */
2985:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2986:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
2987:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
2988:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the delayed list, and add it to the ready list.
2989:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2990:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	If an event is for a queue that is locked then this function will never
2991:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
2992:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	means exclusive access to the event list is guaranteed here.
2993:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2994:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This function assumes that a check has already been made to ensure that
2995:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxEventList is not empty. */
2996:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
2997:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
2998:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
2999:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3000:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3001:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3002:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3003:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
3004:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3005:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3006:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3007:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
ARM GAS  /tmp/ccPN8tEQ.s 			page 59


3008:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pending until the scheduler is resumed. */
3009:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
3010:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3011:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3012:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3013:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3014:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return true if the task removed from the event list has a higher
3015:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
3016:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should force a context switch now. */
3017:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdTRUE;
3018:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3019:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
3020:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
3021:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
3022:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3023:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3024:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3025:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdFALSE;
3026:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3027:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3028:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TICKLESS_IDLE != 0 )
3029:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3030:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
3031:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		might be set to the blocked task's time out time.  If the task is
3032:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		unblocked for a reason other than a timeout xNextTaskUnblockTime is
3033:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		normally left unchanged, because it is automatically reset to a new
3034:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value when the tick count equals xNextTaskUnblockTime.  However if
3035:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		tickless idling is used it might be more important to enter sleep mode
3036:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		at the earliest possible time - so reset xNextTaskUnblockTime here to
3037:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		ensure it is updated at the earliest possible time. */
3038:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvResetNextTaskUnblockTime();
3039:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3040:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
3041:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3042:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
3043:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3044:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3045:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3046:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
3047:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3048:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
3049:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3050:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3051:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event flags implementation. */
3052:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
3053:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3054:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the new item value in the event list. */
3055:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
3056:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3057:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
3058:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event flags. */
3059:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
3060:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
3061:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
3062:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3063:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
3064:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
ARM GAS  /tmp/ccPN8tEQ.s 			page 60


3065:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	lists. */
3066:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3067:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
3068:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3069:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3070:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3071:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The unblocked task has a priority above that of the calling task, so
3072:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		a context switch is required.  This function is called with the
3073:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		scheduler suspended so xYieldPending is set so the context switch
3074:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		occurs immediately that the scheduler is resumed (unsuspended). */
3075:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
3076:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3077:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3078:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3079:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3080:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3081:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3082:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
3083:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
3084:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3085:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xOverflowCount = xNumOfOverflows;
3086:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
3087:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3088:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
3089:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3090:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3091:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3092:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
3093:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3094:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* For internal use only as it does not use a critical section. */
3095:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
3096:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
3097:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3098:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3099:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3100:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
3101:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3102:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
3103:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3104:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
3105:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
3106:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3107:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
3108:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3109:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
3110:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
3111:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
3112:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3113:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( INCLUDE_xTaskAbortDelay == 1 )
3114:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucDelayAborted != pdFALSE )
3115:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3116:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The delay was aborted, which is not the same as a time out,
3117:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				but has the same result. */
3118:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucDelayAborted = pdFALSE;
3119:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
3120:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3121:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
ARM GAS  /tmp/ccPN8tEQ.s 			page 61


3122:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3123:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3124:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3125:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
3126:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3127:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
3128:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				specified is the maximum block time then the task should block
3129:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				indefinitely, and therefore never time out. */
3130:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
3131:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3132:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3133:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3134:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3135:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
3136:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3137:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The tick count is greater than the time at which
3138:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeout() was called, but has also overflowed since
3139:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOut() was called.  It must have wrapped all the way
3140:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			around and gone past again. This passed since vTaskSetTimeout()
3141:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			was called. */
3142:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
3143:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3144:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with som
3145:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3146:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
3147:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait -= xElapsedTime;
3148:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
3149:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
3150:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3151:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3152:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3153:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait = 0;
3154:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
3155:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3156:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3157:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
3158:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3159:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
3160:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3161:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3162:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3163:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskMissedYield( void )
3164:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3165:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
3166:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3167:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3168:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3169:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3170:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3171:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3172:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3173:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3174:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3175:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3176:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
3177:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3178:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
ARM GAS  /tmp/ccPN8tEQ.s 			page 62


3179:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
3180:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3181:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3182:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3183:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = 0U;
3184:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3185:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3186:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3187:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3188:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3189:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3190:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3191:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3192:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3193:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3194:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
3195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3196:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3197:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3198:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
3199:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3200:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
3201:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
3202:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3203:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3204:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3205:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3206:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3207:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
3208:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * -----------------------------------------------------------
3209:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The Idle task.
3210:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * ----------------------------------------------------------
3211:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3212:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3213:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3214:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3215:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
3216:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3217:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
3218:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3219:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3220:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
3221:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) pvParameters;
3222:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3223:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3224:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER IS STARTED. **/
3225:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3226:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* In case a task that has a secure context deletes itself, in which case
3227:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the idle task is responsible for deleting the task's secure context, if
3228:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	any. */
3229:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTASK_CALLS_SECURE_FUNCTIONS();
3230:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3231:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( ;; )
3232:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3233:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if any tasks have deleted themselves - if so then the idle task
3234:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is responsible for freeing the deleted task's TCB and stack. */
3235:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvCheckTasksWaitingTermination();
ARM GAS  /tmp/ccPN8tEQ.s 			page 63


3236:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3237:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
3238:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3239:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
3240:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			see if any other task has become available.  If we are using
3241:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			preemption we don't need to do this as any task becoming available
3242:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			will automatically get the processor anyway. */
3243:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD();
3244:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3245:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
3246:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3247:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3248:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3249:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When using preemption tasks of equal priority will be
3250:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
3251:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			to run then the idle task should yield before the end of the
3252:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timeslice.
3253:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3254:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			A critical region is not required here as we are just reading from
3255:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
3256:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the ready list at the idle priority contains more than one task
3257:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then a task other than the idle task is ready to execute. */
3258:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
3259:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3260:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskYIELD();
3261:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3262:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3263:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3264:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3265:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3266:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3267:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3268:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3269:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
3270:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3271:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			extern void vApplicationIdleHook( void );
3272:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3273:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Call the user defined function from within the idle task.  This
3274:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allows the application designer to add background functionality
3275:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			without the overhead of a separate task.
3276:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3277:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
3278:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationIdleHook();
3279:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3280:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
3281:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3282:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
3283:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3284:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		user defined low power mode	implementations require
3285:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3286:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
3287:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3288:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TickType_t xExpectedIdleTime;
3289:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3290:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
3291:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
3292:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			test of the expected idle time is performed without the
ARM GAS  /tmp/ccPN8tEQ.s 			page 64


3293:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			scheduler suspended.  The result here is not necessarily
3294:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			valid. */
3295:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
3296:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3297:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3298:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3299:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskSuspendAll();
3300:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3301:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
3302:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					time can be sampled again, and this time its value can
3303:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be used. */
3304:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
3305:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
3306:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3307:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Define the following macro to set xExpectedIdleTime to 0
3308:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if the application does not want
3309:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
3310:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );
3311:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3312:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3313:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3314:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
3315:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3316:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_END();
3317:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3318:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3319:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3320:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3321:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3322:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3323:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) xTaskResumeAll();
3324:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3325:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3326:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3327:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3328:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3329:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3330:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
3331:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3332:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3333:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3334:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3335:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
3336:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3337:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3338:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3339:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
3340:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
3341:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
3342:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3343:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3344:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3345:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
3346:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3347:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3348:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( xYieldPending != pdFALSE )
3349:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/ccPN8tEQ.s 			page 65


3350:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
3351:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3352:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3353:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3354:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3355:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
3356:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			have an infinite block time rather than actually being suspended)
3357:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
3358:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupts. */
3359:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
3360:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3361:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
3362:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3363:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3364:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3365:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3366:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3367:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3368:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3369:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
3370:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3371:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3372:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3373:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3374:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3375:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3376:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3377:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
3378:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3379:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3380:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3381:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3382:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3383:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
3384:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3385:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3386:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3387:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3388:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3389:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3390:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3391:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3392:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3393:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
3394:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3395:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvReturn = NULL;
3396:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3397:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3398:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3399:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3400:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3401:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3402:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3403:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3404:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3405:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = NULL;
3406:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/ccPN8tEQ.s 			page 66


3407:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3408:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pvReturn;
3409:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3410:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3411:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3412:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3413:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3414:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3415:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3416:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
3417:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3418:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3419:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3420:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
3421:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the calling task. */
3422:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
3423:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3424:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3425:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3426:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3427:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3428:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3429:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3430:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void )
3431:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3432:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxPriority;
3433:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3434:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
3435:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3436:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
3437:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3438:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3439:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
3440:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
3441:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
3442:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3443:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3444:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3445:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
3446:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3447:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3448:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3449:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3450:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3451:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
3452:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3453:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
3454:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3455:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3456:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	using list2. */
3457:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
3458:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
3459:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3460:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3461:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3462:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3463:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
ARM GAS  /tmp/ccPN8tEQ.s 			page 67


3464:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3465:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3466:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3467:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3468:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3469:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TCB_t *pxTCB;
3470:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3471:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
3472:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		being called too often in the idle task. */
3473:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
3474:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3475:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
3476:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3477:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
3478:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
3479:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
3480:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
3481:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3482:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
3483:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3484:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvDeleteTCB( pxTCB );
3485:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3486:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3487:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3488:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3489:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3490:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3491:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TRACE_FACILITY == 1 )
3492:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3493:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, 
3494:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3495:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3496:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3497:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* xTask is NULL then get the state of the calling task. */
3498:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3499:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3500:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
3501:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
3502:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
3503:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
3504:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
3505:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3506:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_MUTEXES == 1 )
3507:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3508:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
3509:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3510:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3511:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3512:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = 0;
3513:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3514:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3515:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3516:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3517:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3518:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3519:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3520:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
ARM GAS  /tmp/ccPN8tEQ.s 			page 68


3521:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3522:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = 0;
3523:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3524:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3525:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3526:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the task state is a little fiddly, so is only done if the
3527:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value of eState passed into this function is eInvalid - otherwise the
3528:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		state is just set to whatever is passed in. */
3529:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( eState != eInvalid )
3530:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3531:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
3532:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3533:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->eCurrentState = eRunning;
3534:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3535:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3536:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3537:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->eCurrentState = eState;
3538:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3539:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
3540:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3541:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the task is in the suspended list then there is a
3542:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					chance it is actually just blocked indefinitely - so really
3543:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it should be reported as being in the Blocked state. */
3544:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( eState == eSuspended )
3545:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3546:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						vTaskSuspendAll();
3547:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
3548:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
3549:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
3550:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								pxTaskStatus->eCurrentState = eBlocked;
3551:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
3552:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
3553:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) xTaskResumeAll();
3554:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3555:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3556:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* INCLUDE_vTaskSuspend */
3557:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3558:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3559:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3560:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3561:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
3562:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3563:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3564:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3565:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		parameter is provided to allow it to be skipped. */
3566:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xGetFreeStackSpace != pdFALSE )
3567:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3568:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
3569:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3570:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfSt
3571:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3572:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
3573:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3574:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack )
3575:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3576:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
3577:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/ccPN8tEQ.s 			page 69


3578:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3579:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3580:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->usStackHighWaterMark = 0;
3581:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3582:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3583:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3584:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3585:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3586:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3587:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3588:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3589:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
3590:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3591:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
3592:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0;
3593:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3594:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
3595:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3596:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
3597:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3598:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3599:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3600:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3601:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3602:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
3603:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3604:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
3605:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
3606:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask++;
3607:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
3608:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3609:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3610:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3611:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3612:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3613:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3614:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
3615:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3616:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3617:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3618:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3619:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3620:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
3621:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3622:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3623:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3624:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulCount = 0U;
3625:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3626:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
3627:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3628:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
3629:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulCount++;
3630:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3631:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3632:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
3633:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3634:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ( uint16_t ) ulCount;
ARM GAS  /tmp/ccPN8tEQ.s 			page 70


3635:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3636:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3637:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) */
3638:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3639:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3640:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3641:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3642:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3643:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3644:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3645:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t *pucEndOfStack;
3646:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3647:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3648:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3649:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3650:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3651:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3652:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3653:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3654:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3655:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3656:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3657:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3658:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3659:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3660:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
3661:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3662:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3663:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3664:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3665:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3666:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3667:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3668:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3669:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3670:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3671:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3672:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3673:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3674:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		want to allocate and clean RAM statically. */
3675:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3676:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3677:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3678:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to the task to free any memory allocated at the application level. */
3679:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3680:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3681:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3682:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3683:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3684:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3685:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( p
3686:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3687:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task can only have been allocated dynamically - free both
3688:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the stack and TCB. */
3689:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB->pxStack );
3690:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB );
3691:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/ccPN8tEQ.s 			page 71


3692:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated 
3693:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3694:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task could have been allocated statically or dynamically, so
3695:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			check what was statically allocated before trying to free the
3696:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			memory. */
3697:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
3698:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3699:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Both the stack and TCB were allocated dynamically, so both
3700:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be freed. */
3701:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB->pxStack );
3702:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3703:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3704:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3705:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3706:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only the stack was statically allocated, so the TCB is the
3707:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				only memory that must be freed. */
3708:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3709:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3710:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3711:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3712:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Neither the stack nor the TCB were allocated dynamically, so
3713:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing needs to be freed. */
3714:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
3715:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3716:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3717:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3718:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3719:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3720:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3721:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3722:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3723:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3724:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3725:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 106              		.loc 1 3725 0
 107              		.cfi_startproc
 108              		@ args = 0, pretend = 0, frame = 0
 109              		@ frame_needed = 0, uses_anonymous_args = 0
 110              		@ link register save eliminated.
3726:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
3727:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3728:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 111              		.loc 1 3728 0
 112 0000 084B     		ldr	r3, .L15
 113 0002 1B68     		ldr	r3, [r3]
 114 0004 1B68     		ldr	r3, [r3]
 115 0006 3BB1     		cbz	r3, .L14
3729:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3730:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3731:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3732:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3733:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		there is an item in the delayed list. */
3734:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
3735:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3736:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3737:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3738:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is not empty, get the value of
ARM GAS  /tmp/ccPN8tEQ.s 			page 72


3739:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3740:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		which the task at the head of the delayed list should be removed
3741:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from the Blocked state. */
3742:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 116              		.loc 1 3742 0
 117 0008 064B     		ldr	r3, .L15
 118 000a 1B68     		ldr	r3, [r3]
 119 000c DB68     		ldr	r3, [r3, #12]
 120 000e DB68     		ldr	r3, [r3, #12]
 121              	.LVL9:
3743:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 122              		.loc 1 3743 0
 123 0010 5A68     		ldr	r2, [r3, #4]
 124 0012 054B     		ldr	r3, .L15+4
 125              	.LVL10:
 126 0014 1A60     		str	r2, [r3]
3744:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3745:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 127              		.loc 1 3745 0
 128 0016 7047     		bx	lr
 129              	.L14:
3734:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 130              		.loc 1 3734 0
 131 0018 034B     		ldr	r3, .L15+4
 132 001a 4FF0FF32 		mov	r2, #-1
 133 001e 1A60     		str	r2, [r3]
 134 0020 7047     		bx	lr
 135              	.L16:
 136 0022 00BF     		.align	2
 137              	.L15:
 138 0024 00000000 		.word	.LANCHOR2
 139 0028 00000000 		.word	.LANCHOR3
 140              		.cfi_endproc
 141              	.LFE40:
 143              		.section	.text.prvDeleteTCB,"ax",%progbits
 144              		.align	1
 145              		.syntax unified
 146              		.thumb
 147              		.thumb_func
 148              		.fpu fpv4-sp-d16
 150              	prvDeleteTCB:
 151              	.LFB39:
3671:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
 152              		.loc 1 3671 0
 153              		.cfi_startproc
 154              		@ args = 0, pretend = 0, frame = 0
 155              		@ frame_needed = 0, uses_anonymous_args = 0
 156              	.LVL11:
 157 0000 10B5     		push	{r4, lr}
 158              	.LCFI0:
 159              		.cfi_def_cfa_offset 8
 160              		.cfi_offset 4, -8
 161              		.cfi_offset 14, -4
 162 0002 0446     		mov	r4, r0
3689:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB );
 163              		.loc 1 3689 0
 164 0004 006B     		ldr	r0, [r0, #48]
ARM GAS  /tmp/ccPN8tEQ.s 			page 73


 165              	.LVL12:
 166 0006 FFF7FEFF 		bl	vPortFree
 167              	.LVL13:
3690:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 168              		.loc 1 3690 0
 169 000a 2046     		mov	r0, r4
 170 000c FFF7FEFF 		bl	vPortFree
 171              	.LVL14:
3719:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 172              		.loc 1 3719 0
 173 0010 10BD     		pop	{r4, pc}
 174              		.cfi_endproc
 175              	.LFE39:
 177              		.section	.text.prvInitialiseNewTask,"ax",%progbits
 178              		.align	1
 179              		.syntax unified
 180              		.thumb
 181              		.thumb_func
 182              		.fpu fpv4-sp-d16
 184              	prvInitialiseNewTask:
 185              	.LFB6:
 825:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** StackType_t *pxTopOfStack;
 186              		.loc 1 825 0
 187              		.cfi_startproc
 188              		@ args = 16, pretend = 0, frame = 0
 189              		@ frame_needed = 0, uses_anonymous_args = 0
 190              	.LVL15:
 191 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 192              	.LCFI1:
 193              		.cfi_def_cfa_offset 32
 194              		.cfi_offset 4, -32
 195              		.cfi_offset 5, -28
 196              		.cfi_offset 6, -24
 197              		.cfi_offset 7, -20
 198              		.cfi_offset 8, -16
 199              		.cfi_offset 9, -12
 200              		.cfi_offset 10, -8
 201              		.cfi_offset 14, -4
 202 0004 8046     		mov	r8, r0
 203 0006 9946     		mov	r9, r3
 204 0008 089D     		ldr	r5, [sp, #32]
 205 000a 099F     		ldr	r7, [sp, #36]
 206 000c 0A9C     		ldr	r4, [sp, #40]
 857:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 207              		.loc 1 857 0
 208 000e 266B     		ldr	r6, [r4, #48]
 209 0010 02F18042 		add	r2, r2, #1073741824
 210              	.LVL16:
 211 0014 013A     		subs	r2, r2, #1
 212              	.LVL17:
 213 0016 06EB8206 		add	r6, r6, r2, lsl #2
 214              	.LVL18:
 858:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 215              		.loc 1 858 0
 216 001a 26F00706 		bic	r6, r6, #7
 217              	.LVL19:
 885:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  /tmp/ccPN8tEQ.s 			page 74


 218              		.loc 1 885 0
 219 001e 0023     		movs	r3, #0
 220              	.LVL20:
 221              	.L20:
 885:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 222              		.loc 1 885 0 is_stmt 0 discriminator 1
 223 0020 0F2B     		cmp	r3, #15
 224 0022 07D8     		bhi	.L21
 887:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 225              		.loc 1 887 0 is_stmt 1
 226 0024 C85C     		ldrb	r0, [r1, r3]	@ zero_extendqisi2
 227 0026 E218     		adds	r2, r4, r3
 228 0028 82F83400 		strb	r0, [r2, #52]
 892:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 229              		.loc 1 892 0
 230 002c CA5C     		ldrb	r2, [r1, r3]	@ zero_extendqisi2
 231 002e 0AB1     		cbz	r2, .L21
 885:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 232              		.loc 1 885 0 discriminator 2
 233 0030 0133     		adds	r3, r3, #1
 234              	.LVL21:
 235 0032 F5E7     		b	.L20
 236              	.L21:
 904:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 237              		.loc 1 904 0
 238 0034 0023     		movs	r3, #0
 239              	.LVL22:
 240 0036 84F84330 		strb	r3, [r4, #67]
 908:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 241              		.loc 1 908 0
 242 003a 062D     		cmp	r5, #6
 243 003c 00D9     		bls	.L23
 910:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 244              		.loc 1 910 0
 245 003e 0625     		movs	r5, #6
 246              	.L23:
 247              	.LVL23:
 917:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 248              		.loc 1 917 0
 249 0040 E562     		str	r5, [r4, #44]
 920:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 250              		.loc 1 920 0
 251 0042 6564     		str	r5, [r4, #68]
 921:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 252              		.loc 1 921 0
 253 0044 4FF0000A 		mov	r10, #0
 254 0048 C4F848A0 		str	r10, [r4, #72]
 925:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 255              		.loc 1 925 0
 256 004c 201D     		adds	r0, r4, #4
 257 004e FFF7FEFF 		bl	vListInitialiseItem
 258              	.LVL24:
 926:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 259              		.loc 1 926 0
 260 0052 04F11800 		add	r0, r4, #24
 261 0056 FFF7FEFF 		bl	vListInitialiseItem
 262              	.LVL25:
ARM GAS  /tmp/ccPN8tEQ.s 			page 75


 930:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 263              		.loc 1 930 0
 264 005a 2461     		str	r4, [r4, #16]
 933:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 265              		.loc 1 933 0
 266 005c C5F10705 		rsb	r5, r5, #7
 267              	.LVL26:
 268 0060 A561     		str	r5, [r4, #24]
 934:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 269              		.loc 1 934 0
 270 0062 6462     		str	r4, [r4, #36]
 976:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 271              		.loc 1 976 0
 272 0064 C4F84CA0 		str	r10, [r4, #76]
 977:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 273              		.loc 1 977 0
 274 0068 84F850A0 		strb	r10, [r4, #80]
1004:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 275              		.loc 1 1004 0
 276 006c 4A46     		mov	r2, r9
 277 006e 4146     		mov	r1, r8
 278 0070 3046     		mov	r0, r6
 279 0072 FFF7FEFF 		bl	pxPortInitialiseStack
 280              	.LVL27:
 281 0076 2060     		str	r0, [r4]
1008:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 282              		.loc 1 1008 0
 283 0078 07B1     		cbz	r7, .L19
1012:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 284              		.loc 1 1012 0
 285 007a 3C60     		str	r4, [r7]
 286              	.L19:
1018:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 287              		.loc 1 1018 0
 288 007c BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 289              		.cfi_endproc
 290              	.LFE6:
 292              		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 293              		.align	1
 294              		.syntax unified
 295              		.thumb
 296              		.thumb_func
 297              		.fpu fpv4-sp-d16
 299              	prvInitialiseTaskLists:
 300              	.LFB37:
3431:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxPriority;
 301              		.loc 1 3431 0
 302              		.cfi_startproc
 303              		@ args = 0, pretend = 0, frame = 0
 304              		@ frame_needed = 0, uses_anonymous_args = 0
 305 0000 38B5     		push	{r3, r4, r5, lr}
 306              	.LCFI2:
 307              		.cfi_def_cfa_offset 16
 308              		.cfi_offset 3, -16
 309              		.cfi_offset 4, -12
 310              		.cfi_offset 5, -8
 311              		.cfi_offset 14, -4
ARM GAS  /tmp/ccPN8tEQ.s 			page 76


 312              	.LVL28:
3434:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 313              		.loc 1 3434 0
 314 0002 0024     		movs	r4, #0
 315 0004 07E0     		b	.L28
 316              	.LVL29:
 317              	.L29:
3436:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 318              		.loc 1 3436 0 discriminator 3
 319 0006 04EB8402 		add	r2, r4, r4, lsl #2
 320 000a 9300     		lsls	r3, r2, #2
 321 000c 0E48     		ldr	r0, .L31
 322 000e 1844     		add	r0, r0, r3
 323 0010 FFF7FEFF 		bl	vListInitialise
 324              	.LVL30:
3434:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 325              		.loc 1 3434 0 discriminator 3
 326 0014 0134     		adds	r4, r4, #1
 327              	.LVL31:
 328              	.L28:
3434:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 329              		.loc 1 3434 0 is_stmt 0 discriminator 1
 330 0016 062C     		cmp	r4, #6
 331 0018 F5D9     		bls	.L29
3439:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 332              		.loc 1 3439 0 is_stmt 1
 333 001a 0C4D     		ldr	r5, .L31+4
 334 001c 2846     		mov	r0, r5
 335 001e FFF7FEFF 		bl	vListInitialise
 336              	.LVL32:
3440:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
 337              		.loc 1 3440 0
 338 0022 0B4C     		ldr	r4, .L31+8
 339              	.LVL33:
 340 0024 2046     		mov	r0, r4
 341 0026 FFF7FEFF 		bl	vListInitialise
 342              	.LVL34:
3441:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 343              		.loc 1 3441 0
 344 002a 0A48     		ldr	r0, .L31+12
 345 002c FFF7FEFF 		bl	vListInitialise
 346              	.LVL35:
3445:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 347              		.loc 1 3445 0
 348 0030 0948     		ldr	r0, .L31+16
 349 0032 FFF7FEFF 		bl	vListInitialise
 350              	.LVL36:
3451:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 351              		.loc 1 3451 0
 352 0036 0948     		ldr	r0, .L31+20
 353 0038 FFF7FEFF 		bl	vListInitialise
 354              	.LVL37:
3457:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 355              		.loc 1 3457 0
 356 003c 084B     		ldr	r3, .L31+24
 357 003e 1D60     		str	r5, [r3]
3458:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
ARM GAS  /tmp/ccPN8tEQ.s 			page 77


 358              		.loc 1 3458 0
 359 0040 084B     		ldr	r3, .L31+28
 360 0042 1C60     		str	r4, [r3]
3459:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 361              		.loc 1 3459 0
 362 0044 38BD     		pop	{r3, r4, r5, pc}
 363              	.L32:
 364 0046 00BF     		.align	2
 365              	.L31:
 366 0048 00000000 		.word	.LANCHOR4
 367 004c 00000000 		.word	.LANCHOR5
 368 0050 00000000 		.word	.LANCHOR6
 369 0054 00000000 		.word	.LANCHOR1
 370 0058 00000000 		.word	.LANCHOR7
 371 005c 00000000 		.word	.LANCHOR0
 372 0060 00000000 		.word	.LANCHOR2
 373 0064 00000000 		.word	.LANCHOR8
 374              		.cfi_endproc
 375              	.LFE37:
 377              		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 378              		.align	1
 379              		.syntax unified
 380              		.thumb
 381              		.thumb_func
 382              		.fpu fpv4-sp-d16
 384              	prvAddNewTaskToReadyList:
 385              	.LFB7:
1022:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
 386              		.loc 1 1022 0
 387              		.cfi_startproc
 388              		@ args = 0, pretend = 0, frame = 0
 389              		@ frame_needed = 0, uses_anonymous_args = 0
 390              	.LVL38:
 391 0000 10B5     		push	{r4, lr}
 392              	.LCFI3:
 393              		.cfi_def_cfa_offset 8
 394              		.cfi_offset 4, -8
 395              		.cfi_offset 14, -4
 396 0002 0446     		mov	r4, r0
1025:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 397              		.loc 1 1025 0
 398 0004 FFF7FEFF 		bl	vPortEnterCritical
 399              	.LVL39:
1027:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
 400              		.loc 1 1027 0
 401 0008 204A     		ldr	r2, .L40
 402 000a 1368     		ldr	r3, [r2]
 403 000c 0133     		adds	r3, r3, #1
 404 000e 1360     		str	r3, [r2]
1028:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 405              		.loc 1 1028 0
 406 0010 1F4B     		ldr	r3, .L40+4
 407 0012 1B68     		ldr	r3, [r3]
 408 0014 5BB1     		cbz	r3, .L38
1051:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 409              		.loc 1 1051 0
 410 0016 1F4B     		ldr	r3, .L40+8
ARM GAS  /tmp/ccPN8tEQ.s 			page 78


 411 0018 1B68     		ldr	r3, [r3]
 412 001a 6BB9     		cbnz	r3, .L35
1053:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 413              		.loc 1 1053 0
 414 001c 1C4B     		ldr	r3, .L40+4
 415 001e 1B68     		ldr	r3, [r3]
 416 0020 DA6A     		ldr	r2, [r3, #44]
 417 0022 E36A     		ldr	r3, [r4, #44]
 418 0024 9A42     		cmp	r2, r3
 419 0026 07D8     		bhi	.L35
1055:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 420              		.loc 1 1055 0
 421 0028 194B     		ldr	r3, .L40+4
 422 002a 1C60     		str	r4, [r3]
 423 002c 04E0     		b	.L35
 424              	.L38:
1032:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 425              		.loc 1 1032 0
 426 002e 184B     		ldr	r3, .L40+4
 427 0030 1C60     		str	r4, [r3]
1034:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 428              		.loc 1 1034 0
 429 0032 1368     		ldr	r3, [r2]
 430 0034 012B     		cmp	r3, #1
 431 0036 26D0     		beq	.L39
 432              	.L35:
1068:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 433              		.loc 1 1068 0
 434 0038 174A     		ldr	r2, .L40+12
 435 003a 1368     		ldr	r3, [r2]
 436 003c 0133     		adds	r3, r3, #1
 437 003e 1360     		str	r3, [r2]
1078:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 438              		.loc 1 1078 0
 439 0040 E36A     		ldr	r3, [r4, #44]
 440 0042 0122     		movs	r2, #1
 441 0044 9A40     		lsls	r2, r2, r3
 442 0046 1549     		ldr	r1, .L40+16
 443 0048 0868     		ldr	r0, [r1]
 444 004a 0243     		orrs	r2, r2, r0
 445 004c 0A60     		str	r2, [r1]
 446 004e 03EB8303 		add	r3, r3, r3, lsl #2
 447 0052 9A00     		lsls	r2, r3, #2
 448 0054 211D     		adds	r1, r4, #4
 449 0056 1248     		ldr	r0, .L40+20
 450 0058 1044     		add	r0, r0, r2
 451 005a FFF7FEFF 		bl	vListInsertEnd
 452              	.LVL40:
1082:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 453              		.loc 1 1082 0
 454 005e FFF7FEFF 		bl	vPortExitCritical
 455              	.LVL41:
1084:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 456              		.loc 1 1084 0
 457 0062 0C4B     		ldr	r3, .L40+8
 458 0064 1B68     		ldr	r3, [r3]
 459 0066 6BB1     		cbz	r3, .L33
ARM GAS  /tmp/ccPN8tEQ.s 			page 79


1088:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 460              		.loc 1 1088 0
 461 0068 094B     		ldr	r3, .L40+4
 462 006a 1B68     		ldr	r3, [r3]
 463 006c DA6A     		ldr	r2, [r3, #44]
 464 006e E36A     		ldr	r3, [r4, #44]
 465 0070 9A42     		cmp	r2, r3
 466 0072 07D2     		bcs	.L33
1090:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 467              		.loc 1 1090 0
 468 0074 0B4B     		ldr	r3, .L40+24
 469 0076 4FF08052 		mov	r2, #268435456
 470 007a 1A60     		str	r2, [r3]
 471              		.syntax unified
 472              	@ 1090 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 473 007c BFF34F8F 		dsb
 474              	@ 0 "" 2
 475              	@ 1090 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 476 0080 BFF36F8F 		isb
 477              	@ 0 "" 2
 478              		.thumb
 479              		.syntax unified
 480              	.L33:
1101:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 481              		.loc 1 1101 0
 482 0084 10BD     		pop	{r4, pc}
 483              	.LVL42:
 484              	.L39:
1039:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 485              		.loc 1 1039 0
 486 0086 FFF7FEFF 		bl	prvInitialiseTaskLists
 487              	.LVL43:
 488 008a D5E7     		b	.L35
 489              	.L41:
 490              		.align	2
 491              	.L40:
 492 008c 00000000 		.word	.LANCHOR9
 493 0090 00000000 		.word	.LANCHOR10
 494 0094 00000000 		.word	.LANCHOR11
 495 0098 00000000 		.word	.LANCHOR12
 496 009c 00000000 		.word	.LANCHOR13
 497 00a0 00000000 		.word	.LANCHOR4
 498 00a4 04ED00E0 		.word	-536810236
 499              		.cfi_endproc
 500              	.LFE7:
 502              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 503              		.align	1
 504              		.syntax unified
 505              		.thumb
 506              		.thumb_func
 507              		.fpu fpv4-sp-d16
 509              	prvCheckTasksWaitingTermination:
 510              	.LFB38:
3463:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 511              		.loc 1 3463 0
 512              		.cfi_startproc
 513              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccPN8tEQ.s 			page 80


 514              		@ frame_needed = 0, uses_anonymous_args = 0
 515              	.LBB98:
3473:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 516              		.loc 1 3473 0
 517 0000 0F4B     		ldr	r3, .L49
 518 0002 1B68     		ldr	r3, [r3]
 519 0004 D3B1     		cbz	r3, .L48
 520              	.LBE98:
3463:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 521              		.loc 1 3463 0
 522 0006 10B5     		push	{r4, lr}
 523              	.LCFI4:
 524              		.cfi_def_cfa_offset 8
 525              		.cfi_offset 4, -8
 526              		.cfi_offset 14, -4
 527              	.L44:
 528              	.LBB99:
3475:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 529              		.loc 1 3475 0
 530 0008 FFF7FEFF 		bl	vPortEnterCritical
 531              	.LVL44:
3477:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 532              		.loc 1 3477 0
 533 000c 0D4B     		ldr	r3, .L49+4
 534 000e DB68     		ldr	r3, [r3, #12]
 535 0010 DC68     		ldr	r4, [r3, #12]
 536              	.LVL45:
3478:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
 537              		.loc 1 3478 0
 538 0012 201D     		adds	r0, r4, #4
 539 0014 FFF7FEFF 		bl	uxListRemove
 540              	.LVL46:
3479:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
 541              		.loc 1 3479 0
 542 0018 0B4A     		ldr	r2, .L49+8
 543 001a 1368     		ldr	r3, [r2]
 544 001c 013B     		subs	r3, r3, #1
 545 001e 1360     		str	r3, [r2]
3480:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 546              		.loc 1 3480 0
 547 0020 074A     		ldr	r2, .L49
 548 0022 1368     		ldr	r3, [r2]
 549 0024 013B     		subs	r3, r3, #1
 550 0026 1360     		str	r3, [r2]
3482:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 551              		.loc 1 3482 0
 552 0028 FFF7FEFF 		bl	vPortExitCritical
 553              	.LVL47:
3484:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 554              		.loc 1 3484 0
 555 002c 2046     		mov	r0, r4
 556 002e FFF7FEFF 		bl	prvDeleteTCB
 557              	.LVL48:
3473:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 558              		.loc 1 3473 0
 559 0032 034B     		ldr	r3, .L49
 560 0034 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccPN8tEQ.s 			page 81


 561 0036 002B     		cmp	r3, #0
 562 0038 E6D1     		bne	.L44
 563              	.LBE99:
3488:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 564              		.loc 1 3488 0
 565 003a 10BD     		pop	{r4, pc}
 566              	.LVL49:
 567              	.L48:
 568              	.LCFI5:
 569              		.cfi_def_cfa_offset 0
 570              		.cfi_restore 4
 571              		.cfi_restore 14
 572 003c 7047     		bx	lr
 573              	.L50:
 574 003e 00BF     		.align	2
 575              	.L49:
 576 0040 00000000 		.word	.LANCHOR14
 577 0044 00000000 		.word	.LANCHOR7
 578 0048 00000000 		.word	.LANCHOR9
 579              		.cfi_endproc
 580              	.LFE38:
 582              		.section	.text.prvIdleTask,"ax",%progbits
 583              		.align	1
 584              		.syntax unified
 585              		.thumb
 586              		.thumb_func
 587              		.fpu fpv4-sp-d16
 589              	prvIdleTask:
 590              	.LFB36:
3219:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
 591              		.loc 1 3219 0
 592              		.cfi_startproc
 593              		@ Volatile: function does not return.
 594              		@ args = 0, pretend = 0, frame = 0
 595              		@ frame_needed = 0, uses_anonymous_args = 0
 596              	.LVL50:
 597 0000 08B5     		push	{r3, lr}
 598              	.LCFI6:
 599              		.cfi_def_cfa_offset 8
 600              		.cfi_offset 3, -8
 601              		.cfi_offset 14, -4
 602              	.LVL51:
 603              	.L52:
3235:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 604              		.loc 1 3235 0
 605 0002 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
 606              	.LVL52:
3258:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 607              		.loc 1 3258 0
 608 0006 064B     		ldr	r3, .L55
 609 0008 1B68     		ldr	r3, [r3]
 610 000a 012B     		cmp	r3, #1
 611 000c F9D9     		bls	.L52
3260:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 612              		.loc 1 3260 0
 613 000e 054B     		ldr	r3, .L55+4
 614 0010 4FF08052 		mov	r2, #268435456
ARM GAS  /tmp/ccPN8tEQ.s 			page 82


 615 0014 1A60     		str	r2, [r3]
 616              		.syntax unified
 617              	@ 3260 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 618 0016 BFF34F8F 		dsb
 619              	@ 0 "" 2
 620              	@ 3260 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 621 001a BFF36F8F 		isb
 622              	@ 0 "" 2
 623              		.thumb
 624              		.syntax unified
 625 001e F0E7     		b	.L52
 626              	.L56:
 627              		.align	2
 628              	.L55:
 629 0020 00000000 		.word	.LANCHOR4
 630 0024 04ED00E0 		.word	-536810236
 631              		.cfi_endproc
 632              	.LFE36:
 634              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 635              		.align	1
 636              		.syntax unified
 637              		.thumb
 638              		.thumb_func
 639              		.fpu fpv4-sp-d16
 641              	prvAddCurrentTaskToDelayedList:
 642              	.LFB54:
3746:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3747:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3748:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3749:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3750:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3751:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3752:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
3753:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3754:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A critical section is not required as this is not called from
3755:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3756:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		individual execution thread. */
3757:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pxCurrentTCB;
3758:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3759:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
3760:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3761:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3762:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3763:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3764:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3765:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3766:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3767:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3768:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3769:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
3770:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3771:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
3772:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3773:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
3774:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3775:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3776:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/ccPN8tEQ.s 			page 83


3777:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3778:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3779:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
3780:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3781:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3782:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3783:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
3784:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3785:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3786:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3787:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
3788:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3789:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3790:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
3791:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3792:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3793:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3794:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3795:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
3796:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3797:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
3798:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
3799:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3800:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
3801:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		locked then the mutex holder might now be NULL.  _RB_ Is this still
3802:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		needed as interrupts can no longer use mutexes? */
3803:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
3804:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3805:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
3806:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
3807:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
3808:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
3809:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3810:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Adjust the mutex holder state to account for its new
3811:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority.  Only reset the event list item value if the value is
3812:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not being used for anything else. */
3813:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VA
3814:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3815:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIOR
3816:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3817:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3818:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3819:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3820:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3821:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3822:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task being modified is in the ready state it will need
3823:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to be moved into a new list. */
3824:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutex
3825:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3826:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3827:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3828:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
3829:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3830:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3831:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3832:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3833:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
ARM GAS  /tmp/ccPN8tEQ.s 			page 84


3834:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3835:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
3836:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
3837:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
3838:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3839:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3840:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3841:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Just inherit the priority. */
3842:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
3843:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3844:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3845:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
3846:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3847:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Inheritance occurred. */
3848:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
3849:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3850:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3851:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3852:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
3853:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3854:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The base priority of the mutex holder is lower than the
3855:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority of the task attempting to take the mutex, but the
3856:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					current priority of the mutex holder is not lower than the
3857:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority of the task attempting to take the mutex.
3858:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Therefore the mutex holder must have already inherited a
3859:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority, but inheritance would have occurred if that had
3860:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					not been the case. */
3861:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
3862:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3863:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3864:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3865:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3866:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3867:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3868:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3869:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3870:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3871:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3872:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3873:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3874:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
3875:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3876:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3877:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
3878:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3879:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3880:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3881:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3882:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
3883:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3884:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
3885:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
3886:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3887:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
3888:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3889:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
3890:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
ARM GAS  /tmp/ccPN8tEQ.s 			page 85


3891:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
3892:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			be the running state task. */
3893:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
3894:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
3895:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
3896:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3897:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
3898:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task? */
3899:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
3900:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3901:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
3902:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
3903:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3904:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task can only have an inherited priority if it holds
3905:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
3906:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					given from an interrupt, and if a mutex is given by the
3907:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					holding task then it must be the running state task.  Remove
3908:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the holding task from the ready list. */
3909:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3910:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3911:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
3912:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3913:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3914:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3915:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3916:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3917:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3918:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority before adding the task into the
3919:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new	ready list. */
3920:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
3921:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
3922:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3923:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
3924:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					any other purpose if this task is running, and it must be
3925:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					running to give back the mutex. */
3926:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
3927:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
3928:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3929:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Return true to indicate that a context switch is required.
3930:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This is only actually required in the corner case whereby
3931:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					multiple mutexes were held and the mutexes were given back
3932:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					in an order different to that in which they were taken.
3933:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					If a context switch did not occur when the first mutex was
3934:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					returned, even if a task was waiting on it, then a context
3935:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					switch should occur when the last mutex is returned whether
3936:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a task is waiting on it or not. */
3937:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
3938:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3939:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3940:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3941:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3942:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3943:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3944:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3945:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3946:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3947:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /tmp/ccPN8tEQ.s 			page 86


3948:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3949:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3950:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3951:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3952:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3953:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3954:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
3955:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3956:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3957:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
3958:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3959:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3960:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3961:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3962:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestP
3963:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3964:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
3965:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
3966:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
3967:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3968:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
3969:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3970:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If pxMutexHolder is not NULL then the holder must hold at least
3971:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			one mutex. */
3972:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
3973:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3974:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Determine the priority to which the priority of the task that
3975:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			holds the mutex should be set.  This will be the greater of the
3976:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			holding task's base priority and the priority of the highest
3977:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			priority task that is waiting to obtain the mutex. */
3978:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
3979:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3980:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityToUse = uxHighestPriorityWaitingTask;
3981:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3982:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3983:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3984:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityToUse = pxTCB->uxBasePriority;
3985:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3986:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3987:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Does the priority need to change? */
3988:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != uxPriorityToUse )
3989:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3990:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held.  This is a
3991:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				simplification in the priority inheritance implementation.  If
3992:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task that holds the mutex is also holding other mutexes then
3993:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the other mutexes may have caused the priority inheritance. */
3994:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
3995:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3996:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If a task has timed out because it already holds the
3997:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mutex it was trying to obtain then it cannot of inherited
3998:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					its own priority. */
3999:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB != pxCurrentTCB );
4000:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4001:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority, remembering the previous
4002:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority to facilitate determining the subject task's
4003:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					state. */
4004:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
ARM GAS  /tmp/ccPN8tEQ.s 			page 87


4005:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxPriorityUsedOnEntry = pxTCB->uxPriority;
4006:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxPriorityToUse;
4007:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4008:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Only reset the event list item value if the value is not
4009:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					being used for anything else. */
4010:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE
4011:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4012:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( 
4013:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4014:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4015:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4016:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4017:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4018:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4019:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the running task is not the task that holds the mutex
4020:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					then the task that holds the mutex could be in either the
4021:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Ready, Blocked or Suspended states.  Only remove the task
4022:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					from its current state list if it is in the Ready state as
4023:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the task's priority is going to change and there is one
4024:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Ready list per priority. */
4025:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xState
4026:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4027:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4028:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4029:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
4030:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4031:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
4032:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4033:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
4034:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4035:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4036:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						prvAddTaskToReadyList( pxTCB );
4037:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4038:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4039:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4040:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4041:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4042:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4043:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4044:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4045:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4046:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4047:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4048:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4049:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4050:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4051:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4052:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4053:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4054:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4055:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4056:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4057:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4058:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4059:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4060:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4061:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccPN8tEQ.s 			page 88


4062:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4063:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4064:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskEnterCritical( void )
4065:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4066:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
4067:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4068:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4069:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4070:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
4071:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4072:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
4073:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function so	assert() if it is being called from an interrupt
4074:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
4075:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
4076:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			protect against recursive calls if the assert function also uses a
4077:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			critical section. */
4078:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
4079:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4080:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portASSERT_IF_IN_ISR();
4081:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4082:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4083:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4084:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4085:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4086:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4087:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4088:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4089:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4090:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4091:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4092:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4093:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4094:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskExitCritical( void )
4095:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4096:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4097:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4098:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
4099:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4100:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
4101:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4102:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
4103:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4104:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portENABLE_INTERRUPTS();
4105:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4106:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4107:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4108:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4109:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4110:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4111:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4112:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4113:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4114:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4115:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4116:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4117:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4118:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
ARM GAS  /tmp/ccPN8tEQ.s 			page 89


4119:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4120:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4121:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4122:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4123:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4124:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4125:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4126:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4127:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
4128:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4129:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	size_t x;
4130:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4131:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Start by copying the entire string. */
4132:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
4133:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4134:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
4135:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		printed out. */
4136:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
4137:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4138:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pcBuffer[ x ] = ' ';
4139:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4140:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4141:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Terminate. */
4142:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pcBuffer[ x ] = 0x00;
4143:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4144:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return the new end of string. */
4145:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return &( pcBuffer[ x ] );
4146:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4147:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4148:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
4149:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4150:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4151:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( config
4152:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4153:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
4154:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4155:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4156:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
4157:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cStatus;
4158:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4159:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
4160:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4161:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4162:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4163:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4164:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
4165:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4166:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
4167:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
4168:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays task names, states and stack usage.
4169:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4170:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
4171:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
4172:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
4173:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
4174:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
4175:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
ARM GAS  /tmp/ccPN8tEQ.s 			page 90


4176:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * snprintf() implementation!).
4177:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4178:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4179:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4180:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskList().
4181:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
4182:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4183:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4184:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4185:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = 0x00;
4186:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4187:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4188:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
4189:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4190:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4191:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  if
4192:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4193:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4194:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
4195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4196:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4197:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4198:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4199:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
4200:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4201:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Create a human readable table from the binary data. */
4202:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
4203:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4204:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
4205:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4206:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eRunning:		cStatus = tskRUNNING_CHAR;
4207:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4208:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4209:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
4210:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4211:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4212:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
4213:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4214:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4215:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
4216:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4217:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4218:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
4219:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4220:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4221:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					default:			/* Should not get here, but it is included
4222:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										to prevent static checking errors. */
4223:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										cStatus = 0x00;
4224:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4225:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4226:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4227:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
4228:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				can be printed in tabular form more easily. */
4229:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4230:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4231:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the rest of the string. */
4232:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
ARM GAS  /tmp/ccPN8tEQ.s 			page 91


4233:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer );
4234:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4235:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4236:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4237:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4238:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4239:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4240:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4241:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4242:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4243:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4244:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4245:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4246:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( 
4247:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
4248:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4249:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( c
4250:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4251:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
4252:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4253:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4254:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
4255:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
4256:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4257:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
4258:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4259:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
4260:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4261:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
4262:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4263:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
4264:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4265:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4266:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4267:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4268:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
4269:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4270:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4271:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
4272:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
4273:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * in both absolute and percentage terms.
4274:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4275:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4276:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
4277:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * provide different results on different platforms.  An alternative,
4278:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
4279:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4280:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4281:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a full snprintf() implementation!).
4282:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4283:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4284:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4285:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
4286:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
4287:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4288:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4289:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = 0x00;
ARM GAS  /tmp/ccPN8tEQ.s 			page 92


4290:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4291:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4292:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
4293:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4294:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4295:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  If
4296:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4297:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4298:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
4299:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4300:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4301:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4302:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4303:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4304:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4305:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* For percentage calculations. */
4306:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulTotalTime /= 100UL;
4307:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4308:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Avoid divide by zero errors. */
4309:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulTotalTime > 0 )
4310:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4311:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Create a human readable table from the binary data. */
4312:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
4313:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4314:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* What percentage of the total run time has the task used?
4315:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This will always be rounded down to the nearest integer.
4316:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
4317:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4318:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4319:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Write the task name to the string, padding with
4320:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					spaces so it can be printed in tabular form more
4321:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					easily. */
4322:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4323:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4324:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
4325:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4326:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4327:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4328:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
4329:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4330:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4331:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4332:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4333:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4334:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4335:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4336:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4337:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4338:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4339:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4340:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* If the percentage is zero here then the task has
4341:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						consumed less than 1% of the total run time. */
4342:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4343:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4344:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
4345:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4346:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
ARM GAS  /tmp/ccPN8tEQ.s 			page 93


4347:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4348:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4349:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4350:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4351:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4352:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4353:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4354:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4355:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer );
4356:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4357:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4358:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4359:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4360:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4361:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4362:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4363:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4364:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4365:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4366:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4367:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4368:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4369:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4370:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4371:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4372:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4373:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4374:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4375:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4376:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4377:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
4378:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
4379:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4380:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
4381:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4382:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
4383:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queues and semaphores. */
4384:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
4385:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4386:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxReturn;
4387:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
4388:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4389:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4390:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4391:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4392:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvTaskIncrementMutexHeldCount( void )
4393:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4394:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
4395:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then pxCurrentTCB will be NULL. */
4396:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB != NULL )
4397:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4398:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
4399:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4400:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4401:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxCurrentTCB;
4402:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4403:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccPN8tEQ.s 			page 94


4404:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4405:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4406:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4407:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4408:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4409:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
4410:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4411:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
4412:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4413:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4414:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4415:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
4416:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
4417:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4418:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4419:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4420:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4421:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4422:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4423:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4424:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
4425:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4426:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4427:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4428:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4429:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4430:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
4431:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4432:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4433:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4434:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4435:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4436:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4437:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4438:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4439:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4440:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4441:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4442:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4443:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4444:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4445:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4446:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_TAKE();
4447:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
4448:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4449:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulReturn != 0UL )
4450:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4451:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
4452:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4453:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
4454:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4455:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4456:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4457:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
4458:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4459:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4460:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
ARM GAS  /tmp/ccPN8tEQ.s 			page 95


4461:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4462:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4463:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4464:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4465:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4466:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4467:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4468:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4469:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ulReturn;
4470:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4471:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4472:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4473:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4474:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4475:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4476:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4477:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4478:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4479:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
4480:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4481:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4482:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4483:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if a notification is not already pending. */
4484:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4485:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4486:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4487:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4488:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				clear the value to zero. */
4489:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
4490:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4491:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4492:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4493:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4494:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4495:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4496:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4497:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4498:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4499:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4500:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4501:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4502:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4503:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
4504:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4505:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4506:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4507:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4508:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4509:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4510:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4511:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4512:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4513:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4514:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4515:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4516:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4517:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
ARM GAS  /tmp/ccPN8tEQ.s 			page 96


4518:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4519:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_WAIT();
4520:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4521:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulNotificationValue != NULL )
4522:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4523:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Output the current notification value, which may or may not
4524:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				have changed. */
4525:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
4526:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4527:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4528:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If ucNotifyValue is set then either the task never entered the
4529:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			blocked state (because a notification was already pending) or the
4530:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4531:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			unblocked because of a timeout. */
4532:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4533:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4534:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was not received. */
4535:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
4536:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4537:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4538:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4539:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was already pending or a notification was
4540:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				received while the task was waiting. */
4541:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
4542:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
4543:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4544:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4545:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4546:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4547:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4548:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4549:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4550:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4551:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4552:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4553:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4554:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4555:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4556:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4557:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4558:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4559:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4560:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
4561:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4562:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4563:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4564:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4565:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4566:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4567:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4568:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4569:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4570:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4571:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4572:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4573:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4574:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccPN8tEQ.s 			page 97


4575:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4576:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4577:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
4578:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4579:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4580:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4581:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4582:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4583:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4584:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4585:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4586:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4587:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4588:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4589:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4590:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4591:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4592:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4593:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4594:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4595:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4596:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4597:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4598:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4599:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4600:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4601:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4602:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4603:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction:
4604:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4605:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4606:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4607:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4608:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4609:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY();
4610:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4611:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4612:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4613:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4614:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4615:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4616:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
4617:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4618:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4619:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4620:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4621:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4622:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4623:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If a task is blocked waiting for a notification then
4624:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4625:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4626:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4627:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					because it will automatically get reset to a new value when
4628:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4629:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tickless idling is used it might be more important to enter
4630:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					sleep mode at the earliest possible time - so reset
4631:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
ARM GAS  /tmp/ccPN8tEQ.s 			page 98


4632:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					earliest possible time. */
4633:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
4634:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4635:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
4636:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4637:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4638:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4639:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4640:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4641:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
4642:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4643:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4644:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4645:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4646:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4647:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4648:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4649:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4650:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4651:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4652:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4653:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4654:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4655:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4656:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4657:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4658:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4659:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4660:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4661:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4662:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4663:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4664:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4665:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4666:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4667:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
4668:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4669:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4670:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4671:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4672:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4673:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4674:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4675:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4676:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4677:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4678:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4679:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4680:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4681:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4682:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4683:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4684:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4685:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4686:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
4687:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4688:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
ARM GAS  /tmp/ccPN8tEQ.s 			page 99


4689:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4690:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4691:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4692:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4693:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4694:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4695:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4696:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4697:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4698:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4699:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4700:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4701:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4702:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
4703:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4704:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4705:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4706:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4707:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4708:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4709:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4710:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4711:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4712:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4713:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4714:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4715:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4716:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4717:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4718:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4719:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4720:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4721:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4722:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4723:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4724:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4725:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4726:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4727:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4728:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction :
4729:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4730:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4731:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4732:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4733:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4734:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
4735:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4736:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4737:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4738:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4739:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4740:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4741:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4742:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4743:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4744:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4745:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
ARM GAS  /tmp/ccPN8tEQ.s 			page 100


4746:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4747:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4748:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4749:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4750:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4751:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4752:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4753:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4754:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4755:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4756:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4757:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4758:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4759:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
4760:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4761:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
4762:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4763:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4764:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4765:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4766:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter to an ISR
4767:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						safe FreeRTOS function. */
4768:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
4769:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4770:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4771:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4772:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4773:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4774:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4775:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4776:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4777:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4778:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4779:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4780:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4781:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4782:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4783:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4784:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4785:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4786:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4787:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
4788:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4789:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4790:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4791:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4792:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4793:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4794:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4795:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4796:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4797:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4798:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4799:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4800:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4801:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4802:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
ARM GAS  /tmp/ccPN8tEQ.s 			page 101


4803:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4804:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4805:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4806:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4807:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4808:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4809:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
4810:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4811:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4812:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4813:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4814:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4815:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4816:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4817:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4818:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4819:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4820:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
4821:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			semaphore. */
4822:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
4823:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4824:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
4825:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4826:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4827:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4828:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4829:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4830:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4831:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4832:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4833:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4834:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4835:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4836:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4837:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4838:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4839:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4840:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4841:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4842:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4843:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4844:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4845:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4846:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4847:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4848:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4849:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
4850:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4851:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
4852:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4853:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4854:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4855:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4856:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter in an ISR
4857:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						safe FreeRTOS function. */
4858:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
4859:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
ARM GAS  /tmp/ccPN8tEQ.s 			page 102


4860:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4861:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4862:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4863:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4864:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4865:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4866:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4867:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4868:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4869:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4870:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4871:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4872:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4873:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4874:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4875:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4876:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
4877:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4878:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
4879:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
4880:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4881:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
4882:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		its notification state cleared. */
4883:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
4884:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4885:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4886:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4887:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
4888:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4889:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4890:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
4891:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4892:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4893:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4894:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
4895:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4896:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4897:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4898:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4899:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4900:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4901:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4902:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4903:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4904:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4905:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4906:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
4907:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 643              		.loc 1 4907 0
 644              		.cfi_startproc
 645              		@ args = 0, pretend = 0, frame = 0
 646              		@ frame_needed = 0, uses_anonymous_args = 0
 647              	.LVL53:
 648 0000 70B5     		push	{r4, r5, r6, lr}
 649              	.LCFI7:
 650              		.cfi_def_cfa_offset 16
 651              		.cfi_offset 4, -16
ARM GAS  /tmp/ccPN8tEQ.s 			page 103


 652              		.cfi_offset 5, -12
 653              		.cfi_offset 6, -8
 654              		.cfi_offset 14, -4
 655 0002 0446     		mov	r4, r0
 656 0004 0E46     		mov	r6, r1
4908:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTimeToWake;
4909:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** const TickType_t xConstTickCount = xTickCount;
 657              		.loc 1 4909 0
 658 0006 1D4B     		ldr	r3, .L65
 659 0008 1D68     		ldr	r5, [r3]
 660              	.LVL54:
4910:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4911:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
4912:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4913:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
4914:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		reset to pdFALSE so it can be detected as having been set to pdTRUE
4915:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		when the task leaves the Blocked state. */
4916:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxCurrentTCB->ucDelayAborted = pdFALSE;
4917:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4918:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
4919:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4920:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the ready list before adding it to the blocked list
4921:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	as the same list item is used for both lists. */
4922:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 661              		.loc 1 4922 0
 662 000a 1D4B     		ldr	r3, .L65+4
 663 000c 1868     		ldr	r0, [r3]
 664              	.LVL55:
 665 000e 0430     		adds	r0, r0, #4
 666 0010 FFF7FEFF 		bl	uxListRemove
 667              	.LVL56:
 668 0014 50B9     		cbnz	r0, .L58
4923:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4924:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
4925:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		check, and the port reset macro can be called directly. */
4926:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 669              		.loc 1 4926 0
 670 0016 1A4B     		ldr	r3, .L65+4
 671 0018 1B68     		ldr	r3, [r3]
 672 001a DA6A     		ldr	r2, [r3, #44]
 673 001c 0123     		movs	r3, #1
 674 001e 03FA02F2 		lsl	r2, r3, r2
 675 0022 1849     		ldr	r1, .L65+8
 676 0024 0B68     		ldr	r3, [r1]
 677 0026 23EA0203 		bic	r3, r3, r2
 678 002a 0B60     		str	r3, [r1]
 679              	.L58:
4927:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4928:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
4929:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4930:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
4931:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4932:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4933:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
4934:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4935:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 680              		.loc 1 4935 0
ARM GAS  /tmp/ccPN8tEQ.s 			page 104


 681 002c B4F1FF3F 		cmp	r4, #-1
 682 0030 13D0     		beq	.L63
 683              	.L59:
4936:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4937:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
4938:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
4939:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			indefinitely. */
4940:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
4941:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4942:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4943:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4944:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
4945:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
4946:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			kernel will manage it correctly. */
4947:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = xConstTickCount + xTicksToWait;
 684              		.loc 1 4947 0
 685 0032 2C44     		add	r4, r4, r5
 686              	.LVL57:
4948:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4949:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The list item will be inserted in wake time order. */
4950:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 687              		.loc 1 4950 0
 688 0034 124B     		ldr	r3, .L65+4
 689 0036 1B68     		ldr	r3, [r3]
 690 0038 5C60     		str	r4, [r3, #4]
4951:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4952:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xConstTickCount )
 691              		.loc 1 4952 0
 692 003a A542     		cmp	r5, r4
 693 003c 16D8     		bhi	.L64
4953:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4954:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow
4955:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list. */
4956:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4957:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4958:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4959:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4960:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The wake time has not overflowed, so the current block list
4961:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
4962:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 694              		.loc 1 4962 0
 695 003e 124B     		ldr	r3, .L65+12
 696 0040 1868     		ldr	r0, [r3]
 697 0042 0F4B     		ldr	r3, .L65+4
 698 0044 1968     		ldr	r1, [r3]
 699 0046 0431     		adds	r1, r1, #4
 700 0048 FFF7FEFF 		bl	vListInsert
 701              	.LVL58:
4963:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4964:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task entering the blocked state was placed at the
4965:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				head of the list of blocked tasks then xNextTaskUnblockTime
4966:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				needs to be updated too. */
4967:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTimeToWake < xNextTaskUnblockTime )
 702              		.loc 1 4967 0
 703 004c 0F4B     		ldr	r3, .L65+16
 704 004e 1B68     		ldr	r3, [r3]
 705 0050 A342     		cmp	r3, r4
ARM GAS  /tmp/ccPN8tEQ.s 			page 105


 706 0052 12D9     		bls	.L57
4968:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4969:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = xTimeToWake;
 707              		.loc 1 4969 0
 708 0054 0D4B     		ldr	r3, .L65+16
 709 0056 1C60     		str	r4, [r3]
4970:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4971:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4972:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4973:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4974:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4975:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4976:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4977:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4978:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
4979:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4980:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Calculate the time at which the task should be woken if the event
4981:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		does not occur.  This may overflow but this doesn't matter, the kernel
4982:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		will manage it correctly. */
4983:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTimeToWake = xConstTickCount + xTicksToWait;
4984:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4985:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The list item will be inserted in wake time order. */
4986:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
4987:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4988:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTimeToWake < xConstTickCount )
4989:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4990:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Wake time has overflowed.  Place this item in the overflow list. */
4991:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4992:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4993:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4994:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4995:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The wake time has not overflowed, so the current block list is used. */
4996:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4997:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4998:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task entering the blocked state was placed at the head of the
4999:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			list of blocked tasks then xNextTaskUnblockTime needs to be updated
5000:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			too. */
5001:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xNextTaskUnblockTime )
5002:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5003:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xNextTaskUnblockTime = xTimeToWake;
5004:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5005:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
5006:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5007:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
5008:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5009:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5010:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5011:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
5012:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xCanBlockIndefinitely;
5013:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5014:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
5015:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 710              		.loc 1 5015 0
 711 0058 0FE0     		b	.L57
 712              	.LVL59:
 713              	.L63:
4935:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/ccPN8tEQ.s 			page 106


 714              		.loc 1 4935 0 discriminator 1
 715 005a 002E     		cmp	r6, #0
 716 005c E9D0     		beq	.L59
4940:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 717              		.loc 1 4940 0
 718 005e 084B     		ldr	r3, .L65+4
 719 0060 1968     		ldr	r1, [r3]
 720 0062 0431     		adds	r1, r1, #4
 721 0064 0A48     		ldr	r0, .L65+20
 722 0066 FFF7FEFF 		bl	vListInsertEnd
 723              	.LVL60:
 724 006a 06E0     		b	.L57
 725              	.LVL61:
 726              	.L64:
4956:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 727              		.loc 1 4956 0
 728 006c 094B     		ldr	r3, .L65+24
 729 006e 1868     		ldr	r0, [r3]
 730 0070 034B     		ldr	r3, .L65+4
 731 0072 1968     		ldr	r1, [r3]
 732 0074 0431     		adds	r1, r1, #4
 733 0076 FFF7FEFF 		bl	vListInsert
 734              	.LVL62:
 735              	.L57:
 736              		.loc 1 5015 0
 737 007a 70BD     		pop	{r4, r5, r6, pc}
 738              	.LVL63:
 739              	.L66:
 740              		.align	2
 741              	.L65:
 742 007c 00000000 		.word	.LANCHOR15
 743 0080 00000000 		.word	.LANCHOR10
 744 0084 00000000 		.word	.LANCHOR13
 745 0088 00000000 		.word	.LANCHOR2
 746 008c 00000000 		.word	.LANCHOR3
 747 0090 00000000 		.word	.LANCHOR0
 748 0094 00000000 		.word	.LANCHOR8
 749              		.cfi_endproc
 750              	.LFE54:
 752              		.section	.text.xTaskCreate,"ax",%progbits
 753              		.align	1
 754              		.global	xTaskCreate
 755              		.syntax unified
 756              		.thumb
 757              		.thumb_func
 758              		.fpu fpv4-sp-d16
 760              	xTaskCreate:
 761              	.LFB5:
 732:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 762              		.loc 1 732 0
 763              		.cfi_startproc
 764              		@ args = 8, pretend = 0, frame = 0
 765              		@ frame_needed = 0, uses_anonymous_args = 0
 766              	.LVL64:
 767 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 768              	.LCFI8:
 769              		.cfi_def_cfa_offset 28
ARM GAS  /tmp/ccPN8tEQ.s 			page 107


 770              		.cfi_offset 4, -28
 771              		.cfi_offset 5, -24
 772              		.cfi_offset 6, -20
 773              		.cfi_offset 7, -16
 774              		.cfi_offset 8, -12
 775              		.cfi_offset 9, -8
 776              		.cfi_offset 14, -4
 777 0004 85B0     		sub	sp, sp, #20
 778              	.LCFI9:
 779              		.cfi_def_cfa_offset 48
 780 0006 0746     		mov	r7, r0
 781 0008 8846     		mov	r8, r1
 782 000a 1546     		mov	r5, r2
 783 000c 9946     		mov	r9, r3
 784              	.LBB100:
 766:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 785              		.loc 1 766 0
 786 000e 9000     		lsls	r0, r2, #2
 787              	.LVL65:
 788 0010 FFF7FEFF 		bl	pvPortMalloc
 789              	.LVL66:
 768:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 790              		.loc 1 768 0
 791 0014 F8B1     		cbz	r0, .L71
 792 0016 0646     		mov	r6, r0
 771:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 793              		.loc 1 771 0
 794 0018 5420     		movs	r0, #84
 795              	.LVL67:
 796 001a FFF7FEFF 		bl	pvPortMalloc
 797              	.LVL68:
 773:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 798              		.loc 1 773 0
 799 001e 0446     		mov	r4, r0
 800 0020 A8B1     		cbz	r0, .L69
 776:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 801              		.loc 1 776 0
 802 0022 0663     		str	r6, [r0, #48]
 803              	.LVL69:
 804              	.L70:
 805              	.LBE100:
 792:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 806              		.loc 1 792 0
 807 0024 D4B1     		cbz	r4, .L72
 802:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 808              		.loc 1 802 0
 809 0026 0023     		movs	r3, #0
 810 0028 0393     		str	r3, [sp, #12]
 811 002a 0294     		str	r4, [sp, #8]
 812 002c 0D9B     		ldr	r3, [sp, #52]
 813 002e 0193     		str	r3, [sp, #4]
 814 0030 0C9B     		ldr	r3, [sp, #48]
 815 0032 0093     		str	r3, [sp]
 816 0034 4B46     		mov	r3, r9
 817 0036 2A46     		mov	r2, r5
 818 0038 4146     		mov	r1, r8
 819 003a 3846     		mov	r0, r7
ARM GAS  /tmp/ccPN8tEQ.s 			page 108


 820 003c FFF7FEFF 		bl	prvInitialiseNewTask
 821              	.LVL70:
 803:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 822              		.loc 1 803 0
 823 0040 2046     		mov	r0, r4
 824 0042 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 825              	.LVL71:
 804:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 826              		.loc 1 804 0
 827 0046 0120     		movs	r0, #1
 828              	.LVL72:
 829              	.L67:
 812:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 830              		.loc 1 812 0
 831 0048 05B0     		add	sp, sp, #20
 832              	.LCFI10:
 833              		.cfi_remember_state
 834              		.cfi_def_cfa_offset 28
 835              		@ sp needed
 836 004a BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 837              	.LVL73:
 838              	.L69:
 839              	.LCFI11:
 840              		.cfi_restore_state
 841              	.LBB101:
 782:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 842              		.loc 1 782 0
 843 004e 3046     		mov	r0, r6
 844              	.LVL74:
 845 0050 FFF7FEFF 		bl	vPortFree
 846              	.LVL75:
 847 0054 E6E7     		b	.L70
 848              	.LVL76:
 849              	.L71:
 850              	.LBE101:
 808:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 851              		.loc 1 808 0
 852 0056 4FF0FF30 		mov	r0, #-1
 853              	.LVL77:
 854 005a F5E7     		b	.L67
 855              	.LVL78:
 856              	.L72:
 857 005c 4FF0FF30 		mov	r0, #-1
 858              	.LVL79:
 811:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 859              		.loc 1 811 0
 860 0060 F2E7     		b	.L67
 861              		.cfi_endproc
 862              	.LFE5:
 864              		.section	.text.vTaskDelete,"ax",%progbits
 865              		.align	1
 866              		.global	vTaskDelete
 867              		.syntax unified
 868              		.thumb
 869              		.thumb_func
 870              		.fpu fpv4-sp-d16
 872              	vTaskDelete:
ARM GAS  /tmp/ccPN8tEQ.s 			page 109


 873              	.LFB8:
1107:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 874              		.loc 1 1107 0
 875              		.cfi_startproc
 876              		@ args = 0, pretend = 0, frame = 0
 877              		@ frame_needed = 0, uses_anonymous_args = 0
 878              	.LVL80:
 879 0000 38B5     		push	{r3, r4, r5, lr}
 880              	.LCFI12:
 881              		.cfi_def_cfa_offset 16
 882              		.cfi_offset 3, -16
 883              		.cfi_offset 4, -12
 884              		.cfi_offset 5, -8
 885              		.cfi_offset 14, -4
 886 0002 0446     		mov	r4, r0
1110:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 887              		.loc 1 1110 0
 888 0004 FFF7FEFF 		bl	vPortEnterCritical
 889              	.LVL81:
1114:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 890              		.loc 1 1114 0
 891 0008 002C     		cmp	r4, #0
 892 000a 34D0     		beq	.L84
 893              	.LVL82:
 894              	.L75:
1117:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 895              		.loc 1 1117 0 discriminator 4
 896 000c 251D     		adds	r5, r4, #4
 897 000e 2846     		mov	r0, r5
 898 0010 FFF7FEFF 		bl	uxListRemove
 899              	.LVL83:
 900 0014 70B9     		cbnz	r0, .L76
1119:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 901              		.loc 1 1119 0
 902 0016 E26A     		ldr	r2, [r4, #44]
 903 0018 02EB8201 		add	r1, r2, r2, lsl #2
 904 001c 8B00     		lsls	r3, r1, #2
 905 001e 2649     		ldr	r1, .L87
 906 0020 CB58     		ldr	r3, [r1, r3]
 907 0022 3BB9     		cbnz	r3, .L76
1119:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 908              		.loc 1 1119 0 is_stmt 0 discriminator 1
 909 0024 0123     		movs	r3, #1
 910 0026 03FA02F2 		lsl	r2, r3, r2
 911 002a 2449     		ldr	r1, .L87+4
 912 002c 0B68     		ldr	r3, [r1]
 913 002e 23EA0203 		bic	r3, r3, r2
 914 0032 0B60     		str	r3, [r1]
 915              	.L76:
1127:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 916              		.loc 1 1127 0 is_stmt 1
 917 0034 A36A     		ldr	r3, [r4, #40]
 918 0036 1BB1     		cbz	r3, .L77
1129:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 919              		.loc 1 1129 0
 920 0038 04F11800 		add	r0, r4, #24
 921 003c FFF7FEFF 		bl	uxListRemove
ARM GAS  /tmp/ccPN8tEQ.s 			page 110


 922              	.LVL84:
 923              	.L77:
1140:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 924              		.loc 1 1140 0
 925 0040 1F4A     		ldr	r2, .L87+8
 926 0042 1368     		ldr	r3, [r2]
 927 0044 0133     		adds	r3, r3, #1
 928 0046 1360     		str	r3, [r2]
1142:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 929              		.loc 1 1142 0
 930 0048 1E4B     		ldr	r3, .L87+12
 931 004a 1B68     		ldr	r3, [r3]
 932 004c A342     		cmp	r3, r4
 933 004e 15D0     		beq	.L85
1165:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
 934              		.loc 1 1165 0
 935 0050 1D4A     		ldr	r2, .L87+16
 936 0052 1368     		ldr	r3, [r2]
 937 0054 013B     		subs	r3, r3, #1
 938 0056 1360     		str	r3, [r2]
1166:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 939              		.loc 1 1166 0
 940 0058 2046     		mov	r0, r4
 941 005a FFF7FEFF 		bl	prvDeleteTCB
 942              	.LVL85:
1170:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 943              		.loc 1 1170 0
 944 005e FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 945              	.LVL86:
 946              	.L79:
1175:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 947              		.loc 1 1175 0
 948 0062 FFF7FEFF 		bl	vPortExitCritical
 949              	.LVL87:
1179:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 950              		.loc 1 1179 0
 951 0066 194B     		ldr	r3, .L87+20
 952 0068 1B68     		ldr	r3, [r3]
 953 006a 1BB1     		cbz	r3, .L74
1181:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 954              		.loc 1 1181 0
 955 006c 154B     		ldr	r3, .L87+12
 956 006e 1B68     		ldr	r3, [r3]
 957 0070 A342     		cmp	r3, r4
 958 0072 0CD0     		beq	.L86
 959              	.L74:
1191:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 960              		.loc 1 1191 0
 961 0074 38BD     		pop	{r3, r4, r5, pc}
 962              	.LVL88:
 963              	.L84:
1114:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 964              		.loc 1 1114 0 discriminator 1
 965 0076 134B     		ldr	r3, .L87+12
 966 0078 1C68     		ldr	r4, [r3]
 967              	.LVL89:
 968 007a C7E7     		b	.L75
ARM GAS  /tmp/ccPN8tEQ.s 			page 111


 969              	.LVL90:
 970              	.L85:
1149:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 971              		.loc 1 1149 0
 972 007c 2946     		mov	r1, r5
 973 007e 1448     		ldr	r0, .L87+24
 974 0080 FFF7FEFF 		bl	vListInsertEnd
 975              	.LVL91:
1154:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 976              		.loc 1 1154 0
 977 0084 134A     		ldr	r2, .L87+28
 978 0086 1368     		ldr	r3, [r2]
 979 0088 0133     		adds	r3, r3, #1
 980 008a 1360     		str	r3, [r2]
 981 008c E9E7     		b	.L79
 982              	.L86:
1183:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 983              		.loc 1 1183 0
 984 008e 124B     		ldr	r3, .L87+32
 985 0090 1B68     		ldr	r3, [r3]
 986 0092 43B1     		cbz	r3, .L81
 987              	.LBB102:
 988              	.LBB103:
 989              		.loc 2 195 0
 990              		.syntax unified
 991              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 992 0094 4FF01003 			mov r3, #16												
 993 0098 83F31188 		msr basepri, r3											
 994 009c BFF36F8F 		isb														
 995 00a0 BFF34F8F 		dsb														
 996              	
 997              	@ 0 "" 2
 998              	.LVL92:
 999              		.thumb
 1000              		.syntax unified
 1001              	.L82:
 1002 00a4 FEE7     		b	.L82
 1003              	.L81:
 1004              	.LBE103:
 1005              	.LBE102:
1184:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1006              		.loc 1 1184 0
 1007 00a6 0D4B     		ldr	r3, .L87+36
 1008 00a8 4FF08052 		mov	r2, #268435456
 1009 00ac 1A60     		str	r2, [r3]
 1010              		.syntax unified
 1011              	@ 1184 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1012 00ae BFF34F8F 		dsb
 1013              	@ 0 "" 2
 1014              	@ 1184 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1015 00b2 BFF36F8F 		isb
 1016              	@ 0 "" 2
1191:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1017              		.loc 1 1191 0
 1018              		.thumb
 1019              		.syntax unified
 1020 00b6 DDE7     		b	.L74
ARM GAS  /tmp/ccPN8tEQ.s 			page 112


 1021              	.L88:
 1022              		.align	2
 1023              	.L87:
 1024 00b8 00000000 		.word	.LANCHOR4
 1025 00bc 00000000 		.word	.LANCHOR13
 1026 00c0 00000000 		.word	.LANCHOR12
 1027 00c4 00000000 		.word	.LANCHOR10
 1028 00c8 00000000 		.word	.LANCHOR9
 1029 00cc 00000000 		.word	.LANCHOR11
 1030 00d0 00000000 		.word	.LANCHOR7
 1031 00d4 00000000 		.word	.LANCHOR14
 1032 00d8 00000000 		.word	.LANCHOR16
 1033 00dc 04ED00E0 		.word	-536810236
 1034              		.cfi_endproc
 1035              	.LFE8:
 1037              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 1038              		.align	1
 1039              		.global	uxTaskPriorityGet
 1040              		.syntax unified
 1041              		.thumb
 1042              		.thumb_func
 1043              		.fpu fpv4-sp-d16
 1045              	uxTaskPriorityGet:
 1046              	.LFB10:
1399:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1047              		.loc 1 1399 0
 1048              		.cfi_startproc
 1049              		@ args = 0, pretend = 0, frame = 0
 1050              		@ frame_needed = 0, uses_anonymous_args = 0
 1051              	.LVL93:
 1052 0000 10B5     		push	{r4, lr}
 1053              	.LCFI13:
 1054              		.cfi_def_cfa_offset 8
 1055              		.cfi_offset 4, -8
 1056              		.cfi_offset 14, -4
 1057 0002 0446     		mov	r4, r0
1403:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1058              		.loc 1 1403 0
 1059 0004 FFF7FEFF 		bl	vPortEnterCritical
 1060              	.LVL94:
1407:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1061              		.loc 1 1407 0
 1062 0008 24B1     		cbz	r4, .L92
 1063              	.LVL95:
 1064              	.L90:
1408:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1065              		.loc 1 1408 0 discriminator 4
 1066 000a E46A     		ldr	r4, [r4, #44]
 1067              	.LVL96:
1410:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1068              		.loc 1 1410 0 discriminator 4
 1069 000c FFF7FEFF 		bl	vPortExitCritical
 1070              	.LVL97:
1413:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1071              		.loc 1 1413 0 discriminator 4
 1072 0010 2046     		mov	r0, r4
 1073 0012 10BD     		pop	{r4, pc}
ARM GAS  /tmp/ccPN8tEQ.s 			page 113


 1074              	.LVL98:
 1075              	.L92:
1407:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1076              		.loc 1 1407 0 discriminator 1
 1077 0014 014B     		ldr	r3, .L93
 1078 0016 1C68     		ldr	r4, [r3]
 1079              	.LVL99:
 1080 0018 F7E7     		b	.L90
 1081              	.L94:
 1082 001a 00BF     		.align	2
 1083              	.L93:
 1084 001c 00000000 		.word	.LANCHOR10
 1085              		.cfi_endproc
 1086              	.LFE10:
 1088              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 1089              		.align	1
 1090              		.global	uxTaskPriorityGetFromISR
 1091              		.syntax unified
 1092              		.thumb
 1093              		.thumb_func
 1094              		.fpu fpv4-sp-d16
 1096              	uxTaskPriorityGetFromISR:
 1097              	.LFB11:
1421:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1098              		.loc 1 1421 0
 1099              		.cfi_startproc
 1100              		@ args = 0, pretend = 0, frame = 0
 1101              		@ frame_needed = 0, uses_anonymous_args = 0
 1102              	.LVL100:
 1103 0000 10B5     		push	{r4, lr}
 1104              	.LCFI14:
 1105              		.cfi_def_cfa_offset 8
 1106              		.cfi_offset 4, -8
 1107              		.cfi_offset 14, -4
 1108 0002 0446     		mov	r4, r0
1441:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1109              		.loc 1 1441 0
 1110 0004 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1111              	.LVL101:
 1112              	.LBB104:
 1113              	.LBB105:
 196:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 197:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %0, %1												\n"	\
 198:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0											\n" \
 199:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 200:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 201:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 202:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 203:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 204:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 205:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 206:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 207:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 208:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 209:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 210:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 211:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
ARM GAS  /tmp/ccPN8tEQ.s 			page 114


 1114              		.loc 2 211 0
 1115              		.syntax unified
 1116              	@ 211 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1117 0008 EFF31183 			mrs r3, basepri											
 1118 000c 4FF01002 		mov r2, #16												
 1119 0010 82F31188 		msr basepri, r2											
 1120 0014 BFF36F8F 		isb														
 1121 0018 BFF34F8F 		dsb														
 1122              	
 1123              	@ 0 "" 2
 1124              		.thumb
 1125              		.syntax unified
 1126              	.LBE105:
 1127              	.LBE104:
1447:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1128              		.loc 1 1447 0
 1129 001c 1CB1     		cbz	r4, .L98
 1130              	.LVL102:
 1131              	.L96:
1448:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1132              		.loc 1 1448 0 discriminator 4
 1133 001e E06A     		ldr	r0, [r4, #44]
 1134              	.LVL103:
 1135              	.LBB106:
 1136              	.LBB107:
 212:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 213:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mrs %0, basepri											\n" \
 214:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %1, %2												\n"	\
 215:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %1											\n" \
 216:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 217:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 218:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 219:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 220:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 221:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 222:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	warnings. */
 223:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return ulOriginalBASEPRI;
 224:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 225:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 226:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 227:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 228:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 229:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1137              		.loc 2 229 0 discriminator 4
 1138              		.syntax unified
 1139              	@ 229 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1140 0020 83F31188 			msr basepri, r3	
 1141              	@ 0 "" 2
 1142              	.LVL104:
 1143              		.thumb
 1144              		.syntax unified
 1145              	.LBE107:
 1146              	.LBE106:
1453:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1147              		.loc 1 1453 0 discriminator 4
 1148 0024 10BD     		pop	{r4, pc}
 1149              	.LVL105:
ARM GAS  /tmp/ccPN8tEQ.s 			page 115


 1150              	.L98:
1447:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1151              		.loc 1 1447 0 discriminator 1
 1152 0026 014A     		ldr	r2, .L99
 1153 0028 1468     		ldr	r4, [r2]
 1154              	.LVL106:
 1155 002a F8E7     		b	.L96
 1156              	.L100:
 1157              		.align	2
 1158              	.L99:
 1159 002c 00000000 		.word	.LANCHOR10
 1160              		.cfi_endproc
 1161              	.LFE11:
 1163              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1164              		.align	1
 1165              		.global	vTaskPrioritySet
 1166              		.syntax unified
 1167              		.thumb
 1168              		.thumb_func
 1169              		.fpu fpv4-sp-d16
 1171              	vTaskPrioritySet:
 1172              	.LFB12:
1461:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1173              		.loc 1 1461 0
 1174              		.cfi_startproc
 1175              		@ args = 0, pretend = 0, frame = 0
 1176              		@ frame_needed = 0, uses_anonymous_args = 0
 1177              	.LVL107:
 1178 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1179              	.LCFI15:
 1180              		.cfi_def_cfa_offset 24
 1181              		.cfi_offset 3, -24
 1182              		.cfi_offset 4, -20
 1183              		.cfi_offset 5, -16
 1184              		.cfi_offset 6, -12
 1185              		.cfi_offset 7, -8
 1186              		.cfi_offset 14, -4
 1187              	.LVL108:
1466:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1188              		.loc 1 1466 0
 1189 0002 0629     		cmp	r1, #6
 1190 0004 08D9     		bls	.L102
 1191              	.LBB108:
 1192              	.LBB109:
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1193              		.loc 2 195 0
 1194              		.syntax unified
 1195              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1196 0006 4FF01003 			mov r3, #16												
 1197 000a 83F31188 		msr basepri, r3											
 1198 000e BFF36F8F 		isb														
 1199 0012 BFF34F8F 		dsb														
 1200              	
 1201              	@ 0 "" 2
 1202              	.LVL109:
 1203              		.thumb
 1204              		.syntax unified
ARM GAS  /tmp/ccPN8tEQ.s 			page 116


 1205              	.L103:
 1206 0016 FEE7     		b	.L103
 1207              	.L102:
 1208 0018 0446     		mov	r4, r0
 1209 001a 0D46     		mov	r5, r1
 1210              	.LVL110:
 1211              	.LBE109:
 1212              	.LBE108:
1478:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1213              		.loc 1 1478 0
 1214 001c FFF7FEFF 		bl	vPortEnterCritical
 1215              	.LVL111:
1482:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1216              		.loc 1 1482 0
 1217 0020 0CB9     		cbnz	r4, .L104
1482:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1218              		.loc 1 1482 0 is_stmt 0 discriminator 1
 1219 0022 2A4B     		ldr	r3, .L116
 1220 0024 1C68     		ldr	r4, [r3]
 1221              	.LVL112:
 1222              	.L104:
1488:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1223              		.loc 1 1488 0 is_stmt 1 discriminator 4
 1224 0026 636C     		ldr	r3, [r4, #68]
 1225              	.LVL113:
1496:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1226              		.loc 1 1496 0 discriminator 4
 1227 0028 9D42     		cmp	r5, r3
 1228 002a 40D0     		beq	.L105
1500:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1229              		.loc 1 1500 0
 1230 002c 42D9     		bls	.L106
1502:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1231              		.loc 1 1502 0
 1232 002e 274A     		ldr	r2, .L116
 1233 0030 1268     		ldr	r2, [r2]
 1234 0032 A242     		cmp	r2, r4
 1235 0034 44D0     		beq	.L112
1507:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 1236              		.loc 1 1507 0
 1237 0036 254A     		ldr	r2, .L116
 1238 0038 1268     		ldr	r2, [r2]
 1239 003a D26A     		ldr	r2, [r2, #44]
 1240 003c AA42     		cmp	r2, r5
 1241 003e 41D9     		bls	.L113
1464:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1242              		.loc 1 1464 0
 1243 0040 0026     		movs	r6, #0
 1244              	.L107:
 1245              	.LVL114:
1540:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1246              		.loc 1 1540 0
 1247 0042 E76A     		ldr	r7, [r4, #44]
 1248              	.LVL115:
1546:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1249              		.loc 1 1546 0
 1250 0044 BB42     		cmp	r3, r7
ARM GAS  /tmp/ccPN8tEQ.s 			page 117


 1251 0046 00D1     		bne	.L108
1548:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1252              		.loc 1 1548 0
 1253 0048 E562     		str	r5, [r4, #44]
 1254              	.L108:
1556:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1255              		.loc 1 1556 0
 1256 004a 6564     		str	r5, [r4, #68]
1566:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1257              		.loc 1 1566 0
 1258 004c A369     		ldr	r3, [r4, #24]
 1259              	.LVL116:
 1260 004e 002B     		cmp	r3, #0
 1261 0050 02DB     		blt	.L109
1568:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1262              		.loc 1 1568 0
 1263 0052 C5F10705 		rsb	r5, r5, #7
 1264              	.LVL117:
 1265 0056 A561     		str	r5, [r4, #24]
 1266              	.L109:
1579:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1267              		.loc 1 1579 0
 1268 0058 6269     		ldr	r2, [r4, #20]
 1269 005a 1D49     		ldr	r1, .L116+4
 1270 005c 1423     		movs	r3, #20
 1271 005e 03FB0713 		mla	r3, r3, r7, r1
 1272 0062 9A42     		cmp	r2, r3
 1273 0064 1AD1     		bne	.L110
1584:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1274              		.loc 1 1584 0
 1275 0066 251D     		adds	r5, r4, #4
 1276 0068 2846     		mov	r0, r5
 1277 006a FFF7FEFF 		bl	uxListRemove
 1278              	.LVL118:
 1279 006e 38B9     		cbnz	r0, .L111
1589:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1280              		.loc 1 1589 0
 1281 0070 0123     		movs	r3, #1
 1282 0072 03FA07F2 		lsl	r2, r3, r7
 1283 0076 1749     		ldr	r1, .L116+8
 1284 0078 0B68     		ldr	r3, [r1]
 1285 007a 23EA0203 		bic	r3, r3, r2
 1286 007e 0B60     		str	r3, [r1]
 1287              	.L111:
1595:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1288              		.loc 1 1595 0
 1289 0080 E26A     		ldr	r2, [r4, #44]
 1290 0082 0123     		movs	r3, #1
 1291 0084 9340     		lsls	r3, r3, r2
 1292 0086 1349     		ldr	r1, .L116+8
 1293 0088 0868     		ldr	r0, [r1]
 1294 008a 0343     		orrs	r3, r3, r0
 1295 008c 0B60     		str	r3, [r1]
 1296 008e 2946     		mov	r1, r5
 1297 0090 0F4B     		ldr	r3, .L116+4
 1298 0092 1420     		movs	r0, #20
 1299 0094 00FB0230 		mla	r0, r0, r2, r3
ARM GAS  /tmp/ccPN8tEQ.s 			page 118


 1300 0098 FFF7FEFF 		bl	vListInsertEnd
 1301              	.LVL119:
 1302              	.L110:
1602:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1303              		.loc 1 1602 0
 1304 009c 3EB1     		cbz	r6, .L105
1604:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1305              		.loc 1 1604 0
 1306 009e 0E4B     		ldr	r3, .L116+12
 1307 00a0 4FF08052 		mov	r2, #268435456
 1308 00a4 1A60     		str	r2, [r3]
 1309              		.syntax unified
 1310              	@ 1604 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1311 00a6 BFF34F8F 		dsb
 1312              	@ 0 "" 2
 1313              	@ 1604 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1314 00aa BFF36F8F 		isb
 1315              	@ 0 "" 2
 1316              	.LVL120:
 1317              		.thumb
 1318              		.syntax unified
 1319              	.L105:
1616:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1320              		.loc 1 1616 0
 1321 00ae FFF7FEFF 		bl	vPortExitCritical
 1322              	.LVL121:
1617:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1323              		.loc 1 1617 0
 1324 00b2 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1325              	.LVL122:
 1326              	.L106:
1523:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1327              		.loc 1 1523 0
 1328 00b4 054A     		ldr	r2, .L116
 1329 00b6 1268     		ldr	r2, [r2]
 1330 00b8 A242     		cmp	r2, r4
 1331 00ba 05D0     		beq	.L114
1464:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1332              		.loc 1 1464 0
 1333 00bc 0026     		movs	r6, #0
 1334 00be C0E7     		b	.L107
 1335              	.L112:
 1336 00c0 0026     		movs	r6, #0
 1337 00c2 BEE7     		b	.L107
 1338              	.L113:
1509:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
 1339              		.loc 1 1509 0
 1340 00c4 0126     		movs	r6, #1
 1341 00c6 BCE7     		b	.L107
 1342              	.L114:
1528:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1343              		.loc 1 1528 0
 1344 00c8 0126     		movs	r6, #1
 1345 00ca BAE7     		b	.L107
 1346              	.L117:
 1347              		.align	2
 1348              	.L116:
ARM GAS  /tmp/ccPN8tEQ.s 			page 119


 1349 00cc 00000000 		.word	.LANCHOR10
 1350 00d0 00000000 		.word	.LANCHOR4
 1351 00d4 00000000 		.word	.LANCHOR13
 1352 00d8 04ED00E0 		.word	-536810236
 1353              		.cfi_endproc
 1354              	.LFE12:
 1356              		.section	.text.vTaskResume,"ax",%progbits
 1357              		.align	1
 1358              		.global	vTaskResume
 1359              		.syntax unified
 1360              		.thumb
 1361              		.thumb_func
 1362              		.fpu fpv4-sp-d16
 1364              	vTaskResume:
 1365              	.LFB15:
1772:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1366              		.loc 1 1772 0
 1367              		.cfi_startproc
 1368              		@ args = 0, pretend = 0, frame = 0
 1369              		@ frame_needed = 0, uses_anonymous_args = 0
 1370              	.LVL123:
 1371 0000 38B5     		push	{r3, r4, r5, lr}
 1372              	.LCFI16:
 1373              		.cfi_def_cfa_offset 16
 1374              		.cfi_offset 3, -16
 1375              		.cfi_offset 4, -12
 1376              		.cfi_offset 5, -8
 1377              		.cfi_offset 14, -4
 1378              	.LVL124:
1776:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1379              		.loc 1 1776 0
 1380 0002 68B1     		cbz	r0, .L124
 1381 0004 0446     		mov	r4, r0
1780:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1382              		.loc 1 1780 0 discriminator 1
 1383 0006 1B4B     		ldr	r3, .L126
 1384 0008 1B68     		ldr	r3, [r3]
 1385 000a 8342     		cmp	r3, r0
 1386 000c 07D0     		beq	.L118
1782:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1387              		.loc 1 1782 0
 1388 000e FFF7FEFF 		bl	vPortEnterCritical
 1389              	.LVL125:
1784:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1390              		.loc 1 1784 0
 1391 0012 2046     		mov	r0, r4
 1392 0014 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1393              	.LVL126:
 1394 0018 58B9     		cbnz	r0, .L125
 1395              	.L122:
1811:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1396              		.loc 1 1811 0
 1397 001a FFF7FEFF 		bl	vPortExitCritical
 1398              	.LVL127:
 1399              	.L118:
1817:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1400              		.loc 1 1817 0
ARM GAS  /tmp/ccPN8tEQ.s 			page 120


 1401 001e 38BD     		pop	{r3, r4, r5, pc}
 1402              	.LVL128:
 1403              	.L124:
 1404              	.LBB110:
 1405              	.LBB111:
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1406              		.loc 2 195 0
 1407              		.syntax unified
 1408              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1409 0020 4FF01003 			mov r3, #16												
 1410 0024 83F31188 		msr basepri, r3											
 1411 0028 BFF36F8F 		isb														
 1412 002c BFF34F8F 		dsb														
 1413              	
 1414              	@ 0 "" 2
 1415              	.LVL129:
 1416              		.thumb
 1417              		.syntax unified
 1418              	.L120:
 1419 0030 FEE7     		b	.L120
 1420              	.LVL130:
 1421              	.L125:
 1422              	.LBE111:
 1423              	.LBE110:
1790:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1424              		.loc 1 1790 0
 1425 0032 251D     		adds	r5, r4, #4
 1426 0034 2846     		mov	r0, r5
 1427 0036 FFF7FEFF 		bl	uxListRemove
 1428              	.LVL131:
1791:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1429              		.loc 1 1791 0
 1430 003a E26A     		ldr	r2, [r4, #44]
 1431 003c 0123     		movs	r3, #1
 1432 003e 9340     		lsls	r3, r3, r2
 1433 0040 0D49     		ldr	r1, .L126+4
 1434 0042 0868     		ldr	r0, [r1]
 1435 0044 0343     		orrs	r3, r3, r0
 1436 0046 0B60     		str	r3, [r1]
 1437 0048 2946     		mov	r1, r5
 1438 004a 0C4B     		ldr	r3, .L126+8
 1439 004c 1420     		movs	r0, #20
 1440 004e 00FB0230 		mla	r0, r0, r2, r3
 1441 0052 FFF7FEFF 		bl	vListInsertEnd
 1442              	.LVL132:
1794:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1443              		.loc 1 1794 0
 1444 0056 E26A     		ldr	r2, [r4, #44]
 1445 0058 064B     		ldr	r3, .L126
 1446 005a 1B68     		ldr	r3, [r3]
 1447 005c DB6A     		ldr	r3, [r3, #44]
 1448 005e 9A42     		cmp	r2, r3
 1449 0060 DBD3     		bcc	.L122
1799:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1450              		.loc 1 1799 0
 1451 0062 074B     		ldr	r3, .L126+12
 1452 0064 4FF08052 		mov	r2, #268435456
ARM GAS  /tmp/ccPN8tEQ.s 			page 121


 1453 0068 1A60     		str	r2, [r3]
 1454              		.syntax unified
 1455              	@ 1799 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1456 006a BFF34F8F 		dsb
 1457              	@ 0 "" 2
 1458              	@ 1799 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1459 006e BFF36F8F 		isb
 1460              	@ 0 "" 2
 1461              		.thumb
 1462              		.syntax unified
 1463 0072 D2E7     		b	.L122
 1464              	.L127:
 1465              		.align	2
 1466              	.L126:
 1467 0074 00000000 		.word	.LANCHOR10
 1468 0078 00000000 		.word	.LANCHOR13
 1469 007c 00000000 		.word	.LANCHOR4
 1470 0080 04ED00E0 		.word	-536810236
 1471              		.cfi_endproc
 1472              	.LFE15:
 1474              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 1475              		.align	1
 1476              		.global	xTaskResumeFromISR
 1477              		.syntax unified
 1478              		.thumb
 1479              		.thumb_func
 1480              		.fpu fpv4-sp-d16
 1482              	xTaskResumeFromISR:
 1483              	.LFB16:
1826:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1484              		.loc 1 1826 0
 1485              		.cfi_startproc
 1486              		@ args = 0, pretend = 0, frame = 0
 1487              		@ frame_needed = 0, uses_anonymous_args = 0
 1488              	.LVL133:
 1489 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1490              	.LCFI17:
 1491              		.cfi_def_cfa_offset 24
 1492              		.cfi_offset 3, -24
 1493              		.cfi_offset 4, -20
 1494              		.cfi_offset 5, -16
 1495              		.cfi_offset 6, -12
 1496              		.cfi_offset 7, -8
 1497              		.cfi_offset 14, -4
 1498              	.LVL134:
1831:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1499              		.loc 1 1831 0
 1500 0002 40B9     		cbnz	r0, .L129
 1501              	.LBB112:
 1502              	.LBB113:
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1503              		.loc 2 195 0
 1504              		.syntax unified
 1505              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1506 0004 4FF01003 			mov r3, #16												
 1507 0008 83F31188 		msr basepri, r3											
 1508 000c BFF36F8F 		isb														
ARM GAS  /tmp/ccPN8tEQ.s 			page 122


 1509 0010 BFF34F8F 		dsb														
 1510              	
 1511              	@ 0 "" 2
 1512              	.LVL135:
 1513              		.thumb
 1514              		.syntax unified
 1515              	.L130:
 1516 0014 FEE7     		b	.L130
 1517              	.L129:
 1518 0016 0446     		mov	r4, r0
 1519              	.LBE113:
 1520              	.LBE112:
1849:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1521              		.loc 1 1849 0
 1522 0018 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1523              	.LVL136:
 1524              	.LBB114:
 1525              	.LBB115:
 211:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1526              		.loc 2 211 0
 1527              		.syntax unified
 1528              	@ 211 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1529 001c EFF31187 			mrs r7, basepri											
 1530 0020 4FF01003 		mov r3, #16												
 1531 0024 83F31188 		msr basepri, r3											
 1532 0028 BFF36F8F 		isb														
 1533 002c BFF34F8F 		dsb														
 1534              	
 1535              	@ 0 "" 2
 1536              		.thumb
 1537              		.syntax unified
 1538              	.LBE115:
 1539              	.LBE114:
1853:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1540              		.loc 1 1853 0
 1541 0030 2046     		mov	r0, r4
 1542 0032 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1543              	.LVL137:
 1544 0036 40B3     		cbz	r0, .L134
1858:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1545              		.loc 1 1858 0
 1546 0038 154B     		ldr	r3, .L137
 1547 003a 1B68     		ldr	r3, [r3]
 1548 003c F3B9     		cbnz	r3, .L132
1862:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1549              		.loc 1 1862 0
 1550 003e E26A     		ldr	r2, [r4, #44]
 1551 0040 144B     		ldr	r3, .L137+4
 1552 0042 1B68     		ldr	r3, [r3]
 1553 0044 DB6A     		ldr	r3, [r3, #44]
 1554 0046 9A42     		cmp	r2, r3
 1555 0048 16D2     		bcs	.L135
1827:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1556              		.loc 1 1827 0
 1557 004a 0025     		movs	r5, #0
 1558              	.L133:
 1559              	.LVL138:
ARM GAS  /tmp/ccPN8tEQ.s 			page 123


1871:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1560              		.loc 1 1871 0
 1561 004c 261D     		adds	r6, r4, #4
 1562 004e 3046     		mov	r0, r6
 1563 0050 FFF7FEFF 		bl	uxListRemove
 1564              	.LVL139:
1872:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1565              		.loc 1 1872 0
 1566 0054 E26A     		ldr	r2, [r4, #44]
 1567 0056 0123     		movs	r3, #1
 1568 0058 9340     		lsls	r3, r3, r2
 1569 005a 0F49     		ldr	r1, .L137+8
 1570 005c 0868     		ldr	r0, [r1]
 1571 005e 0343     		orrs	r3, r3, r0
 1572 0060 0B60     		str	r3, [r1]
 1573 0062 3146     		mov	r1, r6
 1574 0064 0D4B     		ldr	r3, .L137+12
 1575 0066 1420     		movs	r0, #20
 1576 0068 00FB0230 		mla	r0, r0, r2, r3
 1577 006c FFF7FEFF 		bl	vListInsertEnd
 1578              	.LVL140:
 1579              	.L131:
 1580              	.LBB116:
 1581              	.LBB117:
 1582              		.loc 2 229 0
 1583              		.syntax unified
 1584              	@ 229 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1585 0070 87F31188 			msr basepri, r7	
 1586              	@ 0 "" 2
 1587              	.LVL141:
 1588              		.thumb
 1589              		.syntax unified
 1590              	.LBE117:
 1591              	.LBE116:
1890:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1592              		.loc 1 1890 0
 1593 0074 2846     		mov	r0, r5
 1594 0076 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1595              	.LVL142:
 1596              	.L135:
1864:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1597              		.loc 1 1864 0
 1598 0078 0125     		movs	r5, #1
 1599 007a E7E7     		b	.L133
 1600              	.L132:
1879:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1601              		.loc 1 1879 0
 1602 007c 04F11801 		add	r1, r4, #24
 1603 0080 0748     		ldr	r0, .L137+16
 1604 0082 FFF7FEFF 		bl	vListInsertEnd
 1605              	.LVL143:
1827:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1606              		.loc 1 1827 0
 1607 0086 0025     		movs	r5, #0
 1608 0088 F2E7     		b	.L131
 1609              	.L134:
 1610 008a 0025     		movs	r5, #0
ARM GAS  /tmp/ccPN8tEQ.s 			page 124


 1611 008c F0E7     		b	.L131
 1612              	.L138:
 1613 008e 00BF     		.align	2
 1614              	.L137:
 1615 0090 00000000 		.word	.LANCHOR16
 1616 0094 00000000 		.word	.LANCHOR10
 1617 0098 00000000 		.word	.LANCHOR13
 1618 009c 00000000 		.word	.LANCHOR4
 1619 00a0 00000000 		.word	.LANCHOR1
 1620              		.cfi_endproc
 1621              	.LFE16:
 1623              		.section	.text.vTaskStartScheduler,"ax",%progbits
 1624              		.align	1
 1625              		.global	vTaskStartScheduler
 1626              		.syntax unified
 1627              		.thumb
 1628              		.thumb_func
 1629              		.fpu fpv4-sp-d16
 1631              	vTaskStartScheduler:
 1632              	.LFB17:
1896:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
 1633              		.loc 1 1896 0
 1634              		.cfi_startproc
 1635              		@ args = 0, pretend = 0, frame = 0
 1636              		@ frame_needed = 0, uses_anonymous_args = 0
 1637 0000 00B5     		push	{lr}
 1638              	.LCFI18:
 1639              		.cfi_def_cfa_offset 4
 1640              		.cfi_offset 14, -4
 1641 0002 83B0     		sub	sp, sp, #12
 1642              	.LCFI19:
 1643              		.cfi_def_cfa_offset 16
1929:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								configIDLE_TASK_NAME,
 1644              		.loc 1 1929 0
 1645 0004 194B     		ldr	r3, .L148
 1646 0006 0193     		str	r3, [sp, #4]
 1647 0008 0023     		movs	r3, #0
 1648 000a 0093     		str	r3, [sp]
 1649 000c 8022     		movs	r2, #128
 1650 000e 1849     		ldr	r1, .L148+4
 1651 0010 1848     		ldr	r0, .L148+8
 1652 0012 FFF7FEFF 		bl	xTaskCreate
 1653              	.LVL144:
1940:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1654              		.loc 1 1940 0
 1655 0016 0128     		cmp	r0, #1
 1656 0018 07D0     		beq	.L145
 1657              	.L140:
1951:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1658              		.loc 1 1951 0
 1659 001a 0128     		cmp	r0, #1
 1660 001c 08D0     		beq	.L146
2006:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1661              		.loc 1 2006 0
 1662 001e B0F1FF3F 		cmp	r0, #-1
 1663 0022 1AD0     		beq	.L147
 1664              	.LVL145:
ARM GAS  /tmp/ccPN8tEQ.s 			page 125


 1665              	.L139:
2012:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 1666              		.loc 1 2012 0
 1667 0024 03B0     		add	sp, sp, #12
 1668              	.LCFI20:
 1669              		.cfi_remember_state
 1670              		.cfi_def_cfa_offset 4
 1671              		@ sp needed
 1672 0026 5DF804FB 		ldr	pc, [sp], #4
 1673              	.LVL146:
 1674              	.L145:
 1675              	.LCFI21:
 1676              		.cfi_restore_state
1942:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1677              		.loc 1 1942 0
 1678 002a FFF7FEFF 		bl	xTimerCreateTimerTask
 1679              	.LVL147:
 1680 002e F4E7     		b	.L140
 1681              	.L146:
 1682              	.LBB118:
 1683              	.LBB119:
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1684              		.loc 2 195 0
 1685              		.syntax unified
 1686              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1687 0030 4FF01003 			mov r3, #16												
 1688 0034 83F31188 		msr basepri, r3											
 1689 0038 BFF36F8F 		isb														
 1690 003c BFF34F8F 		dsb														
 1691              	
 1692              	@ 0 "" 2
 1693              		.thumb
 1694              		.syntax unified
 1695              	.LBE119:
 1696              	.LBE118:
1977:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
 1697              		.loc 1 1977 0
 1698 0040 0D4B     		ldr	r3, .L148+12
 1699 0042 4FF0FF32 		mov	r2, #-1
 1700 0046 1A60     		str	r2, [r3]
1978:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
 1701              		.loc 1 1978 0
 1702 0048 0C4B     		ldr	r3, .L148+16
 1703 004a 0122     		movs	r2, #1
 1704 004c 1A60     		str	r2, [r3]
1979:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1705              		.loc 1 1979 0
 1706 004e 0C4B     		ldr	r3, .L148+20
 1707 0050 0022     		movs	r2, #0
 1708 0052 1A60     		str	r2, [r3]
1991:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1709              		.loc 1 1991 0
 1710 0054 FFF7FEFF 		bl	xPortStartScheduler
 1711              	.LVL148:
 1712 0058 E4E7     		b	.L139
 1713              	.LVL149:
 1714              	.L147:
ARM GAS  /tmp/ccPN8tEQ.s 			page 126


 1715              	.LBB120:
 1716              	.LBB121:
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1717              		.loc 2 195 0
 1718              		.syntax unified
 1719              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1720 005a 4FF01003 			mov r3, #16												
 1721 005e 83F31188 		msr basepri, r3											
 1722 0062 BFF36F8F 		isb														
 1723 0066 BFF34F8F 		dsb														
 1724              	
 1725              	@ 0 "" 2
 1726              	.LVL150:
 1727              		.thumb
 1728              		.syntax unified
 1729              	.L143:
 1730 006a FEE7     		b	.L143
 1731              	.L149:
 1732              		.align	2
 1733              	.L148:
 1734 006c 00000000 		.word	.LANCHOR17
 1735 0070 00000000 		.word	.LC0
 1736 0074 00000000 		.word	prvIdleTask
 1737 0078 00000000 		.word	.LANCHOR3
 1738 007c 00000000 		.word	.LANCHOR11
 1739 0080 00000000 		.word	.LANCHOR15
 1740              	.LBE121:
 1741              	.LBE120:
 1742              		.cfi_endproc
 1743              	.LFE17:
 1745              		.section	.text.vTaskEndScheduler,"ax",%progbits
 1746              		.align	1
 1747              		.global	vTaskEndScheduler
 1748              		.syntax unified
 1749              		.thumb
 1750              		.thumb_func
 1751              		.fpu fpv4-sp-d16
 1753              	vTaskEndScheduler:
 1754              	.LFB18:
2016:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
 1755              		.loc 1 2016 0
 1756              		.cfi_startproc
 1757              		@ args = 0, pretend = 0, frame = 0
 1758              		@ frame_needed = 0, uses_anonymous_args = 0
 1759 0000 08B5     		push	{r3, lr}
 1760              	.LCFI22:
 1761              		.cfi_def_cfa_offset 8
 1762              		.cfi_offset 3, -8
 1763              		.cfi_offset 14, -4
 1764              	.LBB122:
 1765              	.LBB123:
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1766              		.loc 2 195 0
 1767              		.syntax unified
 1768              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1769 0002 4FF01003 			mov r3, #16												
 1770 0006 83F31188 		msr basepri, r3											
ARM GAS  /tmp/ccPN8tEQ.s 			page 127


 1771 000a BFF36F8F 		isb														
 1772 000e BFF34F8F 		dsb														
 1773              	
 1774              	@ 0 "" 2
 1775              		.thumb
 1776              		.syntax unified
 1777              	.LBE123:
 1778              	.LBE122:
2021:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
 1779              		.loc 1 2021 0
 1780 0012 034B     		ldr	r3, .L152
 1781 0014 0022     		movs	r2, #0
 1782 0016 1A60     		str	r2, [r3]
2022:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 1783              		.loc 1 2022 0
 1784 0018 FFF7FEFF 		bl	vPortEndScheduler
 1785              	.LVL151:
2023:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
 1786              		.loc 1 2023 0
 1787 001c 08BD     		pop	{r3, pc}
 1788              	.L153:
 1789 001e 00BF     		.align	2
 1790              	.L152:
 1791 0020 00000000 		.word	.LANCHOR11
 1792              		.cfi_endproc
 1793              	.LFE18:
 1795              		.section	.text.vTaskSuspendAll,"ax",%progbits
 1796              		.align	1
 1797              		.global	vTaskSuspendAll
 1798              		.syntax unified
 1799              		.thumb
 1800              		.thumb_func
 1801              		.fpu fpv4-sp-d16
 1803              	vTaskSuspendAll:
 1804              	.LFB19:
2027:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
 1805              		.loc 1 2027 0
 1806              		.cfi_startproc
 1807              		@ args = 0, pretend = 0, frame = 0
 1808              		@ frame_needed = 0, uses_anonymous_args = 0
 1809              		@ link register save eliminated.
2032:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 1810              		.loc 1 2032 0
 1811 0000 024A     		ldr	r2, .L155
 1812 0002 1368     		ldr	r3, [r2]
 1813 0004 0133     		adds	r3, r3, #1
 1814 0006 1360     		str	r3, [r2]
2033:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
 1815              		.loc 1 2033 0
 1816 0008 7047     		bx	lr
 1817              	.L156:
 1818 000a 00BF     		.align	2
 1819              	.L155:
 1820 000c 00000000 		.word	.LANCHOR16
 1821              		.cfi_endproc
 1822              	.LFE19:
 1824              		.section	.text.xTaskGetTickCount,"ax",%progbits
ARM GAS  /tmp/ccPN8tEQ.s 			page 128


 1825              		.align	1
 1826              		.global	xTaskGetTickCount
 1827              		.syntax unified
 1828              		.thumb
 1829              		.thumb_func
 1830              		.fpu fpv4-sp-d16
 1832              	xTaskGetTickCount:
 1833              	.LFB21:
2210:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTicks;
 1834              		.loc 1 2210 0
 1835              		.cfi_startproc
 1836              		@ args = 0, pretend = 0, frame = 0
 1837              		@ frame_needed = 0, uses_anonymous_args = 0
 1838              		@ link register save eliminated.
2216:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1839              		.loc 1 2216 0
 1840 0000 014B     		ldr	r3, .L158
 1841 0002 1868     		ldr	r0, [r3]
 1842              	.LVL152:
2221:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 1843              		.loc 1 2221 0
 1844 0004 7047     		bx	lr
 1845              	.L159:
 1846 0006 00BF     		.align	2
 1847              	.L158:
 1848 0008 00000000 		.word	.LANCHOR15
 1849              		.cfi_endproc
 1850              	.LFE21:
 1852              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 1853              		.align	1
 1854              		.global	xTaskGetTickCountFromISR
 1855              		.syntax unified
 1856              		.thumb
 1857              		.thumb_func
 1858              		.fpu fpv4-sp-d16
 1860              	xTaskGetTickCountFromISR:
 1861              	.LFB22:
2225:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xReturn;
 1862              		.loc 1 2225 0
 1863              		.cfi_startproc
 1864              		@ args = 0, pretend = 0, frame = 0
 1865              		@ frame_needed = 0, uses_anonymous_args = 0
 1866 0000 08B5     		push	{r3, lr}
 1867              	.LCFI23:
 1868              		.cfi_def_cfa_offset 8
 1869              		.cfi_offset 3, -8
 1870              		.cfi_offset 14, -4
2243:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1871              		.loc 1 2243 0
 1872 0002 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1873              	.LVL153:
2247:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1874              		.loc 1 2247 0
 1875 0006 014B     		ldr	r3, .L162
 1876 0008 1868     		ldr	r0, [r3]
 1877              	.LVL154:
2252:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/ccPN8tEQ.s 			page 129


 1878              		.loc 1 2252 0
 1879 000a 08BD     		pop	{r3, pc}
 1880              	.L163:
 1881              		.align	2
 1882              	.L162:
 1883 000c 00000000 		.word	.LANCHOR15
 1884              		.cfi_endproc
 1885              	.LFE22:
 1887              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 1888              		.align	1
 1889              		.global	uxTaskGetNumberOfTasks
 1890              		.syntax unified
 1891              		.thumb
 1892              		.thumb_func
 1893              		.fpu fpv4-sp-d16
 1895              	uxTaskGetNumberOfTasks:
 1896              	.LFB23:
2256:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
 1897              		.loc 1 2256 0
 1898              		.cfi_startproc
 1899              		@ args = 0, pretend = 0, frame = 0
 1900              		@ frame_needed = 0, uses_anonymous_args = 0
 1901              		@ link register save eliminated.
2259:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 1902              		.loc 1 2259 0
 1903 0000 014B     		ldr	r3, .L165
 1904 0002 1868     		ldr	r0, [r3]
2260:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 1905              		.loc 1 2260 0
 1906 0004 7047     		bx	lr
 1907              	.L166:
 1908 0006 00BF     		.align	2
 1909              	.L165:
 1910 0008 00000000 		.word	.LANCHOR9
 1911              		.cfi_endproc
 1912              	.LFE23:
 1914              		.section	.text.pcTaskGetName,"ax",%progbits
 1915              		.align	1
 1916              		.global	pcTaskGetName
 1917              		.syntax unified
 1918              		.thumb
 1919              		.thumb_func
 1920              		.fpu fpv4-sp-d16
 1922              	pcTaskGetName:
 1923              	.LFB24:
2264:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
 1924              		.loc 1 2264 0
 1925              		.cfi_startproc
 1926              		@ args = 0, pretend = 0, frame = 0
 1927              		@ frame_needed = 0, uses_anonymous_args = 0
 1928              		@ link register save eliminated.
 1929              	.LVL155:
2269:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 1930              		.loc 1 2269 0
 1931 0000 0346     		mov	r3, r0
 1932 0002 18B1     		cbz	r0, .L171
 1933              	.LVL156:
ARM GAS  /tmp/ccPN8tEQ.s 			page 130


 1934              	.L168:
2270:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 1935              		.loc 1 2270 0 discriminator 4
 1936 0004 2BB1     		cbz	r3, .L172
2272:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 1937              		.loc 1 2272 0
 1938 0006 03F13400 		add	r0, r3, #52
 1939 000a 7047     		bx	lr
 1940              	.LVL157:
 1941              	.L171:
2269:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 1942              		.loc 1 2269 0 discriminator 1
 1943 000c 054B     		ldr	r3, .L173
 1944 000e 1B68     		ldr	r3, [r3]
 1945              	.LVL158:
 1946 0010 F8E7     		b	.L168
 1947              	.LVL159:
 1948              	.L172:
 1949              	.LBB124:
 1950              	.LBB125:
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1951              		.loc 2 195 0
 1952              		.syntax unified
 1953              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1954 0012 4FF01003 			mov r3, #16												
 1955 0016 83F31188 		msr basepri, r3											
 1956 001a BFF36F8F 		isb														
 1957 001e BFF34F8F 		dsb														
 1958              	
 1959              	@ 0 "" 2
 1960              	.LVL160:
 1961              		.thumb
 1962              		.syntax unified
 1963              	.L170:
 1964 0022 FEE7     		b	.L170
 1965              	.L174:
 1966              		.align	2
 1967              	.L173:
 1968 0024 00000000 		.word	.LANCHOR10
 1969              	.LBE125:
 1970              	.LBE124:
 1971              		.cfi_endproc
 1972              	.LFE24:
 1974              		.section	.text.xTaskIncrementTick,"ax",%progbits
 1975              		.align	1
 1976              		.global	xTaskIncrementTick
 1977              		.syntax unified
 1978              		.thumb
 1979              		.thumb_func
 1980              		.fpu fpv4-sp-d16
 1982              	xTaskIncrementTick:
 1983              	.LFB25:
2584:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
 1984              		.loc 1 2584 0
 1985              		.cfi_startproc
 1986              		@ args = 0, pretend = 0, frame = 0
 1987              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccPN8tEQ.s 			page 131


 1988 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1989              	.LCFI24:
 1990              		.cfi_def_cfa_offset 24
 1991              		.cfi_offset 3, -24
 1992              		.cfi_offset 4, -20
 1993              		.cfi_offset 5, -16
 1994              		.cfi_offset 6, -12
 1995              		.cfi_offset 7, -8
 1996              		.cfi_offset 14, -4
 1997              	.LVL161:
2593:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1998              		.loc 1 2593 0
 1999 0002 3A4B     		ldr	r3, .L196
 2000 0004 1B68     		ldr	r3, [r3]
 2001 0006 002B     		cmp	r3, #0
 2002 0008 64D1     		bne	.L176
 2003              	.LBB126:
2597:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2004              		.loc 1 2597 0
 2005 000a 394B     		ldr	r3, .L196+4
 2006 000c 1D68     		ldr	r5, [r3]
 2007 000e 0135     		adds	r5, r5, #1
 2008              	.LVL162:
2601:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2009              		.loc 1 2601 0
 2010 0010 1D60     		str	r5, [r3]
2603:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2011              		.loc 1 2603 0
 2012 0012 C5B9     		cbnz	r5, .L177
 2013              	.LBB127:
2605:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2014              		.loc 1 2605 0
 2015 0014 374B     		ldr	r3, .L196+8
 2016 0016 1B68     		ldr	r3, [r3]
 2017 0018 1B68     		ldr	r3, [r3]
 2018 001a 43B1     		cbz	r3, .L178
 2019              	.LBB128:
 2020              	.LBB129:
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2021              		.loc 2 195 0
 2022              		.syntax unified
 2023              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2024 001c 4FF01003 			mov r3, #16												
 2025 0020 83F31188 		msr basepri, r3											
 2026 0024 BFF36F8F 		isb														
 2027 0028 BFF34F8F 		dsb														
 2028              	
 2029              	@ 0 "" 2
 2030              	.LVL163:
 2031              		.thumb
 2032              		.syntax unified
 2033              	.L179:
 2034 002c FEE7     		b	.L179
 2035              	.L178:
 2036              	.LBE129:
 2037              	.LBE128:
2605:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/ccPN8tEQ.s 			page 132


 2038              		.loc 1 2605 0 discriminator 2
 2039 002e 314A     		ldr	r2, .L196+8
 2040 0030 1168     		ldr	r1, [r2]
 2041              	.LVL164:
 2042 0032 314B     		ldr	r3, .L196+12
 2043 0034 1868     		ldr	r0, [r3]
 2044 0036 1060     		str	r0, [r2]
 2045 0038 1960     		str	r1, [r3]
 2046 003a 304A     		ldr	r2, .L196+16
 2047 003c 1368     		ldr	r3, [r2]
 2048 003e 0133     		adds	r3, r3, #1
 2049 0040 1360     		str	r3, [r2]
 2050 0042 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2051              	.LVL165:
 2052              	.L177:
 2053              	.LBE127:
2616:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2054              		.loc 1 2616 0
 2055 0046 2E4B     		ldr	r3, .L196+20
 2056 0048 1B68     		ldr	r3, [r3]
 2057 004a AB42     		cmp	r3, r5
 2058 004c 38D9     		bls	.L189
 2059              	.LBE126:
2587:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2060              		.loc 1 2587 0
 2061 004e 0024     		movs	r4, #0
 2062              	.LVL166:
 2063              	.L181:
 2064              	.LBB130:
2699:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2065              		.loc 1 2699 0
 2066 0050 2C4B     		ldr	r3, .L196+24
 2067 0052 1B68     		ldr	r3, [r3]
 2068 0054 DB6A     		ldr	r3, [r3, #44]
 2069 0056 03EB8303 		add	r3, r3, r3, lsl #2
 2070 005a 9A00     		lsls	r2, r3, #2
 2071 005c 2A4B     		ldr	r3, .L196+28
 2072 005e 9B58     		ldr	r3, [r3, r2]
 2073 0060 012B     		cmp	r3, #1
 2074 0062 3CD9     		bls	.L187
2701:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2075              		.loc 1 2701 0
 2076 0064 0124     		movs	r4, #1
 2077              	.LVL167:
 2078 0066 3AE0     		b	.L187
 2079              	.LVL168:
 2080              	.L190:
2682:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
 2081              		.loc 1 2682 0
 2082 0068 0124     		movs	r4, #1
 2083              	.LVL169:
 2084              	.L180:
2620:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2085              		.loc 1 2620 0
 2086 006a 224B     		ldr	r3, .L196+8
 2087 006c 1B68     		ldr	r3, [r3]
 2088 006e 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccPN8tEQ.s 			page 133


 2089 0070 43B3     		cbz	r3, .L194
2636:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 2090              		.loc 1 2636 0
 2091 0072 204B     		ldr	r3, .L196+8
 2092 0074 1B68     		ldr	r3, [r3]
 2093 0076 DB68     		ldr	r3, [r3, #12]
 2094 0078 DE68     		ldr	r6, [r3, #12]
 2095              	.LVL170:
2637:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2096              		.loc 1 2637 0
 2097 007a 7368     		ldr	r3, [r6, #4]
 2098              	.LVL171:
2639:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2099              		.loc 1 2639 0
 2100 007c 9D42     		cmp	r5, r3
 2101 007e 26D3     		bcc	.L195
2655:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2102              		.loc 1 2655 0
 2103 0080 371D     		adds	r7, r6, #4
 2104 0082 3846     		mov	r0, r7
 2105 0084 FFF7FEFF 		bl	uxListRemove
 2106              	.LVL172:
2659:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2107              		.loc 1 2659 0
 2108 0088 B36A     		ldr	r3, [r6, #40]
 2109 008a 1BB1     		cbz	r3, .L184
2661:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2110              		.loc 1 2661 0
 2111 008c 06F11800 		add	r0, r6, #24
 2112 0090 FFF7FEFF 		bl	uxListRemove
 2113              	.LVL173:
 2114              	.L184:
2670:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2115              		.loc 1 2670 0
 2116 0094 F36A     		ldr	r3, [r6, #44]
 2117 0096 0122     		movs	r2, #1
 2118 0098 9A40     		lsls	r2, r2, r3
 2119 009a 1C49     		ldr	r1, .L196+32
 2120 009c 0868     		ldr	r0, [r1]
 2121 009e 0243     		orrs	r2, r2, r0
 2122 00a0 0A60     		str	r2, [r1]
 2123 00a2 03EB8303 		add	r3, r3, r3, lsl #2
 2124 00a6 9A00     		lsls	r2, r3, #2
 2125 00a8 3946     		mov	r1, r7
 2126 00aa 1748     		ldr	r0, .L196+28
 2127 00ac 1044     		add	r0, r0, r2
 2128 00ae FFF7FEFF 		bl	vListInsertEnd
 2129              	.LVL174:
2680:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 2130              		.loc 1 2680 0
 2131 00b2 F26A     		ldr	r2, [r6, #44]
 2132 00b4 134B     		ldr	r3, .L196+24
 2133 00b6 1B68     		ldr	r3, [r3]
 2134 00b8 DB6A     		ldr	r3, [r3, #44]
 2135 00ba 9A42     		cmp	r2, r3
 2136 00bc D4D2     		bcs	.L190
 2137 00be D4E7     		b	.L180
ARM GAS  /tmp/ccPN8tEQ.s 			page 134


 2138              	.LVL175:
 2139              	.L189:
 2140              	.LBE130:
2587:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2141              		.loc 1 2587 0
 2142 00c0 0024     		movs	r4, #0
 2143 00c2 D2E7     		b	.L180
 2144              	.LVL176:
 2145              	.L194:
 2146              	.LBB131:
2627:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 2147              		.loc 1 2627 0
 2148 00c4 0E4B     		ldr	r3, .L196+20
 2149 00c6 4FF0FF32 		mov	r2, #-1
 2150 00ca 1A60     		str	r2, [r3]
2628:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2151              		.loc 1 2628 0
 2152 00cc C0E7     		b	.L181
 2153              	.LVL177:
 2154              	.L195:
2646:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
 2155              		.loc 1 2646 0
 2156 00ce 0C4A     		ldr	r2, .L196+20
 2157 00d0 1360     		str	r3, [r2]
2647:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2158              		.loc 1 2647 0
 2159 00d2 BDE7     		b	.L181
 2160              	.LVL178:
 2161              	.L176:
 2162              	.LBE131:
2727:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2163              		.loc 1 2727 0
 2164 00d4 0E4A     		ldr	r2, .L196+36
 2165 00d6 1368     		ldr	r3, [r2]
 2166 00d8 0133     		adds	r3, r3, #1
 2167 00da 1360     		str	r3, [r2]
2587:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2168              		.loc 1 2587 0
 2169 00dc 0024     		movs	r4, #0
 2170              	.LVL179:
 2171              	.L187:
2740:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2172              		.loc 1 2740 0
 2173 00de 0D4B     		ldr	r3, .L196+40
 2174 00e0 1B68     		ldr	r3, [r3]
 2175 00e2 03B1     		cbz	r3, .L175
2742:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2176              		.loc 1 2742 0
 2177 00e4 0124     		movs	r4, #1
 2178              	.LVL180:
 2179              	.L175:
2752:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2180              		.loc 1 2752 0
 2181 00e6 2046     		mov	r0, r4
 2182 00e8 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2183              	.L197:
 2184 00ea 00BF     		.align	2
ARM GAS  /tmp/ccPN8tEQ.s 			page 135


 2185              	.L196:
 2186 00ec 00000000 		.word	.LANCHOR16
 2187 00f0 00000000 		.word	.LANCHOR15
 2188 00f4 00000000 		.word	.LANCHOR2
 2189 00f8 00000000 		.word	.LANCHOR8
 2190 00fc 00000000 		.word	.LANCHOR18
 2191 0100 00000000 		.word	.LANCHOR3
 2192 0104 00000000 		.word	.LANCHOR10
 2193 0108 00000000 		.word	.LANCHOR4
 2194 010c 00000000 		.word	.LANCHOR13
 2195 0110 00000000 		.word	.LANCHOR19
 2196 0114 00000000 		.word	.LANCHOR20
 2197              		.cfi_endproc
 2198              	.LFE25:
 2200              		.section	.text.xTaskResumeAll,"ax",%progbits
 2201              		.align	1
 2202              		.global	xTaskResumeAll
 2203              		.syntax unified
 2204              		.thumb
 2205              		.thumb_func
 2206              		.fpu fpv4-sp-d16
 2208              	xTaskResumeAll:
 2209              	.LFB20:
2100:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
 2210              		.loc 1 2100 0
 2211              		.cfi_startproc
 2212              		@ args = 0, pretend = 0, frame = 0
 2213              		@ frame_needed = 0, uses_anonymous_args = 0
 2214 0000 38B5     		push	{r3, r4, r5, lr}
 2215              	.LCFI25:
 2216              		.cfi_def_cfa_offset 16
 2217              		.cfi_offset 3, -16
 2218              		.cfi_offset 4, -12
 2219              		.cfi_offset 5, -8
 2220              		.cfi_offset 14, -4
 2221              	.LVL181:
2106:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2222              		.loc 1 2106 0
 2223 0002 334B     		ldr	r3, .L214
 2224 0004 1B68     		ldr	r3, [r3]
 2225 0006 43B9     		cbnz	r3, .L199
 2226              	.LBB132:
 2227              	.LBB133:
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2228              		.loc 2 195 0
 2229              		.syntax unified
 2230              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2231 0008 4FF01003 			mov r3, #16												
 2232 000c 83F31188 		msr basepri, r3											
 2233 0010 BFF36F8F 		isb														
 2234 0014 BFF34F8F 		dsb														
 2235              	
 2236              	@ 0 "" 2
 2237              	.LVL182:
 2238              		.thumb
 2239              		.syntax unified
 2240              	.L200:
ARM GAS  /tmp/ccPN8tEQ.s 			page 136


 2241 0018 FEE7     		b	.L200
 2242              	.L199:
 2243              	.LBE133:
 2244              	.LBE132:
2113:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2245              		.loc 1 2113 0
 2246 001a FFF7FEFF 		bl	vPortEnterCritical
 2247              	.LVL183:
2115:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2248              		.loc 1 2115 0
 2249 001e 2C4B     		ldr	r3, .L214
 2250 0020 1A68     		ldr	r2, [r3]
 2251 0022 013A     		subs	r2, r2, #1
 2252 0024 1A60     		str	r2, [r3]
2117:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2253              		.loc 1 2117 0
 2254 0026 1B68     		ldr	r3, [r3]
 2255 0028 002B     		cmp	r3, #0
 2256 002a 4DD1     		bne	.L209
2119:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2257              		.loc 1 2119 0
 2258 002c 294B     		ldr	r3, .L214+4
 2259 002e 1B68     		ldr	r3, [r3]
 2260 0030 23B9     		cbnz	r3, .L210
2102:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2261              		.loc 1 2102 0
 2262 0032 0024     		movs	r4, #0
 2263              	.LVL184:
 2264              	.L201:
2203:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2265              		.loc 1 2203 0
 2266 0034 FFF7FEFF 		bl	vPortExitCritical
 2267              	.LVL185:
2206:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2268              		.loc 1 2206 0
 2269 0038 2046     		mov	r0, r4
 2270 003a 38BD     		pop	{r3, r4, r5, pc}
 2271              	.LVL186:
 2272              	.L210:
2101:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
 2273              		.loc 1 2101 0
 2274 003c 0024     		movs	r4, #0
 2275              	.LVL187:
 2276              	.L202:
2123:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2277              		.loc 1 2123 0
 2278 003e 264B     		ldr	r3, .L214+8
 2279 0040 1B68     		ldr	r3, [r3]
 2280 0042 1BB3     		cbz	r3, .L213
2125:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2281              		.loc 1 2125 0
 2282 0044 244B     		ldr	r3, .L214+8
 2283 0046 DB68     		ldr	r3, [r3, #12]
 2284 0048 DC68     		ldr	r4, [r3, #12]
 2285              	.LVL188:
2126:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2286              		.loc 1 2126 0
ARM GAS  /tmp/ccPN8tEQ.s 			page 137


 2287 004a 04F11800 		add	r0, r4, #24
 2288 004e FFF7FEFF 		bl	uxListRemove
 2289              	.LVL189:
2127:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2290              		.loc 1 2127 0
 2291 0052 251D     		adds	r5, r4, #4
 2292 0054 2846     		mov	r0, r5
 2293 0056 FFF7FEFF 		bl	uxListRemove
 2294              	.LVL190:
2128:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2295              		.loc 1 2128 0
 2296 005a E36A     		ldr	r3, [r4, #44]
 2297 005c 0122     		movs	r2, #1
 2298 005e 9A40     		lsls	r2, r2, r3
 2299 0060 1E49     		ldr	r1, .L214+12
 2300 0062 0868     		ldr	r0, [r1]
 2301 0064 0243     		orrs	r2, r2, r0
 2302 0066 0A60     		str	r2, [r1]
 2303 0068 03EB8303 		add	r3, r3, r3, lsl #2
 2304 006c 9A00     		lsls	r2, r3, #2
 2305 006e 2946     		mov	r1, r5
 2306 0070 1B48     		ldr	r0, .L214+16
 2307 0072 1044     		add	r0, r0, r2
 2308 0074 FFF7FEFF 		bl	vListInsertEnd
 2309              	.LVL191:
2132:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2310              		.loc 1 2132 0
 2311 0078 E26A     		ldr	r2, [r4, #44]
 2312 007a 1A4B     		ldr	r3, .L214+20
 2313 007c 1B68     		ldr	r3, [r3]
 2314 007e DB6A     		ldr	r3, [r3, #44]
 2315 0080 9A42     		cmp	r2, r3
 2316 0082 DCD3     		bcc	.L202
2134:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2317              		.loc 1 2134 0
 2318 0084 184B     		ldr	r3, .L214+24
 2319 0086 0122     		movs	r2, #1
 2320 0088 1A60     		str	r2, [r3]
 2321 008a D8E7     		b	.L202
 2322              	.L213:
2142:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2323              		.loc 1 2142 0
 2324 008c 0CB1     		cbz	r4, .L205
2150:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2325              		.loc 1 2150 0
 2326 008e FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2327              	.LVL192:
 2328              	.L205:
 2329              	.LBB134:
2158:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2330              		.loc 1 2158 0
 2331 0092 164B     		ldr	r3, .L214+28
 2332 0094 1C68     		ldr	r4, [r3]
 2333              	.LVL193:
2160:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2334              		.loc 1 2160 0
 2335 0096 54B1     		cbz	r4, .L206
ARM GAS  /tmp/ccPN8tEQ.s 			page 138


 2336              	.L208:
2164:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
 2337              		.loc 1 2164 0
 2338 0098 FFF7FEFF 		bl	xTaskIncrementTick
 2339              	.LVL194:
 2340 009c 10B1     		cbz	r0, .L207
2166:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
 2341              		.loc 1 2166 0
 2342 009e 124B     		ldr	r3, .L214+24
 2343 00a0 0122     		movs	r2, #1
 2344 00a2 1A60     		str	r2, [r3]
 2345              	.L207:
 2346              	.LVL195:
2173:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2347              		.loc 1 2173 0
 2348 00a4 013C     		subs	r4, r4, #1
 2349              	.LVL196:
 2350 00a6 F7D1     		bne	.L208
2175:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2351              		.loc 1 2175 0
 2352 00a8 104B     		ldr	r3, .L214+28
 2353 00aa 0022     		movs	r2, #0
 2354 00ac 1A60     		str	r2, [r3]
 2355              	.L206:
 2356              	.LBE134:
2183:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2357              		.loc 1 2183 0
 2358 00ae 0E4B     		ldr	r3, .L214+24
 2359 00b0 1B68     		ldr	r3, [r3]
 2360 00b2 5BB1     		cbz	r3, .L211
 2361              	.LVL197:
2190:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2362              		.loc 1 2190 0
 2363 00b4 0E4B     		ldr	r3, .L214+32
 2364 00b6 4FF08052 		mov	r2, #268435456
 2365 00ba 1A60     		str	r2, [r3]
 2366              		.syntax unified
 2367              	@ 2190 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2368 00bc BFF34F8F 		dsb
 2369              	@ 0 "" 2
 2370              	@ 2190 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2371 00c0 BFF36F8F 		isb
 2372              	@ 0 "" 2
2187:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2373              		.loc 1 2187 0
 2374              		.thumb
 2375              		.syntax unified
 2376 00c4 0124     		movs	r4, #1
 2377              	.LVL198:
 2378 00c6 B5E7     		b	.L201
 2379              	.LVL199:
 2380              	.L209:
2102:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2381              		.loc 1 2102 0
 2382 00c8 0024     		movs	r4, #0
 2383 00ca B3E7     		b	.L201
 2384              	.LVL200:
ARM GAS  /tmp/ccPN8tEQ.s 			page 139


 2385              	.L211:
 2386 00cc 0024     		movs	r4, #0
 2387              	.LVL201:
 2388 00ce B1E7     		b	.L201
 2389              	.L215:
 2390              		.align	2
 2391              	.L214:
 2392 00d0 00000000 		.word	.LANCHOR16
 2393 00d4 00000000 		.word	.LANCHOR9
 2394 00d8 00000000 		.word	.LANCHOR1
 2395 00dc 00000000 		.word	.LANCHOR13
 2396 00e0 00000000 		.word	.LANCHOR4
 2397 00e4 00000000 		.word	.LANCHOR10
 2398 00e8 00000000 		.word	.LANCHOR20
 2399 00ec 00000000 		.word	.LANCHOR19
 2400 00f0 04ED00E0 		.word	-536810236
 2401              		.cfi_endproc
 2402              	.LFE20:
 2404              		.section	.text.vTaskDelay,"ax",%progbits
 2405              		.align	1
 2406              		.global	vTaskDelay
 2407              		.syntax unified
 2408              		.thumb
 2409              		.thumb_func
 2410              		.fpu fpv4-sp-d16
 2412              	vTaskDelay:
 2413              	.LFB9:
1283:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 2414              		.loc 1 1283 0
 2415              		.cfi_startproc
 2416              		@ args = 0, pretend = 0, frame = 0
 2417              		@ frame_needed = 0, uses_anonymous_args = 0
 2418              	.LVL202:
 2419 0000 10B5     		push	{r4, lr}
 2420              	.LCFI26:
 2421              		.cfi_def_cfa_offset 8
 2422              		.cfi_offset 4, -8
 2423              		.cfi_offset 14, -4
 2424              	.LVL203:
1287:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2425              		.loc 1 1287 0
 2426 0002 A8B1     		cbz	r0, .L217
 2427 0004 0446     		mov	r4, r0
1289:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 2428              		.loc 1 1289 0
 2429 0006 0F4B     		ldr	r3, .L222
 2430 0008 1B68     		ldr	r3, [r3]
 2431 000a 43B1     		cbz	r3, .L218
 2432              	.LBB135:
 2433              	.LBB136:
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2434              		.loc 2 195 0
 2435              		.syntax unified
 2436              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2437 000c 4FF01003 			mov r3, #16												
 2438 0010 83F31188 		msr basepri, r3											
 2439 0014 BFF36F8F 		isb														
ARM GAS  /tmp/ccPN8tEQ.s 			page 140


 2440 0018 BFF34F8F 		dsb														
 2441              	
 2442              	@ 0 "" 2
 2443              	.LVL204:
 2444              		.thumb
 2445              		.syntax unified
 2446              	.L219:
 2447 001c FEE7     		b	.L219
 2448              	.L218:
 2449              	.LBE136:
 2450              	.LBE135:
1290:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2451              		.loc 1 1290 0
 2452 001e FFF7FEFF 		bl	vTaskSuspendAll
 2453              	.LVL205:
1301:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2454              		.loc 1 1301 0
 2455 0022 0021     		movs	r1, #0
 2456 0024 2046     		mov	r0, r4
 2457 0026 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2458              	.LVL206:
1303:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2459              		.loc 1 1303 0
 2460 002a FFF7FEFF 		bl	xTaskResumeAll
 2461              	.LVL207:
1312:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2462              		.loc 1 1312 0
 2463 002e 38B9     		cbnz	r0, .L216
 2464              	.LVL208:
 2465              	.L217:
1314:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2466              		.loc 1 1314 0
 2467 0030 054B     		ldr	r3, .L222+4
 2468 0032 4FF08052 		mov	r2, #268435456
 2469 0036 1A60     		str	r2, [r3]
 2470              		.syntax unified
 2471              	@ 1314 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2472 0038 BFF34F8F 		dsb
 2473              	@ 0 "" 2
 2474              	@ 1314 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2475 003c BFF36F8F 		isb
 2476              	@ 0 "" 2
 2477              		.thumb
 2478              		.syntax unified
 2479              	.L216:
1320:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2480              		.loc 1 1320 0
 2481 0040 10BD     		pop	{r4, pc}
 2482              	.L223:
 2483 0042 00BF     		.align	2
 2484              	.L222:
 2485 0044 00000000 		.word	.LANCHOR16
 2486 0048 04ED00E0 		.word	-536810236
 2487              		.cfi_endproc
 2488              	.LFE9:
 2490              		.section	.text.vTaskSwitchContext,"ax",%progbits
 2491              		.align	1
ARM GAS  /tmp/ccPN8tEQ.s 			page 141


 2492              		.global	vTaskSwitchContext
 2493              		.syntax unified
 2494              		.thumb
 2495              		.thumb_func
 2496              		.fpu fpv4-sp-d16
 2498              	vTaskSwitchContext:
 2499              	.LFB26:
2846:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 2500              		.loc 1 2846 0
 2501              		.cfi_startproc
 2502              		@ args = 0, pretend = 0, frame = 0
 2503              		@ frame_needed = 0, uses_anonymous_args = 0
 2504              		@ link register save eliminated.
2847:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2505              		.loc 1 2847 0
 2506 0000 204B     		ldr	r3, .L234
 2507 0002 1B68     		ldr	r3, [r3]
 2508 0004 1BB1     		cbz	r3, .L225
2851:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2509              		.loc 1 2851 0
 2510 0006 204B     		ldr	r3, .L234+4
 2511 0008 0122     		movs	r2, #1
 2512 000a 1A60     		str	r2, [r3]
 2513 000c 7047     		bx	lr
 2514              	.L225:
2855:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
 2515              		.loc 1 2855 0
 2516 000e 1E4B     		ldr	r3, .L234+4
 2517 0010 0022     		movs	r2, #0
 2518 0012 1A60     		str	r2, [r3]
 2519              	.LBB137:
2890:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2520              		.loc 1 2890 0
 2521 0014 1D4B     		ldr	r3, .L234+8
 2522 0016 1B68     		ldr	r3, [r3]
 2523              	.LVL209:
 2524              	.LBB138:
 2525              	.LBB139:
 134:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 2526              		.loc 2 134 0
 2527              		.syntax unified
 2528              	@ 134 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2529 0018 B3FA83F3 		clz r3, r3
 2530              	@ 0 "" 2
 2531              	.LVL210:
 2532              		.thumb
 2533              		.syntax unified
 2534 001c DBB2     		uxtb	r3, r3
 2535              	.LBE139:
 2536              	.LBE138:
2890:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2537              		.loc 1 2890 0
 2538 001e C3F11F03 		rsb	r3, r3, #31
 2539              	.LVL211:
 2540 0022 03EB8301 		add	r1, r3, r3, lsl #2
 2541 0026 8A00     		lsls	r2, r1, #2
 2542 0028 1949     		ldr	r1, .L234+12
ARM GAS  /tmp/ccPN8tEQ.s 			page 142


 2543 002a 8A58     		ldr	r2, [r1, r2]
 2544 002c 42B9     		cbnz	r2, .L227
 2545              	.LBB140:
 2546              	.LBB141:
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2547              		.loc 2 195 0
 2548              		.syntax unified
 2549              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2550 002e 4FF01003 			mov r3, #16												
 2551 0032 83F31188 		msr basepri, r3											
 2552 0036 BFF36F8F 		isb														
 2553 003a BFF34F8F 		dsb														
 2554              	
 2555              	@ 0 "" 2
 2556              	.LVL212:
 2557              		.thumb
 2558              		.syntax unified
 2559              	.L228:
 2560 003e FEE7     		b	.L228
 2561              	.LVL213:
 2562              	.L227:
 2563              	.LBE141:
 2564              	.LBE140:
 2565              	.LBE137:
2846:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 2566              		.loc 1 2846 0 discriminator 2
 2567 0040 10B4     		push	{r4}
 2568              	.LCFI27:
 2569              		.cfi_def_cfa_offset 4
 2570              		.cfi_offset 4, -4
 2571              	.LVL214:
 2572              	.LBB144:
 2573              	.LBB142:
2890:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2574              		.loc 1 2890 0 discriminator 2
 2575 0042 1348     		ldr	r0, .L234+12
 2576 0044 9A00     		lsls	r2, r3, #2
 2577 0046 D418     		adds	r4, r2, r3
 2578 0048 A100     		lsls	r1, r4, #2
 2579 004a 0144     		add	r1, r1, r0
 2580 004c 4C68     		ldr	r4, [r1, #4]
 2581 004e 6468     		ldr	r4, [r4, #4]
 2582 0050 4C60     		str	r4, [r1, #4]
 2583 0052 1A44     		add	r2, r2, r3
 2584 0054 9100     		lsls	r1, r2, #2
 2585 0056 0831     		adds	r1, r1, #8
 2586 0058 0844     		add	r0, r0, r1
 2587 005a 8442     		cmp	r4, r0
 2588 005c 0BD0     		beq	.L233
 2589              	.L229:
2890:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2590              		.loc 1 2890 0 is_stmt 0 discriminator 5
 2591 005e 03EB8303 		add	r3, r3, r3, lsl #2
 2592              	.LVL215:
 2593 0062 9A00     		lsls	r2, r3, #2
 2594 0064 0A4B     		ldr	r3, .L234+12
 2595 0066 1344     		add	r3, r3, r2
ARM GAS  /tmp/ccPN8tEQ.s 			page 143


 2596 0068 5B68     		ldr	r3, [r3, #4]
 2597 006a DA68     		ldr	r2, [r3, #12]
 2598 006c 094B     		ldr	r3, .L234+16
 2599 006e 1A60     		str	r2, [r3]
 2600              	.LBE142:
 2601              	.LBE144:
2901:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2602              		.loc 1 2901 0 is_stmt 1 discriminator 5
 2603 0070 5DF8044B 		ldr	r4, [sp], #4
 2604              	.LCFI28:
 2605              		.cfi_remember_state
 2606              		.cfi_restore 4
 2607              		.cfi_def_cfa_offset 0
 2608 0074 7047     		bx	lr
 2609              	.LVL216:
 2610              	.L233:
 2611              	.LCFI29:
 2612              		.cfi_restore_state
 2613              	.LBB145:
 2614              	.LBB143:
2890:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2615              		.loc 1 2890 0 discriminator 3
 2616 0076 6168     		ldr	r1, [r4, #4]
 2617 0078 0548     		ldr	r0, .L234+12
 2618 007a 1422     		movs	r2, #20
 2619 007c 02FB0302 		mla	r2, r2, r3, r0
 2620 0080 5160     		str	r1, [r2, #4]
 2621 0082 ECE7     		b	.L229
 2622              	.L235:
 2623              		.align	2
 2624              	.L234:
 2625 0084 00000000 		.word	.LANCHOR16
 2626 0088 00000000 		.word	.LANCHOR20
 2627 008c 00000000 		.word	.LANCHOR13
 2628 0090 00000000 		.word	.LANCHOR4
 2629 0094 00000000 		.word	.LANCHOR10
 2630              	.LBE143:
 2631              	.LBE145:
 2632              		.cfi_endproc
 2633              	.LFE26:
 2635              		.section	.text.vTaskSuspend,"ax",%progbits
 2636              		.align	1
 2637              		.global	vTaskSuspend
 2638              		.syntax unified
 2639              		.thumb
 2640              		.thumb_func
 2641              		.fpu fpv4-sp-d16
 2643              	vTaskSuspend:
 2644              	.LFB13:
1625:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 2645              		.loc 1 1625 0
 2646              		.cfi_startproc
 2647              		@ args = 0, pretend = 0, frame = 0
 2648              		@ frame_needed = 0, uses_anonymous_args = 0
 2649              	.LVL217:
 2650 0000 38B5     		push	{r3, r4, r5, lr}
 2651              	.LCFI30:
ARM GAS  /tmp/ccPN8tEQ.s 			page 144


 2652              		.cfi_def_cfa_offset 16
 2653              		.cfi_offset 3, -16
 2654              		.cfi_offset 4, -12
 2655              		.cfi_offset 5, -8
 2656              		.cfi_offset 14, -4
 2657 0002 0446     		mov	r4, r0
1628:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2658              		.loc 1 1628 0
 2659 0004 FFF7FEFF 		bl	vPortEnterCritical
 2660              	.LVL218:
1632:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2661              		.loc 1 1632 0
 2662 0008 64B3     		cbz	r4, .L248
 2663              	.LVL219:
 2664              	.L237:
1638:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2665              		.loc 1 1638 0 discriminator 4
 2666 000a 251D     		adds	r5, r4, #4
 2667 000c 2846     		mov	r0, r5
 2668 000e FFF7FEFF 		bl	uxListRemove
 2669              	.LVL220:
 2670 0012 70B9     		cbnz	r0, .L238
1640:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2671              		.loc 1 1640 0
 2672 0014 E26A     		ldr	r2, [r4, #44]
 2673 0016 02EB8201 		add	r1, r2, r2, lsl #2
 2674 001a 8B00     		lsls	r3, r1, #2
 2675 001c 2B49     		ldr	r1, .L252
 2676 001e CB58     		ldr	r3, [r1, r3]
 2677 0020 3BB9     		cbnz	r3, .L238
1640:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2678              		.loc 1 1640 0 is_stmt 0 discriminator 1
 2679 0022 0123     		movs	r3, #1
 2680 0024 03FA02F2 		lsl	r2, r3, r2
 2681 0028 2949     		ldr	r1, .L252+4
 2682 002a 0B68     		ldr	r3, [r1]
 2683 002c 23EA0203 		bic	r3, r3, r2
 2684 0030 0B60     		str	r3, [r1]
 2685              	.L238:
1648:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2686              		.loc 1 1648 0 is_stmt 1
 2687 0032 A36A     		ldr	r3, [r4, #40]
 2688 0034 1BB1     		cbz	r3, .L239
1650:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2689              		.loc 1 1650 0
 2690 0036 04F11800 		add	r0, r4, #24
 2691 003a FFF7FEFF 		bl	uxListRemove
 2692              	.LVL221:
 2693              	.L239:
1657:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2694              		.loc 1 1657 0
 2695 003e 2946     		mov	r1, r5
 2696 0040 2448     		ldr	r0, .L252+8
 2697 0042 FFF7FEFF 		bl	vListInsertEnd
 2698              	.LVL222:
1661:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2699              		.loc 1 1661 0
ARM GAS  /tmp/ccPN8tEQ.s 			page 145


 2700 0046 94F85030 		ldrb	r3, [r4, #80]	@ zero_extendqisi2
 2701 004a DBB2     		uxtb	r3, r3
 2702 004c 012B     		cmp	r3, #1
 2703 004e 0CD0     		beq	.L249
 2704              	.L240:
1670:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2705              		.loc 1 1670 0
 2706 0050 FFF7FEFF 		bl	vPortExitCritical
 2707              	.LVL223:
1672:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2708              		.loc 1 1672 0
 2709 0054 204B     		ldr	r3, .L252+12
 2710 0056 1B68     		ldr	r3, [r3]
 2711 0058 5BB9     		cbnz	r3, .L250
 2712              	.L241:
1687:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2713              		.loc 1 1687 0
 2714 005a 204B     		ldr	r3, .L252+16
 2715 005c 1B68     		ldr	r3, [r3]
 2716 005e A342     		cmp	r3, r4
 2717 0060 0ED0     		beq	.L251
 2718              	.L236:
1718:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2719              		.loc 1 1718 0
 2720 0062 38BD     		pop	{r3, r4, r5, pc}
 2721              	.LVL224:
 2722              	.L248:
1632:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2723              		.loc 1 1632 0 discriminator 1
 2724 0064 1D4B     		ldr	r3, .L252+16
 2725 0066 1C68     		ldr	r4, [r3]
 2726              	.LVL225:
 2727 0068 CFE7     		b	.L237
 2728              	.LVL226:
 2729              	.L249:
1665:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2730              		.loc 1 1665 0
 2731 006a 0023     		movs	r3, #0
 2732 006c 84F85030 		strb	r3, [r4, #80]
 2733 0070 EEE7     		b	.L240
 2734              	.L250:
1676:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2735              		.loc 1 1676 0
 2736 0072 FFF7FEFF 		bl	vPortEnterCritical
 2737              	.LVL227:
1678:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2738              		.loc 1 1678 0
 2739 0076 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2740              	.LVL228:
1680:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2741              		.loc 1 1680 0
 2742 007a FFF7FEFF 		bl	vPortExitCritical
 2743              	.LVL229:
 2744 007e ECE7     		b	.L241
 2745              	.L251:
1689:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2746              		.loc 1 1689 0
ARM GAS  /tmp/ccPN8tEQ.s 			page 146


 2747 0080 154B     		ldr	r3, .L252+12
 2748 0082 1B68     		ldr	r3, [r3]
 2749 0084 A3B1     		cbz	r3, .L243
1692:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 2750              		.loc 1 1692 0
 2751 0086 164B     		ldr	r3, .L252+20
 2752 0088 1B68     		ldr	r3, [r3]
 2753 008a 43B1     		cbz	r3, .L244
 2754              	.LBB146:
 2755              	.LBB147:
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2756              		.loc 2 195 0
 2757              		.syntax unified
 2758              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2759 008c 4FF01003 			mov r3, #16												
 2760 0090 83F31188 		msr basepri, r3											
 2761 0094 BFF36F8F 		isb														
 2762 0098 BFF34F8F 		dsb														
 2763              	
 2764              	@ 0 "" 2
 2765              	.LVL230:
 2766              		.thumb
 2767              		.syntax unified
 2768              	.L245:
 2769 009c FEE7     		b	.L245
 2770              	.L244:
 2771              	.LBE147:
 2772              	.LBE146:
1693:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2773              		.loc 1 1693 0
 2774 009e 114B     		ldr	r3, .L252+24
 2775 00a0 4FF08052 		mov	r2, #268435456
 2776 00a4 1A60     		str	r2, [r3]
 2777              		.syntax unified
 2778              	@ 1693 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2779 00a6 BFF34F8F 		dsb
 2780              	@ 0 "" 2
 2781              	@ 1693 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2782 00aa BFF36F8F 		isb
 2783              	@ 0 "" 2
 2784              		.thumb
 2785              		.syntax unified
 2786 00ae D8E7     		b	.L236
 2787              	.L243:
1700:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2788              		.loc 1 1700 0
 2789 00b0 084B     		ldr	r3, .L252+8
 2790 00b2 1A68     		ldr	r2, [r3]
 2791 00b4 0C4B     		ldr	r3, .L252+28
 2792 00b6 1B68     		ldr	r3, [r3]
 2793 00b8 9A42     		cmp	r2, r3
 2794 00ba 03D1     		bne	.L246
1706:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2795              		.loc 1 1706 0
 2796 00bc 074B     		ldr	r3, .L252+16
 2797 00be 0022     		movs	r2, #0
 2798 00c0 1A60     		str	r2, [r3]
ARM GAS  /tmp/ccPN8tEQ.s 			page 147


 2799 00c2 CEE7     		b	.L236
 2800              	.L246:
1710:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2801              		.loc 1 1710 0
 2802 00c4 FFF7FEFF 		bl	vTaskSwitchContext
 2803              	.LVL231:
1718:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2804              		.loc 1 1718 0
 2805 00c8 CBE7     		b	.L236
 2806              	.L253:
 2807 00ca 00BF     		.align	2
 2808              	.L252:
 2809 00cc 00000000 		.word	.LANCHOR4
 2810 00d0 00000000 		.word	.LANCHOR13
 2811 00d4 00000000 		.word	.LANCHOR0
 2812 00d8 00000000 		.word	.LANCHOR11
 2813 00dc 00000000 		.word	.LANCHOR10
 2814 00e0 00000000 		.word	.LANCHOR16
 2815 00e4 04ED00E0 		.word	-536810236
 2816 00e8 00000000 		.word	.LANCHOR9
 2817              		.cfi_endproc
 2818              	.LFE13:
 2820              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 2821              		.align	1
 2822              		.global	vTaskPlaceOnEventList
 2823              		.syntax unified
 2824              		.thumb
 2825              		.thumb_func
 2826              		.fpu fpv4-sp-d16
 2828              	vTaskPlaceOnEventList:
 2829              	.LFB27:
2905:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 2830              		.loc 1 2905 0
 2831              		.cfi_startproc
 2832              		@ args = 0, pretend = 0, frame = 0
 2833              		@ frame_needed = 0, uses_anonymous_args = 0
 2834              	.LVL232:
2906:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2835              		.loc 1 2906 0
 2836 0000 40B9     		cbnz	r0, .L255
 2837              	.LBB148:
 2838              	.LBB149:
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2839              		.loc 2 195 0
 2840              		.syntax unified
 2841              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2842 0002 4FF01003 			mov r3, #16												
 2843 0006 83F31188 		msr basepri, r3											
 2844 000a BFF36F8F 		isb														
 2845 000e BFF34F8F 		dsb														
 2846              	
 2847              	@ 0 "" 2
 2848              	.LVL233:
 2849              		.thumb
 2850              		.syntax unified
 2851              	.L256:
 2852 0012 FEE7     		b	.L256
ARM GAS  /tmp/ccPN8tEQ.s 			page 148


 2853              	.L255:
 2854              	.LBE149:
 2855              	.LBE148:
2905:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 2856              		.loc 1 2905 0
 2857 0014 10B5     		push	{r4, lr}
 2858              	.LCFI31:
 2859              		.cfi_def_cfa_offset 8
 2860              		.cfi_offset 4, -8
 2861              		.cfi_offset 14, -4
 2862 0016 0C46     		mov	r4, r1
2915:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2863              		.loc 1 2915 0
 2864 0018 044B     		ldr	r3, .L259
 2865 001a 1968     		ldr	r1, [r3]
 2866              	.LVL234:
 2867 001c 1831     		adds	r1, r1, #24
 2868 001e FFF7FEFF 		bl	vListInsert
 2869              	.LVL235:
2917:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2870              		.loc 1 2917 0
 2871 0022 0121     		movs	r1, #1
 2872 0024 2046     		mov	r0, r4
 2873 0026 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2874              	.LVL236:
2918:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2875              		.loc 1 2918 0
 2876 002a 10BD     		pop	{r4, pc}
 2877              	.LVL237:
 2878              	.L260:
 2879              		.align	2
 2880              	.L259:
 2881 002c 00000000 		.word	.LANCHOR10
 2882              		.cfi_endproc
 2883              	.LFE27:
 2885              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 2886              		.align	1
 2887              		.global	vTaskPlaceOnUnorderedEventList
 2888              		.syntax unified
 2889              		.thumb
 2890              		.thumb_func
 2891              		.fpu fpv4-sp-d16
 2893              	vTaskPlaceOnUnorderedEventList:
 2894              	.LFB28:
2922:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 2895              		.loc 1 2922 0
 2896              		.cfi_startproc
 2897              		@ args = 0, pretend = 0, frame = 0
 2898              		@ frame_needed = 0, uses_anonymous_args = 0
 2899              	.LVL238:
2923:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2900              		.loc 1 2923 0
 2901 0000 40B9     		cbnz	r0, .L262
 2902              	.LBB150:
 2903              	.LBB151:
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2904              		.loc 2 195 0
ARM GAS  /tmp/ccPN8tEQ.s 			page 149


 2905              		.syntax unified
 2906              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2907 0002 4FF01003 			mov r3, #16												
 2908 0006 83F31188 		msr basepri, r3											
 2909 000a BFF36F8F 		isb														
 2910 000e BFF34F8F 		dsb														
 2911              	
 2912              	@ 0 "" 2
 2913              	.LVL239:
 2914              		.thumb
 2915              		.syntax unified
 2916              	.L263:
 2917 0012 FEE7     		b	.L263
 2918              	.L262:
 2919 0014 0346     		mov	r3, r0
 2920              	.LBE151:
 2921              	.LBE150:
2927:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2922              		.loc 1 2927 0
 2923 0016 0F48     		ldr	r0, .L268
 2924              	.LVL240:
 2925 0018 0068     		ldr	r0, [r0]
 2926 001a 40B9     		cbnz	r0, .L264
 2927              	.LBB152:
 2928              	.LBB153:
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2929              		.loc 2 195 0
 2930              		.syntax unified
 2931              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2932 001c 4FF01003 			mov r3, #16												
 2933 0020 83F31188 		msr basepri, r3											
 2934 0024 BFF36F8F 		isb														
 2935 0028 BFF34F8F 		dsb														
 2936              	
 2937              	@ 0 "" 2
 2938              	.LVL241:
 2939              		.thumb
 2940              		.syntax unified
 2941              	.L265:
 2942 002c FEE7     		b	.L265
 2943              	.LVL242:
 2944              	.L264:
 2945              	.LBE153:
 2946              	.LBE152:
2922:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 2947              		.loc 1 2922 0
 2948 002e 10B5     		push	{r4, lr}
 2949              	.LCFI32:
 2950              		.cfi_def_cfa_offset 8
 2951              		.cfi_offset 4, -8
 2952              		.cfi_offset 14, -4
 2953 0030 1846     		mov	r0, r3
 2954 0032 1446     		mov	r4, r2
 2955 0034 0B46     		mov	r3, r1
 2956              	.LVL243:
2932:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2957              		.loc 1 2932 0
ARM GAS  /tmp/ccPN8tEQ.s 			page 150


 2958 0036 084A     		ldr	r2, .L268+4
 2959              	.LVL244:
 2960 0038 1168     		ldr	r1, [r2]
 2961              	.LVL245:
 2962 003a 43F00043 		orr	r3, r3, #-2147483648
 2963              	.LVL246:
 2964 003e 8B61     		str	r3, [r1, #24]
2939:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2965              		.loc 1 2939 0
 2966 0040 1168     		ldr	r1, [r2]
 2967 0042 1831     		adds	r1, r1, #24
 2968 0044 FFF7FEFF 		bl	vListInsertEnd
 2969              	.LVL247:
2941:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2970              		.loc 1 2941 0
 2971 0048 0121     		movs	r1, #1
 2972 004a 2046     		mov	r0, r4
 2973 004c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2974              	.LVL248:
2942:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2975              		.loc 1 2942 0
 2976 0050 10BD     		pop	{r4, pc}
 2977              	.LVL249:
 2978              	.L269:
 2979 0052 00BF     		.align	2
 2980              	.L268:
 2981 0054 00000000 		.word	.LANCHOR16
 2982 0058 00000000 		.word	.LANCHOR10
 2983              		.cfi_endproc
 2984              	.LFE28:
 2986              		.section	.text.vTaskPlaceOnEventListRestricted,"ax",%progbits
 2987              		.align	1
 2988              		.global	vTaskPlaceOnEventListRestricted
 2989              		.syntax unified
 2990              		.thumb
 2991              		.thumb_func
 2992              		.fpu fpv4-sp-d16
 2994              	vTaskPlaceOnEventListRestricted:
 2995              	.LFB29:
2948:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxEventList );
 2996              		.loc 1 2948 0
 2997              		.cfi_startproc
 2998              		@ args = 0, pretend = 0, frame = 0
 2999              		@ frame_needed = 0, uses_anonymous_args = 0
 3000              	.LVL250:
 3001 0000 38B5     		push	{r3, r4, r5, lr}
 3002              	.LCFI33:
 3003              		.cfi_def_cfa_offset 16
 3004              		.cfi_offset 3, -16
 3005              		.cfi_offset 4, -12
 3006              		.cfi_offset 5, -8
 3007              		.cfi_offset 14, -4
2949:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3008              		.loc 1 2949 0
 3009 0002 40B9     		cbnz	r0, .L271
 3010              	.LBB154:
 3011              	.LBB155:
ARM GAS  /tmp/ccPN8tEQ.s 			page 151


 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3012              		.loc 2 195 0
 3013              		.syntax unified
 3014              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3015 0004 4FF01003 			mov r3, #16												
 3016 0008 83F31188 		msr basepri, r3											
 3017 000c BFF36F8F 		isb														
 3018 0010 BFF34F8F 		dsb														
 3019              	
 3020              	@ 0 "" 2
 3021              	.LVL251:
 3022              		.thumb
 3023              		.syntax unified
 3024              	.L272:
 3025 0014 FEE7     		b	.L272
 3026              	.L271:
 3027 0016 0C46     		mov	r4, r1
 3028 0018 1546     		mov	r5, r2
 3029              	.LBE155:
 3030              	.LBE154:
2961:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3031              		.loc 1 2961 0
 3032 001a 064A     		ldr	r2, .L276
 3033              	.LVL252:
 3034 001c 1168     		ldr	r1, [r2]
 3035              	.LVL253:
 3036 001e 1831     		adds	r1, r1, #24
 3037 0020 FFF7FEFF 		bl	vListInsertEnd
 3038              	.LVL254:
2966:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3039              		.loc 1 2966 0
 3040 0024 0DB1     		cbz	r5, .L273
2968:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3041              		.loc 1 2968 0
 3042 0026 4FF0FF34 		mov	r4, #-1
 3043              	.LVL255:
 3044              	.L273:
2972:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3045              		.loc 1 2972 0
 3046 002a 2946     		mov	r1, r5
 3047 002c 2046     		mov	r0, r4
 3048 002e FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3049              	.LVL256:
2973:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3050              		.loc 1 2973 0
 3051 0032 38BD     		pop	{r3, r4, r5, pc}
 3052              	.LVL257:
 3053              	.L277:
 3054              		.align	2
 3055              	.L276:
 3056 0034 00000000 		.word	.LANCHOR10
 3057              		.cfi_endproc
 3058              	.LFE29:
 3060              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 3061              		.align	1
 3062              		.global	xTaskRemoveFromEventList
 3063              		.syntax unified
ARM GAS  /tmp/ccPN8tEQ.s 			page 152


 3064              		.thumb
 3065              		.thumb_func
 3066              		.fpu fpv4-sp-d16
 3068              	xTaskRemoveFromEventList:
 3069              	.LFB30:
2979:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
 3070              		.loc 1 2979 0
 3071              		.cfi_startproc
 3072              		@ args = 0, pretend = 0, frame = 0
 3073              		@ frame_needed = 0, uses_anonymous_args = 0
 3074              	.LVL258:
 3075 0000 38B5     		push	{r3, r4, r5, lr}
 3076              	.LCFI34:
 3077              		.cfi_def_cfa_offset 16
 3078              		.cfi_offset 3, -16
 3079              		.cfi_offset 4, -12
 3080              		.cfi_offset 5, -8
 3081              		.cfi_offset 14, -4
2996:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3082              		.loc 1 2996 0
 3083 0002 C368     		ldr	r3, [r0, #12]
 3084 0004 DC68     		ldr	r4, [r3, #12]
 3085              	.LVL259:
2997:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 3086              		.loc 1 2997 0
 3087 0006 44B9     		cbnz	r4, .L279
 3088              	.LBB156:
 3089              	.LBB157:
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3090              		.loc 2 195 0
 3091              		.syntax unified
 3092              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3093 0008 4FF01003 			mov r3, #16												
 3094 000c 83F31188 		msr basepri, r3											
 3095 0010 BFF36F8F 		isb														
 3096 0014 BFF34F8F 		dsb														
 3097              	
 3098              	@ 0 "" 2
 3099              	.LVL260:
 3100              		.thumb
 3101              		.syntax unified
 3102              	.L280:
 3103 0018 FEE7     		b	.L280
 3104              	.L279:
 3105              	.LBE157:
 3106              	.LBE156:
2998:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3107              		.loc 1 2998 0
 3108 001a 04F11805 		add	r5, r4, #24
 3109 001e 2846     		mov	r0, r5
 3110              	.LVL261:
 3111 0020 FFF7FEFF 		bl	uxListRemove
 3112              	.LVL262:
3000:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3113              		.loc 1 3000 0
 3114 0024 134B     		ldr	r3, .L286
 3115 0026 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccPN8tEQ.s 			page 153


 3116 0028 E3B9     		cbnz	r3, .L281
3002:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 3117              		.loc 1 3002 0
 3118 002a 251D     		adds	r5, r4, #4
 3119 002c 2846     		mov	r0, r5
 3120 002e FFF7FEFF 		bl	uxListRemove
 3121              	.LVL263:
3003:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3122              		.loc 1 3003 0
 3123 0032 E36A     		ldr	r3, [r4, #44]
 3124 0034 0122     		movs	r2, #1
 3125 0036 9A40     		lsls	r2, r2, r3
 3126 0038 0F49     		ldr	r1, .L286+4
 3127 003a 0868     		ldr	r0, [r1]
 3128 003c 0243     		orrs	r2, r2, r0
 3129 003e 0A60     		str	r2, [r1]
 3130 0040 03EB8303 		add	r3, r3, r3, lsl #2
 3131 0044 9A00     		lsls	r2, r3, #2
 3132 0046 2946     		mov	r1, r5
 3133 0048 0C48     		ldr	r0, .L286+8
 3134 004a 1044     		add	r0, r0, r2
 3135 004c FFF7FEFF 		bl	vListInsertEnd
 3136              	.LVL264:
 3137              	.L282:
3012:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3138              		.loc 1 3012 0
 3139 0050 E26A     		ldr	r2, [r4, #44]
 3140 0052 0B4B     		ldr	r3, .L286+12
 3141 0054 1B68     		ldr	r3, [r3]
 3142 0056 DB6A     		ldr	r3, [r3, #44]
 3143 0058 9A42     		cmp	r2, r3
 3144 005a 08D9     		bls	.L284
 3145              	.LVL265:
3021:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3146              		.loc 1 3021 0
 3147 005c 0120     		movs	r0, #1
 3148 005e 094B     		ldr	r3, .L286+16
 3149 0060 1860     		str	r0, [r3]
 3150              	.LVL266:
 3151              	.L278:
3043:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3152              		.loc 1 3043 0
 3153 0062 38BD     		pop	{r3, r4, r5, pc}
 3154              	.LVL267:
 3155              	.L281:
3009:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3156              		.loc 1 3009 0
 3157 0064 2946     		mov	r1, r5
 3158 0066 0848     		ldr	r0, .L286+20
 3159 0068 FFF7FEFF 		bl	vListInsertEnd
 3160              	.LVL268:
 3161 006c F0E7     		b	.L282
 3162              	.L284:
3025:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3163              		.loc 1 3025 0
 3164 006e 0020     		movs	r0, #0
 3165              	.LVL269:
ARM GAS  /tmp/ccPN8tEQ.s 			page 154


3042:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3166              		.loc 1 3042 0
 3167 0070 F7E7     		b	.L278
 3168              	.L287:
 3169 0072 00BF     		.align	2
 3170              	.L286:
 3171 0074 00000000 		.word	.LANCHOR16
 3172 0078 00000000 		.word	.LANCHOR13
 3173 007c 00000000 		.word	.LANCHOR4
 3174 0080 00000000 		.word	.LANCHOR10
 3175 0084 00000000 		.word	.LANCHOR20
 3176 0088 00000000 		.word	.LANCHOR1
 3177              		.cfi_endproc
 3178              	.LFE30:
 3180              		.section	.text.vTaskRemoveFromUnorderedEventList,"ax",%progbits
 3181              		.align	1
 3182              		.global	vTaskRemoveFromUnorderedEventList
 3183              		.syntax unified
 3184              		.thumb
 3185              		.thumb_func
 3186              		.fpu fpv4-sp-d16
 3188              	vTaskRemoveFromUnorderedEventList:
 3189              	.LFB31:
3047:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
 3190              		.loc 1 3047 0
 3191              		.cfi_startproc
 3192              		@ args = 0, pretend = 0, frame = 0
 3193              		@ frame_needed = 0, uses_anonymous_args = 0
 3194              	.LVL270:
 3195 0000 38B5     		push	{r3, r4, r5, lr}
 3196              	.LCFI35:
 3197              		.cfi_def_cfa_offset 16
 3198              		.cfi_offset 3, -16
 3199              		.cfi_offset 4, -12
 3200              		.cfi_offset 5, -8
 3201              		.cfi_offset 14, -4
3052:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3202              		.loc 1 3052 0
 3203 0002 1C4B     		ldr	r3, .L296
 3204 0004 1B68     		ldr	r3, [r3]
 3205 0006 43B9     		cbnz	r3, .L289
 3206              	.LBB158:
 3207              	.LBB159:
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3208              		.loc 2 195 0
 3209              		.syntax unified
 3210              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3211 0008 4FF01003 			mov r3, #16												
 3212 000c 83F31188 		msr basepri, r3											
 3213 0010 BFF36F8F 		isb														
 3214 0014 BFF34F8F 		dsb														
 3215              	
 3216              	@ 0 "" 2
 3217              	.LVL271:
 3218              		.thumb
 3219              		.syntax unified
 3220              	.L290:
ARM GAS  /tmp/ccPN8tEQ.s 			page 155


 3221 0018 FEE7     		b	.L290
 3222              	.L289:
 3223              	.LBE159:
 3224              	.LBE158:
3055:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3225              		.loc 1 3055 0
 3226 001a 41F00041 		orr	r1, r1, #-2147483648
 3227              	.LVL272:
 3228 001e 0160     		str	r1, [r0]
3059:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3229              		.loc 1 3059 0
 3230 0020 C468     		ldr	r4, [r0, #12]
 3231              	.LVL273:
3060:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 3232              		.loc 1 3060 0
 3233 0022 F4B1     		cbz	r4, .L295
3061:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3234              		.loc 1 3061 0
 3235 0024 FFF7FEFF 		bl	uxListRemove
 3236              	.LVL274:
3066:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 3237              		.loc 1 3066 0
 3238 0028 251D     		adds	r5, r4, #4
 3239 002a 2846     		mov	r0, r5
 3240 002c FFF7FEFF 		bl	uxListRemove
 3241              	.LVL275:
3067:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3242              		.loc 1 3067 0
 3243 0030 E36A     		ldr	r3, [r4, #44]
 3244 0032 0122     		movs	r2, #1
 3245 0034 9A40     		lsls	r2, r2, r3
 3246 0036 1049     		ldr	r1, .L296+4
 3247 0038 0868     		ldr	r0, [r1]
 3248 003a 0243     		orrs	r2, r2, r0
 3249 003c 0A60     		str	r2, [r1]
 3250 003e 03EB8303 		add	r3, r3, r3, lsl #2
 3251 0042 9A00     		lsls	r2, r3, #2
 3252 0044 2946     		mov	r1, r5
 3253 0046 0D48     		ldr	r0, .L296+8
 3254 0048 1044     		add	r0, r0, r2
 3255 004a FFF7FEFF 		bl	vListInsertEnd
 3256              	.LVL276:
3069:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3257              		.loc 1 3069 0
 3258 004e E26A     		ldr	r2, [r4, #44]
 3259 0050 0B4B     		ldr	r3, .L296+12
 3260 0052 1B68     		ldr	r3, [r3]
 3261 0054 DB6A     		ldr	r3, [r3, #44]
 3262 0056 9A42     		cmp	r2, r3
 3263 0058 02D9     		bls	.L288
3075:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3264              		.loc 1 3075 0
 3265 005a 0A4B     		ldr	r3, .L296+16
 3266 005c 0122     		movs	r2, #1
 3267 005e 1A60     		str	r2, [r3]
 3268              	.L288:
3077:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/ccPN8tEQ.s 			page 156


 3269              		.loc 1 3077 0
 3270 0060 38BD     		pop	{r3, r4, r5, pc}
 3271              	.LVL277:
 3272              	.L295:
 3273              	.LBB160:
 3274              	.LBB161:
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3275              		.loc 2 195 0
 3276              		.syntax unified
 3277              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3278 0062 4FF01003 			mov r3, #16												
 3279 0066 83F31188 		msr basepri, r3											
 3280 006a BFF36F8F 		isb														
 3281 006e BFF34F8F 		dsb														
 3282              	
 3283              	@ 0 "" 2
 3284              	.LVL278:
 3285              		.thumb
 3286              		.syntax unified
 3287              	.L292:
 3288 0072 FEE7     		b	.L292
 3289              	.L297:
 3290              		.align	2
 3291              	.L296:
 3292 0074 00000000 		.word	.LANCHOR16
 3293 0078 00000000 		.word	.LANCHOR13
 3294 007c 00000000 		.word	.LANCHOR4
 3295 0080 00000000 		.word	.LANCHOR10
 3296 0084 00000000 		.word	.LANCHOR20
 3297              	.LBE161:
 3298              	.LBE160:
 3299              		.cfi_endproc
 3300              	.LFE31:
 3302              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 3303              		.align	1
 3304              		.global	vTaskSetTimeOutState
 3305              		.syntax unified
 3306              		.thumb
 3307              		.thumb_func
 3308              		.fpu fpv4-sp-d16
 3310              	vTaskSetTimeOutState:
 3311              	.LFB32:
3081:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 3312              		.loc 1 3081 0
 3313              		.cfi_startproc
 3314              		@ args = 0, pretend = 0, frame = 0
 3315              		@ frame_needed = 0, uses_anonymous_args = 0
 3316              	.LVL279:
3082:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 3317              		.loc 1 3082 0
 3318 0000 40B9     		cbnz	r0, .L299
 3319              	.LBB162:
 3320              	.LBB163:
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3321              		.loc 2 195 0
 3322              		.syntax unified
 3323              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
ARM GAS  /tmp/ccPN8tEQ.s 			page 157


 3324 0002 4FF01003 			mov r3, #16												
 3325 0006 83F31188 		msr basepri, r3											
 3326 000a BFF36F8F 		isb														
 3327 000e BFF34F8F 		dsb														
 3328              	
 3329              	@ 0 "" 2
 3330              	.LVL280:
 3331              		.thumb
 3332              		.syntax unified
 3333              	.L300:
 3334 0012 FEE7     		b	.L300
 3335              	.L299:
 3336              	.LBE163:
 3337              	.LBE162:
3081:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 3338              		.loc 1 3081 0
 3339 0014 10B5     		push	{r4, lr}
 3340              	.LCFI36:
 3341              		.cfi_def_cfa_offset 8
 3342              		.cfi_offset 4, -8
 3343              		.cfi_offset 14, -4
 3344 0016 0446     		mov	r4, r0
3083:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3345              		.loc 1 3083 0
 3346 0018 FFF7FEFF 		bl	vPortEnterCritical
 3347              	.LVL281:
3085:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
 3348              		.loc 1 3085 0
 3349 001c 044B     		ldr	r3, .L303
 3350 001e 1B68     		ldr	r3, [r3]
 3351 0020 2360     		str	r3, [r4]
3086:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3352              		.loc 1 3086 0
 3353 0022 044B     		ldr	r3, .L303+4
 3354 0024 1B68     		ldr	r3, [r3]
 3355 0026 6360     		str	r3, [r4, #4]
3088:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3356              		.loc 1 3088 0
 3357 0028 FFF7FEFF 		bl	vPortExitCritical
 3358              	.LVL282:
3089:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3359              		.loc 1 3089 0
 3360 002c 10BD     		pop	{r4, pc}
 3361              	.LVL283:
 3362              	.L304:
 3363 002e 00BF     		.align	2
 3364              	.L303:
 3365 0030 00000000 		.word	.LANCHOR18
 3366 0034 00000000 		.word	.LANCHOR15
 3367              		.cfi_endproc
 3368              	.LFE32:
 3370              		.section	.text.vTaskInternalSetTimeOutState,"ax",%progbits
 3371              		.align	1
 3372              		.global	vTaskInternalSetTimeOutState
 3373              		.syntax unified
 3374              		.thumb
 3375              		.thumb_func
ARM GAS  /tmp/ccPN8tEQ.s 			page 158


 3376              		.fpu fpv4-sp-d16
 3378              	vTaskInternalSetTimeOutState:
 3379              	.LFB33:
3093:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* For internal use only as it does not use a critical section. */
 3380              		.loc 1 3093 0
 3381              		.cfi_startproc
 3382              		@ args = 0, pretend = 0, frame = 0
 3383              		@ frame_needed = 0, uses_anonymous_args = 0
 3384              		@ link register save eliminated.
 3385              	.LVL284:
3095:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 3386              		.loc 1 3095 0
 3387 0000 034B     		ldr	r3, .L306
 3388 0002 1B68     		ldr	r3, [r3]
 3389 0004 0360     		str	r3, [r0]
3096:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3390              		.loc 1 3096 0
 3391 0006 034B     		ldr	r3, .L306+4
 3392 0008 1B68     		ldr	r3, [r3]
 3393 000a 4360     		str	r3, [r0, #4]
3097:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3394              		.loc 1 3097 0
 3395 000c 7047     		bx	lr
 3396              	.L307:
 3397 000e 00BF     		.align	2
 3398              	.L306:
 3399 0010 00000000 		.word	.LANCHOR18
 3400 0014 00000000 		.word	.LANCHOR15
 3401              		.cfi_endproc
 3402              	.LFE33:
 3404              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 3405              		.align	1
 3406              		.global	xTaskCheckForTimeOut
 3407              		.syntax unified
 3408              		.thumb
 3409              		.thumb_func
 3410              		.fpu fpv4-sp-d16
 3412              	xTaskCheckForTimeOut:
 3413              	.LFB34:
3101:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
 3414              		.loc 1 3101 0
 3415              		.cfi_startproc
 3416              		@ args = 0, pretend = 0, frame = 0
 3417              		@ frame_needed = 0, uses_anonymous_args = 0
 3418              	.LVL285:
 3419 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3420              	.LCFI37:
 3421              		.cfi_def_cfa_offset 24
 3422              		.cfi_offset 3, -24
 3423              		.cfi_offset 4, -20
 3424              		.cfi_offset 5, -16
 3425              		.cfi_offset 6, -12
 3426              		.cfi_offset 7, -8
 3427              		.cfi_offset 14, -4
3104:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
 3428              		.loc 1 3104 0
 3429 0002 50B1     		cbz	r0, .L319
ARM GAS  /tmp/ccPN8tEQ.s 			page 159


 3430 0004 0546     		mov	r5, r0
3105:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3431              		.loc 1 3105 0
 3432 0006 89B9     		cbnz	r1, .L311
 3433              	.LBB164:
 3434              	.LBB165:
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3435              		.loc 2 195 0
 3436              		.syntax unified
 3437              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3438 0008 4FF01003 			mov r3, #16												
 3439 000c 83F31188 		msr basepri, r3											
 3440 0010 BFF36F8F 		isb														
 3441 0014 BFF34F8F 		dsb														
 3442              	
 3443              	@ 0 "" 2
 3444              	.LVL286:
 3445              		.thumb
 3446              		.syntax unified
 3447              	.L312:
 3448 0018 FEE7     		b	.L312
 3449              	.L319:
 3450              	.LBE165:
 3451              	.LBE164:
 3452              	.LBB166:
 3453              	.LBB167:
 3454              		.syntax unified
 3455              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3456 001a 4FF01003 			mov r3, #16												
 3457 001e 83F31188 		msr basepri, r3											
 3458 0022 BFF36F8F 		isb														
 3459 0026 BFF34F8F 		dsb														
 3460              	
 3461              	@ 0 "" 2
 3462              	.LVL287:
 3463              		.thumb
 3464              		.syntax unified
 3465              	.L310:
 3466 002a FEE7     		b	.L310
 3467              	.L311:
 3468 002c 0C46     		mov	r4, r1
 3469              	.LBE167:
 3470              	.LBE166:
3107:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3471              		.loc 1 3107 0
 3472 002e FFF7FEFF 		bl	vPortEnterCritical
 3473              	.LVL288:
 3474              	.LBB168:
3110:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 3475              		.loc 1 3110 0
 3476 0032 114B     		ldr	r3, .L321
 3477 0034 1968     		ldr	r1, [r3]
 3478              	.LVL289:
3111:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3479              		.loc 1 3111 0
 3480 0036 6868     		ldr	r0, [r5, #4]
 3481 0038 0A1A     		subs	r2, r1, r0
ARM GAS  /tmp/ccPN8tEQ.s 			page 160


 3482              	.LVL290:
3125:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3483              		.loc 1 3125 0
 3484 003a 2368     		ldr	r3, [r4]
 3485 003c B3F1FF3F 		cmp	r3, #-1
 3486 0040 16D0     		beq	.L316
3135:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3487              		.loc 1 3135 0
 3488 0042 2F68     		ldr	r7, [r5]
 3489 0044 0D4E     		ldr	r6, .L321+4
 3490 0046 3668     		ldr	r6, [r6]
 3491 0048 B742     		cmp	r7, r6
 3492 004a 01D0     		beq	.L314
3135:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3493              		.loc 1 3135 0 is_stmt 0 discriminator 1
 3494 004c 8842     		cmp	r0, r1
 3495 004e 11D9     		bls	.L317
 3496              	.L314:
3144:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3497              		.loc 1 3144 0 is_stmt 1
 3498 0050 9342     		cmp	r3, r2
 3499 0052 03D8     		bhi	.L320
3153:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
 3500              		.loc 1 3153 0
 3501 0054 0023     		movs	r3, #0
 3502 0056 2360     		str	r3, [r4]
 3503              	.LVL291:
3154:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3504              		.loc 1 3154 0
 3505 0058 0124     		movs	r4, #1
 3506              	.LVL292:
 3507 005a 05E0     		b	.L313
 3508              	.LVL293:
 3509              	.L320:
3147:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
 3510              		.loc 1 3147 0
 3511 005c 9B1A     		subs	r3, r3, r2
 3512 005e 2360     		str	r3, [r4]
3148:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
 3513              		.loc 1 3148 0
 3514 0060 2846     		mov	r0, r5
 3515 0062 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 3516              	.LVL294:
3149:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3517              		.loc 1 3149 0
 3518 0066 0024     		movs	r4, #0
 3519              	.LVL295:
 3520              	.L313:
 3521              	.LBE168:
3157:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3522              		.loc 1 3157 0
 3523 0068 FFF7FEFF 		bl	vPortExitCritical
 3524              	.LVL296:
3160:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3525              		.loc 1 3160 0
 3526 006c 2046     		mov	r0, r4
 3527 006e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
ARM GAS  /tmp/ccPN8tEQ.s 			page 161


 3528              	.LVL297:
 3529              	.L316:
 3530              	.LBB169:
3130:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3531              		.loc 1 3130 0
 3532 0070 0024     		movs	r4, #0
 3533              	.LVL298:
 3534 0072 F9E7     		b	.L313
 3535              	.LVL299:
 3536              	.L317:
3142:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3537              		.loc 1 3142 0
 3538 0074 0124     		movs	r4, #1
 3539              	.LVL300:
 3540 0076 F7E7     		b	.L313
 3541              	.L322:
 3542              		.align	2
 3543              	.L321:
 3544 0078 00000000 		.word	.LANCHOR15
 3545 007c 00000000 		.word	.LANCHOR18
 3546              	.LBE169:
 3547              		.cfi_endproc
 3548              	.LFE34:
 3550              		.section	.text.vTaskMissedYield,"ax",%progbits
 3551              		.align	1
 3552              		.global	vTaskMissedYield
 3553              		.syntax unified
 3554              		.thumb
 3555              		.thumb_func
 3556              		.fpu fpv4-sp-d16
 3558              	vTaskMissedYield:
 3559              	.LFB35:
3164:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
 3560              		.loc 1 3164 0
 3561              		.cfi_startproc
 3562              		@ args = 0, pretend = 0, frame = 0
 3563              		@ frame_needed = 0, uses_anonymous_args = 0
 3564              		@ link register save eliminated.
3165:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3565              		.loc 1 3165 0
 3566 0000 014B     		ldr	r3, .L324
 3567 0002 0122     		movs	r2, #1
 3568 0004 1A60     		str	r2, [r3]
3166:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3569              		.loc 1 3166 0
 3570 0006 7047     		bx	lr
 3571              	.L325:
 3572              		.align	2
 3573              	.L324:
 3574 0008 00000000 		.word	.LANCHOR20
 3575              		.cfi_endproc
 3576              	.LFE35:
 3578              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 3579              		.align	1
 3580              		.global	xTaskGetCurrentTaskHandle
 3581              		.syntax unified
 3582              		.thumb
ARM GAS  /tmp/ccPN8tEQ.s 			page 162


 3583              		.thumb_func
 3584              		.fpu fpv4-sp-d16
 3586              	xTaskGetCurrentTaskHandle:
 3587              	.LFB41:
3751:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
 3588              		.loc 1 3751 0
 3589              		.cfi_startproc
 3590              		@ args = 0, pretend = 0, frame = 0
 3591              		@ frame_needed = 0, uses_anonymous_args = 0
 3592              		@ link register save eliminated.
3757:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3593              		.loc 1 3757 0
 3594 0000 014B     		ldr	r3, .L327
 3595 0002 1868     		ldr	r0, [r3]
 3596              	.LVL301:
3760:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3597              		.loc 1 3760 0
 3598 0004 7047     		bx	lr
 3599              	.L328:
 3600 0006 00BF     		.align	2
 3601              	.L327:
 3602 0008 00000000 		.word	.LANCHOR10
 3603              		.cfi_endproc
 3604              	.LFE41:
 3606              		.section	.text.xTaskGetSchedulerState,"ax",%progbits
 3607              		.align	1
 3608              		.global	xTaskGetSchedulerState
 3609              		.syntax unified
 3610              		.thumb
 3611              		.thumb_func
 3612              		.fpu fpv4-sp-d16
 3614              	xTaskGetSchedulerState:
 3615              	.LFB42:
3768:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 3616              		.loc 1 3768 0
 3617              		.cfi_startproc
 3618              		@ args = 0, pretend = 0, frame = 0
 3619              		@ frame_needed = 0, uses_anonymous_args = 0
 3620              		@ link register save eliminated.
3771:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3621              		.loc 1 3771 0
 3622 0000 054B     		ldr	r3, .L334
 3623 0002 1B68     		ldr	r3, [r3]
 3624 0004 33B1     		cbz	r3, .L331
3777:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3625              		.loc 1 3777 0
 3626 0006 054B     		ldr	r3, .L334+4
 3627 0008 1B68     		ldr	r3, [r3]
 3628 000a 0BB1     		cbz	r3, .L333
3783:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3629              		.loc 1 3783 0
 3630 000c 0020     		movs	r0, #0
 3631              	.LVL302:
3788:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3632              		.loc 1 3788 0
 3633 000e 7047     		bx	lr
 3634              	.LVL303:
ARM GAS  /tmp/ccPN8tEQ.s 			page 163


 3635              	.L333:
3779:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3636              		.loc 1 3779 0
 3637 0010 0220     		movs	r0, #2
 3638 0012 7047     		bx	lr
 3639              	.L331:
3773:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3640              		.loc 1 3773 0
 3641 0014 0120     		movs	r0, #1
 3642 0016 7047     		bx	lr
 3643              	.L335:
 3644              		.align	2
 3645              	.L334:
 3646 0018 00000000 		.word	.LANCHOR11
 3647 001c 00000000 		.word	.LANCHOR16
 3648              		.cfi_endproc
 3649              	.LFE42:
 3651              		.section	.text.xTaskPriorityInherit,"ax",%progbits
 3652              		.align	1
 3653              		.global	xTaskPriorityInherit
 3654              		.syntax unified
 3655              		.thumb
 3656              		.thumb_func
 3657              		.fpu fpv4-sp-d16
 3659              	xTaskPriorityInherit:
 3660              	.LFB43:
3796:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 3661              		.loc 1 3796 0
 3662              		.cfi_startproc
 3663              		@ args = 0, pretend = 0, frame = 0
 3664              		@ frame_needed = 0, uses_anonymous_args = 0
 3665              	.LVL304:
3803:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3666              		.loc 1 3803 0
 3667 0000 0028     		cmp	r0, #0
 3668 0002 50D0     		beq	.L343
3796:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 3669              		.loc 1 3796 0
 3670 0004 38B5     		push	{r3, r4, r5, lr}
 3671              	.LCFI38:
 3672              		.cfi_def_cfa_offset 16
 3673              		.cfi_offset 3, -16
 3674              		.cfi_offset 4, -12
 3675              		.cfi_offset 5, -8
 3676              		.cfi_offset 14, -4
 3677 0006 0446     		mov	r4, r0
3808:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3678              		.loc 1 3808 0
 3679 0008 C26A     		ldr	r2, [r0, #44]
 3680 000a 2849     		ldr	r1, .L351
 3681 000c 0968     		ldr	r1, [r1]
 3682 000e C96A     		ldr	r1, [r1, #44]
 3683 0010 8A42     		cmp	r2, r1
 3684 0012 3ED2     		bcs	.L338
3813:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3685              		.loc 1 3813 0
 3686 0014 8169     		ldr	r1, [r0, #24]
ARM GAS  /tmp/ccPN8tEQ.s 			page 164


 3687 0016 0029     		cmp	r1, #0
 3688 0018 05DB     		blt	.L339
3815:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3689              		.loc 1 3815 0
 3690 001a 2449     		ldr	r1, .L351
 3691 001c 0968     		ldr	r1, [r1]
 3692 001e C96A     		ldr	r1, [r1, #44]
 3693 0020 C1F10701 		rsb	r1, r1, #7
 3694 0024 8161     		str	r1, [r0, #24]
 3695              	.L339:
3824:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3696              		.loc 1 3824 0
 3697 0026 6069     		ldr	r0, [r4, #20]
 3698              	.LVL305:
 3699 0028 02EB8202 		add	r2, r2, r2, lsl #2
 3700 002c 9100     		lsls	r1, r2, #2
 3701 002e 204A     		ldr	r2, .L351+4
 3702 0030 0A44     		add	r2, r2, r1
 3703 0032 9042     		cmp	r0, r2
 3704 0034 05D0     		beq	.L349
3842:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3705              		.loc 1 3842 0
 3706 0036 1D4A     		ldr	r2, .L351
 3707 0038 1268     		ldr	r2, [r2]
 3708 003a D26A     		ldr	r2, [r2, #44]
 3709 003c E262     		str	r2, [r4, #44]
3848:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3710              		.loc 1 3848 0
 3711 003e 0120     		movs	r0, #1
 3712              	.LVL306:
 3713              	.L336:
3875:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3714              		.loc 1 3875 0
 3715 0040 38BD     		pop	{r3, r4, r5, pc}
 3716              	.LVL307:
 3717              	.L349:
3826:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 3718              		.loc 1 3826 0
 3719 0042 251D     		adds	r5, r4, #4
 3720 0044 2846     		mov	r0, r5
 3721 0046 FFF7FEFF 		bl	uxListRemove
 3722              	.LVL308:
 3723 004a 68B9     		cbnz	r0, .L342
3828:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 3724              		.loc 1 3828 0
 3725 004c E36A     		ldr	r3, [r4, #44]
 3726 004e 03EB8301 		add	r1, r3, r3, lsl #2
 3727 0052 8A00     		lsls	r2, r1, #2
 3728 0054 1649     		ldr	r1, .L351+4
 3729 0056 8A58     		ldr	r2, [r1, r2]
 3730 0058 32B9     		cbnz	r2, .L342
3828:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 3731              		.loc 1 3828 0 is_stmt 0 discriminator 1
 3732 005a 0122     		movs	r2, #1
 3733 005c 9A40     		lsls	r2, r2, r3
 3734 005e 1549     		ldr	r1, .L351+8
 3735 0060 0B68     		ldr	r3, [r1]
ARM GAS  /tmp/ccPN8tEQ.s 			page 165


 3736 0062 23EA0203 		bic	r3, r3, r2
 3737 0066 0B60     		str	r3, [r1]
 3738              	.L342:
3836:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
 3739              		.loc 1 3836 0 is_stmt 1
 3740 0068 104B     		ldr	r3, .L351
 3741 006a 1B68     		ldr	r3, [r3]
 3742 006c DB6A     		ldr	r3, [r3, #44]
 3743 006e E362     		str	r3, [r4, #44]
3837:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3744              		.loc 1 3837 0
 3745 0070 0124     		movs	r4, #1
 3746              	.LVL309:
 3747 0072 04FA03F2 		lsl	r2, r4, r3
 3748 0076 0F49     		ldr	r1, .L351+8
 3749 0078 0868     		ldr	r0, [r1]
 3750 007a 0243     		orrs	r2, r2, r0
 3751 007c 0A60     		str	r2, [r1]
 3752 007e 03EB8303 		add	r3, r3, r3, lsl #2
 3753 0082 9A00     		lsls	r2, r3, #2
 3754 0084 2946     		mov	r1, r5
 3755 0086 0A48     		ldr	r0, .L351+4
 3756 0088 1044     		add	r0, r0, r2
 3757 008a FFF7FEFF 		bl	vListInsertEnd
 3758              	.LVL310:
3848:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3759              		.loc 1 3848 0
 3760 008e 2046     		mov	r0, r4
 3761 0090 D6E7     		b	.L336
 3762              	.LVL311:
 3763              	.L338:
3852:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3764              		.loc 1 3852 0
 3765 0092 426C     		ldr	r2, [r0, #68]
 3766 0094 054B     		ldr	r3, .L351
 3767 0096 1B68     		ldr	r3, [r3]
 3768 0098 DB6A     		ldr	r3, [r3, #44]
 3769 009a 9A42     		cmp	r2, r3
 3770 009c 01D2     		bcs	.L350
3861:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3771              		.loc 1 3861 0
 3772 009e 0120     		movs	r0, #1
 3773              	.LVL312:
3874:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3774              		.loc 1 3874 0
 3775 00a0 CEE7     		b	.L336
 3776              	.LVL313:
 3777              	.L350:
3798:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3778              		.loc 1 3798 0
 3779 00a2 0020     		movs	r0, #0
 3780              	.LVL314:
 3781 00a4 CCE7     		b	.L336
 3782              	.LVL315:
 3783              	.L343:
 3784              	.LCFI39:
 3785              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/ccPN8tEQ.s 			page 166


 3786              		.cfi_restore 3
 3787              		.cfi_restore 4
 3788              		.cfi_restore 5
 3789              		.cfi_restore 14
 3790 00a6 0020     		movs	r0, #0
 3791              	.LVL316:
3875:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3792              		.loc 1 3875 0
 3793 00a8 7047     		bx	lr
 3794              	.L352:
 3795 00aa 00BF     		.align	2
 3796              	.L351:
 3797 00ac 00000000 		.word	.LANCHOR10
 3798 00b0 00000000 		.word	.LANCHOR4
 3799 00b4 00000000 		.word	.LANCHOR13
 3800              		.cfi_endproc
 3801              	.LFE43:
 3803              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 3804              		.align	1
 3805              		.global	xTaskPriorityDisinherit
 3806              		.syntax unified
 3807              		.thumb
 3808              		.thumb_func
 3809              		.fpu fpv4-sp-d16
 3811              	xTaskPriorityDisinherit:
 3812              	.LFB44:
3883:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 3813              		.loc 1 3883 0
 3814              		.cfi_startproc
 3815              		@ args = 0, pretend = 0, frame = 0
 3816              		@ frame_needed = 0, uses_anonymous_args = 0
 3817              	.LVL317:
3887:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3818              		.loc 1 3887 0
 3819 0000 0028     		cmp	r0, #0
 3820 0002 49D0     		beq	.L360
3883:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 3821              		.loc 1 3883 0
 3822 0004 38B5     		push	{r3, r4, r5, lr}
 3823              	.LCFI40:
 3824              		.cfi_def_cfa_offset 16
 3825              		.cfi_offset 3, -16
 3826              		.cfi_offset 4, -12
 3827              		.cfi_offset 5, -8
 3828              		.cfi_offset 14, -4
 3829 0006 0446     		mov	r4, r0
3893:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 3830              		.loc 1 3893 0
 3831 0008 264A     		ldr	r2, .L367
 3832 000a 1268     		ldr	r2, [r2]
 3833 000c 8242     		cmp	r2, r0
 3834 000e 08D0     		beq	.L355
 3835              	.LBB170:
 3836              	.LBB171:
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3837              		.loc 2 195 0
 3838              		.syntax unified
ARM GAS  /tmp/ccPN8tEQ.s 			page 167


 3839              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3840 0010 4FF01003 			mov r3, #16												
 3841 0014 83F31188 		msr basepri, r3											
 3842 0018 BFF36F8F 		isb														
 3843 001c BFF34F8F 		dsb														
 3844              	
 3845              	@ 0 "" 2
 3846              	.LVL318:
 3847              		.thumb
 3848              		.syntax unified
 3849              	.L356:
 3850 0020 FEE7     		b	.L356
 3851              	.L355:
 3852              	.LBE171:
 3853              	.LBE170:
3894:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 3854              		.loc 1 3894 0
 3855 0022 826C     		ldr	r2, [r0, #72]
 3856 0024 42B9     		cbnz	r2, .L357
 3857              	.LBB172:
 3858              	.LBB173:
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3859              		.loc 2 195 0
 3860              		.syntax unified
 3861              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3862 0026 4FF01003 			mov r3, #16												
 3863 002a 83F31188 		msr basepri, r3											
 3864 002e BFF36F8F 		isb														
 3865 0032 BFF34F8F 		dsb														
 3866              	
 3867              	@ 0 "" 2
 3868              	.LVL319:
 3869              		.thumb
 3870              		.syntax unified
 3871              	.L358:
 3872 0036 FEE7     		b	.L358
 3873              	.L357:
 3874              	.LBE173:
 3875              	.LBE172:
3895:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3876              		.loc 1 3895 0
 3877 0038 013A     		subs	r2, r2, #1
 3878 003a 8264     		str	r2, [r0, #72]
3899:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3879              		.loc 1 3899 0
 3880 003c C06A     		ldr	r0, [r0, #44]
 3881              	.LVL320:
 3882 003e 616C     		ldr	r1, [r4, #68]
 3883 0040 8842     		cmp	r0, r1
 3884 0042 2BD0     		beq	.L361
3902:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3885              		.loc 1 3902 0
 3886 0044 62BB     		cbnz	r2, .L362
3909:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 3887              		.loc 1 3909 0
 3888 0046 251D     		adds	r5, r4, #4
 3889 0048 2846     		mov	r0, r5
ARM GAS  /tmp/ccPN8tEQ.s 			page 168


 3890 004a FFF7FEFF 		bl	uxListRemove
 3891              	.LVL321:
 3892 004e 70B9     		cbnz	r0, .L359
3911:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 3893              		.loc 1 3911 0
 3894 0050 E26A     		ldr	r2, [r4, #44]
 3895 0052 1423     		movs	r3, #20
 3896 0054 03FB02F3 		mul	r3, r3, r2
 3897 0058 1349     		ldr	r1, .L367+4
 3898 005a CB58     		ldr	r3, [r1, r3]
 3899 005c 3BB9     		cbnz	r3, .L359
3911:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 3900              		.loc 1 3911 0 is_stmt 0 discriminator 1
 3901 005e 0123     		movs	r3, #1
 3902 0060 03FA02F2 		lsl	r2, r3, r2
 3903 0064 1149     		ldr	r1, .L367+8
 3904 0066 0B68     		ldr	r3, [r1]
 3905 0068 23EA0203 		bic	r3, r3, r2
 3906 006c 0B60     		str	r3, [r1]
 3907              	.L359:
3921:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3908              		.loc 1 3921 0 is_stmt 1
 3909 006e 636C     		ldr	r3, [r4, #68]
 3910 0070 E362     		str	r3, [r4, #44]
3926:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 3911              		.loc 1 3926 0
 3912 0072 C3F10702 		rsb	r2, r3, #7
 3913 0076 A261     		str	r2, [r4, #24]
3927:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3914              		.loc 1 3927 0
 3915 0078 0124     		movs	r4, #1
 3916              	.LVL322:
 3917 007a 04FA03F2 		lsl	r2, r4, r3
 3918 007e 0B49     		ldr	r1, .L367+8
 3919 0080 0868     		ldr	r0, [r1]
 3920 0082 0243     		orrs	r2, r2, r0
 3921 0084 0A60     		str	r2, [r1]
 3922 0086 2946     		mov	r1, r5
 3923 0088 074A     		ldr	r2, .L367+4
 3924 008a 1420     		movs	r0, #20
 3925 008c 00FB0320 		mla	r0, r0, r3, r2
 3926 0090 FFF7FEFF 		bl	vListInsertEnd
 3927              	.LVL323:
3937:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3928              		.loc 1 3937 0
 3929 0094 2046     		mov	r0, r4
 3930              	.LVL324:
 3931              	.L353:
3955:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3932              		.loc 1 3955 0
 3933 0096 38BD     		pop	{r3, r4, r5, pc}
 3934              	.LVL325:
 3935              	.L360:
 3936              	.LCFI41:
 3937              		.cfi_def_cfa_offset 0
 3938              		.cfi_restore 3
 3939              		.cfi_restore 4
ARM GAS  /tmp/ccPN8tEQ.s 			page 169


 3940              		.cfi_restore 5
 3941              		.cfi_restore 14
3885:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3942              		.loc 1 3885 0
 3943 0098 0020     		movs	r0, #0
 3944              	.LVL326:
3955:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3945              		.loc 1 3955 0
 3946 009a 7047     		bx	lr
 3947              	.LVL327:
 3948              	.L361:
 3949              	.LCFI42:
 3950              		.cfi_def_cfa_offset 16
 3951              		.cfi_offset 3, -16
 3952              		.cfi_offset 4, -12
 3953              		.cfi_offset 5, -8
 3954              		.cfi_offset 14, -4
3885:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3955              		.loc 1 3885 0
 3956 009c 0020     		movs	r0, #0
 3957 009e FAE7     		b	.L353
 3958              	.L362:
 3959 00a0 0020     		movs	r0, #0
3954:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3960              		.loc 1 3954 0
 3961 00a2 F8E7     		b	.L353
 3962              	.L368:
 3963              		.align	2
 3964              	.L367:
 3965 00a4 00000000 		.word	.LANCHOR10
 3966 00a8 00000000 		.word	.LANCHOR4
 3967 00ac 00000000 		.word	.LANCHOR13
 3968              		.cfi_endproc
 3969              	.LFE44:
 3971              		.section	.text.vTaskPriorityDisinheritAfterTimeout,"ax",%progbits
 3972              		.align	1
 3973              		.global	vTaskPriorityDisinheritAfterTimeout
 3974              		.syntax unified
 3975              		.thumb
 3976              		.thumb_func
 3977              		.fpu fpv4-sp-d16
 3979              	vTaskPriorityDisinheritAfterTimeout:
 3980              	.LFB45:
3963:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 3981              		.loc 1 3963 0
 3982              		.cfi_startproc
 3983              		@ args = 0, pretend = 0, frame = 0
 3984              		@ frame_needed = 0, uses_anonymous_args = 0
 3985              	.LVL328:
3968:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3986              		.loc 1 3968 0
 3987 0000 0028     		cmp	r0, #0
 3988 0002 55D0     		beq	.L379
3963:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 3989              		.loc 1 3963 0
 3990 0004 38B5     		push	{r3, r4, r5, lr}
 3991              	.LCFI43:
ARM GAS  /tmp/ccPN8tEQ.s 			page 170


 3992              		.cfi_def_cfa_offset 16
 3993              		.cfi_offset 3, -16
 3994              		.cfi_offset 4, -12
 3995              		.cfi_offset 5, -8
 3996              		.cfi_offset 14, -4
 3997 0006 0346     		mov	r3, r0
3972:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3998              		.loc 1 3972 0
 3999 0008 806C     		ldr	r0, [r0, #72]
 4000              	.LVL329:
 4001 000a 40B9     		cbnz	r0, .L371
 4002              	.LBB174:
 4003              	.LBB175:
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4004              		.loc 2 195 0
 4005              		.syntax unified
 4006              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4007 000c 4FF01003 			mov r3, #16												
 4008 0010 83F31188 		msr basepri, r3											
 4009 0014 BFF36F8F 		isb														
 4010 0018 BFF34F8F 		dsb														
 4011              	
 4012              	@ 0 "" 2
 4013              	.LVL330:
 4014              		.thumb
 4015              		.syntax unified
 4016              	.L372:
 4017 001c FEE7     		b	.L372
 4018              	.LVL331:
 4019              	.L371:
 4020              	.LBE175:
 4021              	.LBE174:
3978:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4022              		.loc 1 3978 0
 4023 001e 5A6C     		ldr	r2, [r3, #68]
 4024 0020 8A42     		cmp	r2, r1
 4025 0022 00D2     		bcs	.L373
3980:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4026              		.loc 1 3980 0
 4027 0024 0A46     		mov	r2, r1
 4028              	.L373:
 4029              	.LVL332:
3988:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4030              		.loc 1 3988 0
 4031 0026 D96A     		ldr	r1, [r3, #44]
 4032              	.LVL333:
 4033 0028 9142     		cmp	r1, r2
 4034 002a 01D0     		beq	.L369
3994:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4035              		.loc 1 3994 0
 4036 002c 0128     		cmp	r0, #1
 4037 002e 00D0     		beq	.L382
 4038              	.LVL334:
 4039              	.L369:
4057:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4040              		.loc 1 4057 0
 4041 0030 38BD     		pop	{r3, r4, r5, pc}
ARM GAS  /tmp/ccPN8tEQ.s 			page 171


 4042              	.LVL335:
 4043              	.L382:
3999:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4044              		.loc 1 3999 0
 4045 0032 2048     		ldr	r0, .L383
 4046 0034 0068     		ldr	r0, [r0]
 4047 0036 9842     		cmp	r0, r3
 4048 0038 08D1     		bne	.L374
 4049              	.LBB176:
 4050              	.LBB177:
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4051              		.loc 2 195 0
 4052              		.syntax unified
 4053              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4054 003a 4FF01003 			mov r3, #16												
 4055 003e 83F31188 		msr basepri, r3											
 4056 0042 BFF36F8F 		isb														
 4057 0046 BFF34F8F 		dsb														
 4058              	
 4059              	@ 0 "" 2
 4060              	.LVL336:
 4061              		.thumb
 4062              		.syntax unified
 4063              	.L375:
 4064 004a FEE7     		b	.L375
 4065              	.LVL337:
 4066              	.L374:
 4067              	.LBE177:
 4068              	.LBE176:
4006:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4069              		.loc 1 4006 0
 4070 004c DA62     		str	r2, [r3, #44]
4010:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4071              		.loc 1 4010 0
 4072 004e 9869     		ldr	r0, [r3, #24]
 4073 0050 0028     		cmp	r0, #0
 4074 0052 02DB     		blt	.L376
4012:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4075              		.loc 1 4012 0
 4076 0054 C2F10702 		rsb	r2, r2, #7
 4077              	.LVL338:
 4078 0058 9A61     		str	r2, [r3, #24]
 4079              	.L376:
4025:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4080              		.loc 1 4025 0
 4081 005a 5A69     		ldr	r2, [r3, #20]
 4082 005c 1648     		ldr	r0, .L383+4
 4083 005e 1424     		movs	r4, #20
 4084 0060 04FB0101 		mla	r1, r4, r1, r0
 4085              	.LVL339:
 4086 0064 8A42     		cmp	r2, r1
 4087 0066 E3D1     		bne	.L369
 4088 0068 1C46     		mov	r4, r3
4027:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 4089              		.loc 1 4027 0
 4090 006a 1D1D     		adds	r5, r3, #4
 4091 006c 2846     		mov	r0, r5
ARM GAS  /tmp/ccPN8tEQ.s 			page 172


 4092 006e FFF7FEFF 		bl	uxListRemove
 4093              	.LVL340:
 4094 0072 70B9     		cbnz	r0, .L377
4029:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
 4095              		.loc 1 4029 0
 4096 0074 E26A     		ldr	r2, [r4, #44]
 4097 0076 1423     		movs	r3, #20
 4098 0078 03FB02F3 		mul	r3, r3, r2
 4099 007c 0E49     		ldr	r1, .L383+4
 4100 007e CB58     		ldr	r3, [r1, r3]
 4101 0080 3BB9     		cbnz	r3, .L377
4029:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
 4102              		.loc 1 4029 0 is_stmt 0 discriminator 1
 4103 0082 0123     		movs	r3, #1
 4104 0084 03FA02F2 		lsl	r2, r3, r2
 4105 0088 0C49     		ldr	r1, .L383+8
 4106 008a 0B68     		ldr	r3, [r1]
 4107 008c 23EA0203 		bic	r3, r3, r2
 4108 0090 0B60     		str	r3, [r1]
 4109              	.L377:
4036:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4110              		.loc 1 4036 0 is_stmt 1
 4111 0092 E26A     		ldr	r2, [r4, #44]
 4112 0094 0123     		movs	r3, #1
 4113 0096 9340     		lsls	r3, r3, r2
 4114 0098 0849     		ldr	r1, .L383+8
 4115 009a 0868     		ldr	r0, [r1]
 4116 009c 0343     		orrs	r3, r3, r0
 4117 009e 0B60     		str	r3, [r1]
 4118 00a0 2946     		mov	r1, r5
 4119 00a2 054B     		ldr	r3, .L383+4
 4120 00a4 1420     		movs	r0, #20
 4121 00a6 00FB0230 		mla	r0, r0, r2, r3
 4122 00aa FFF7FEFF 		bl	vListInsertEnd
 4123              	.LVL341:
4057:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4124              		.loc 1 4057 0
 4125 00ae BFE7     		b	.L369
 4126              	.LVL342:
 4127              	.L379:
 4128              	.LCFI44:
 4129              		.cfi_def_cfa_offset 0
 4130              		.cfi_restore 3
 4131              		.cfi_restore 4
 4132              		.cfi_restore 5
 4133              		.cfi_restore 14
 4134 00b0 7047     		bx	lr
 4135              	.L384:
 4136 00b2 00BF     		.align	2
 4137              	.L383:
 4138 00b4 00000000 		.word	.LANCHOR10
 4139 00b8 00000000 		.word	.LANCHOR4
 4140 00bc 00000000 		.word	.LANCHOR13
 4141              		.cfi_endproc
 4142              	.LFE45:
 4144              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 4145              		.align	1
ARM GAS  /tmp/ccPN8tEQ.s 			page 173


 4146              		.global	uxTaskResetEventItemValue
 4147              		.syntax unified
 4148              		.thumb
 4149              		.thumb_func
 4150              		.fpu fpv4-sp-d16
 4152              	uxTaskResetEventItemValue:
 4153              	.LFB46:
4377:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
 4154              		.loc 1 4377 0
 4155              		.cfi_startproc
 4156              		@ args = 0, pretend = 0, frame = 0
 4157              		@ frame_needed = 0, uses_anonymous_args = 0
 4158              		@ link register save eliminated.
4380:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4159              		.loc 1 4380 0
 4160 0000 044A     		ldr	r2, .L386
 4161 0002 1368     		ldr	r3, [r2]
 4162 0004 9869     		ldr	r0, [r3, #24]
 4163              	.LVL343:
4384:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4164              		.loc 1 4384 0
 4165 0006 1368     		ldr	r3, [r2]
 4166 0008 DB6A     		ldr	r3, [r3, #44]
 4167 000a 1268     		ldr	r2, [r2]
 4168 000c C3F10703 		rsb	r3, r3, #7
 4169 0010 9361     		str	r3, [r2, #24]
4387:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 4170              		.loc 1 4387 0
 4171 0012 7047     		bx	lr
 4172              	.L387:
 4173              		.align	2
 4174              	.L386:
 4175 0014 00000000 		.word	.LANCHOR10
 4176              		.cfi_endproc
 4177              	.LFE46:
 4179              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 4180              		.align	1
 4181              		.global	pvTaskIncrementMutexHeldCount
 4182              		.syntax unified
 4183              		.thumb
 4184              		.thumb_func
 4185              		.fpu fpv4-sp-d16
 4187              	pvTaskIncrementMutexHeldCount:
 4188              	.LFB47:
4393:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
 4189              		.loc 1 4393 0
 4190              		.cfi_startproc
 4191              		@ args = 0, pretend = 0, frame = 0
 4192              		@ frame_needed = 0, uses_anonymous_args = 0
 4193              		@ link register save eliminated.
4396:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4194              		.loc 1 4396 0
 4195 0000 054B     		ldr	r3, .L390
 4196 0002 1B68     		ldr	r3, [r3]
 4197 0004 23B1     		cbz	r3, .L389
4398:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4198              		.loc 1 4398 0
ARM GAS  /tmp/ccPN8tEQ.s 			page 174


 4199 0006 044B     		ldr	r3, .L390
 4200 0008 1A68     		ldr	r2, [r3]
 4201 000a 936C     		ldr	r3, [r2, #72]
 4202 000c 0133     		adds	r3, r3, #1
 4203 000e 9364     		str	r3, [r2, #72]
 4204              	.L389:
4401:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4205              		.loc 1 4401 0
 4206 0010 014B     		ldr	r3, .L390
 4207 0012 1868     		ldr	r0, [r3]
4402:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4208              		.loc 1 4402 0
 4209 0014 7047     		bx	lr
 4210              	.L391:
 4211 0016 00BF     		.align	2
 4212              	.L390:
 4213 0018 00000000 		.word	.LANCHOR10
 4214              		.cfi_endproc
 4215              	.LFE47:
 4217              		.section	.text.ulTaskNotifyTake,"ax",%progbits
 4218              		.align	1
 4219              		.global	ulTaskNotifyTake
 4220              		.syntax unified
 4221              		.thumb
 4222              		.thumb_func
 4223              		.fpu fpv4-sp-d16
 4225              	ulTaskNotifyTake:
 4226              	.LFB48:
4410:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
 4227              		.loc 1 4410 0
 4228              		.cfi_startproc
 4229              		@ args = 0, pretend = 0, frame = 0
 4230              		@ frame_needed = 0, uses_anonymous_args = 0
 4231              	.LVL344:
 4232 0000 38B5     		push	{r3, r4, r5, lr}
 4233              	.LCFI45:
 4234              		.cfi_def_cfa_offset 16
 4235              		.cfi_offset 3, -16
 4236              		.cfi_offset 4, -12
 4237              		.cfi_offset 5, -8
 4238              		.cfi_offset 14, -4
 4239 0002 0546     		mov	r5, r0
 4240 0004 0C46     		mov	r4, r1
4413:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4241              		.loc 1 4413 0
 4242 0006 FFF7FEFF 		bl	vPortEnterCritical
 4243              	.LVL345:
4416:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4244              		.loc 1 4416 0
 4245 000a 194B     		ldr	r3, .L399
 4246 000c 1B68     		ldr	r3, [r3]
 4247 000e DB6C     		ldr	r3, [r3, #76]
 4248 0010 2BB9     		cbnz	r3, .L393
4419:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4249              		.loc 1 4419 0
 4250 0012 174B     		ldr	r3, .L399
 4251 0014 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccPN8tEQ.s 			page 175


 4252 0016 0122     		movs	r2, #1
 4253 0018 83F85020 		strb	r2, [r3, #80]
4421:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4254              		.loc 1 4421 0
 4255 001c ACB9     		cbnz	r4, .L397
 4256              	.L393:
4442:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4257              		.loc 1 4442 0
 4258 001e FFF7FEFF 		bl	vPortExitCritical
 4259              	.LVL346:
4444:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4260              		.loc 1 4444 0
 4261 0022 FFF7FEFF 		bl	vPortEnterCritical
 4262              	.LVL347:
4447:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4263              		.loc 1 4447 0
 4264 0026 124B     		ldr	r3, .L399
 4265 0028 1B68     		ldr	r3, [r3]
 4266 002a DC6C     		ldr	r4, [r3, #76]
 4267              	.LVL348:
4449:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4268              		.loc 1 4449 0
 4269 002c 24B1     		cbz	r4, .L394
4451:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4270              		.loc 1 4451 0
 4271 002e CDB9     		cbnz	r5, .L398
4457:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4272              		.loc 1 4457 0
 4273 0030 0F4B     		ldr	r3, .L399
 4274 0032 1B68     		ldr	r3, [r3]
 4275 0034 621E     		subs	r2, r4, #1
 4276 0036 DA64     		str	r2, [r3, #76]
 4277              	.L394:
4465:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4278              		.loc 1 4465 0
 4279 0038 0D4B     		ldr	r3, .L399
 4280 003a 1B68     		ldr	r3, [r3]
 4281 003c 0022     		movs	r2, #0
 4282 003e 83F85020 		strb	r2, [r3, #80]
4467:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4283              		.loc 1 4467 0
 4284 0042 FFF7FEFF 		bl	vPortExitCritical
 4285              	.LVL349:
4470:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4286              		.loc 1 4470 0
 4287 0046 2046     		mov	r0, r4
 4288 0048 38BD     		pop	{r3, r4, r5, pc}
 4289              	.LVL350:
 4290              	.L397:
4423:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
 4291              		.loc 1 4423 0
 4292 004a 1146     		mov	r1, r2
 4293 004c 2046     		mov	r0, r4
 4294 004e FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 4295              	.LVL351:
4430:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4296              		.loc 1 4430 0
ARM GAS  /tmp/ccPN8tEQ.s 			page 176


 4297 0052 084B     		ldr	r3, .L399+4
 4298 0054 4FF08052 		mov	r2, #268435456
 4299 0058 1A60     		str	r2, [r3]
 4300              		.syntax unified
 4301              	@ 4430 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4302 005a BFF34F8F 		dsb
 4303              	@ 0 "" 2
 4304              	@ 4430 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4305 005e BFF36F8F 		isb
 4306              	@ 0 "" 2
 4307              		.thumb
 4308              		.syntax unified
 4309 0062 DCE7     		b	.L393
 4310              	.LVL352:
 4311              	.L398:
4453:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4312              		.loc 1 4453 0
 4313 0064 024B     		ldr	r3, .L399
 4314 0066 1B68     		ldr	r3, [r3]
 4315 0068 0022     		movs	r2, #0
 4316 006a DA64     		str	r2, [r3, #76]
 4317 006c E4E7     		b	.L394
 4318              	.L400:
 4319 006e 00BF     		.align	2
 4320              	.L399:
 4321 0070 00000000 		.word	.LANCHOR10
 4322 0074 04ED00E0 		.word	-536810236
 4323              		.cfi_endproc
 4324              	.LFE48:
 4326              		.section	.text.xTaskNotifyWait,"ax",%progbits
 4327              		.align	1
 4328              		.global	xTaskNotifyWait
 4329              		.syntax unified
 4330              		.thumb
 4331              		.thumb_func
 4332              		.fpu fpv4-sp-d16
 4334              	xTaskNotifyWait:
 4335              	.LFB49:
4478:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 4336              		.loc 1 4478 0
 4337              		.cfi_startproc
 4338              		@ args = 0, pretend = 0, frame = 0
 4339              		@ frame_needed = 0, uses_anonymous_args = 0
 4340              	.LVL353:
 4341 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4342              	.LCFI46:
 4343              		.cfi_def_cfa_offset 24
 4344              		.cfi_offset 3, -24
 4345              		.cfi_offset 4, -20
 4346              		.cfi_offset 5, -16
 4347              		.cfi_offset 6, -12
 4348              		.cfi_offset 7, -8
 4349              		.cfi_offset 14, -4
 4350 0002 0746     		mov	r7, r0
 4351 0004 0D46     		mov	r5, r1
 4352 0006 1446     		mov	r4, r2
 4353 0008 1E46     		mov	r6, r3
ARM GAS  /tmp/ccPN8tEQ.s 			page 177


4481:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4354              		.loc 1 4481 0
 4355 000a FFF7FEFF 		bl	vPortEnterCritical
 4356              	.LVL354:
4484:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4357              		.loc 1 4484 0
 4358 000e 204B     		ldr	r3, .L409
 4359 0010 1B68     		ldr	r3, [r3]
 4360 0012 93F85030 		ldrb	r3, [r3, #80]	@ zero_extendqisi2
 4361 0016 DBB2     		uxtb	r3, r3
 4362 0018 022B     		cmp	r3, #2
 4363 001a 0AD0     		beq	.L402
4489:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4364              		.loc 1 4489 0
 4365 001c 1C4B     		ldr	r3, .L409
 4366 001e 1A68     		ldr	r2, [r3]
 4367 0020 D06C     		ldr	r0, [r2, #76]
 4368 0022 20EA0700 		bic	r0, r0, r7
 4369 0026 D064     		str	r0, [r2, #76]
4492:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4370              		.loc 1 4492 0
 4371 0028 1B68     		ldr	r3, [r3]
 4372 002a 0122     		movs	r2, #1
 4373 002c 83F85020 		strb	r2, [r3, #80]
4494:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4374              		.loc 1 4494 0
 4375 0030 CEB9     		cbnz	r6, .L407
 4376              	.L402:
4515:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4377              		.loc 1 4515 0
 4378 0032 FFF7FEFF 		bl	vPortExitCritical
 4379              	.LVL355:
4517:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4380              		.loc 1 4517 0
 4381 0036 FFF7FEFF 		bl	vPortEnterCritical
 4382              	.LVL356:
4521:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4383              		.loc 1 4521 0
 4384 003a 1CB1     		cbz	r4, .L403
4525:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4385              		.loc 1 4525 0
 4386 003c 144B     		ldr	r3, .L409
 4387 003e 1B68     		ldr	r3, [r3]
 4388 0040 DB6C     		ldr	r3, [r3, #76]
 4389 0042 2360     		str	r3, [r4]
 4390              	.L403:
4532:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4391              		.loc 1 4532 0
 4392 0044 124B     		ldr	r3, .L409
 4393 0046 1B68     		ldr	r3, [r3]
 4394 0048 93F85030 		ldrb	r3, [r3, #80]	@ zero_extendqisi2
 4395 004c DBB2     		uxtb	r3, r3
 4396 004e 022B     		cmp	r3, #2
 4397 0050 16D0     		beq	.L408
4535:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4398              		.loc 1 4535 0
 4399 0052 0024     		movs	r4, #0
ARM GAS  /tmp/ccPN8tEQ.s 			page 178


 4400              	.LVL357:
 4401              	.L404:
4545:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4402              		.loc 1 4545 0
 4403 0054 0E4B     		ldr	r3, .L409
 4404 0056 1B68     		ldr	r3, [r3]
 4405 0058 0022     		movs	r2, #0
 4406 005a 83F85020 		strb	r2, [r3, #80]
4547:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4407              		.loc 1 4547 0
 4408 005e FFF7FEFF 		bl	vPortExitCritical
 4409              	.LVL358:
4550:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4410              		.loc 1 4550 0
 4411 0062 2046     		mov	r0, r4
 4412 0064 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4413              	.LVL359:
 4414              	.L407:
4496:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
 4415              		.loc 1 4496 0
 4416 0066 1146     		mov	r1, r2
 4417 0068 3046     		mov	r0, r6
 4418 006a FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 4419              	.LVL360:
4503:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4420              		.loc 1 4503 0
 4421 006e 094B     		ldr	r3, .L409+4
 4422 0070 4FF08052 		mov	r2, #268435456
 4423 0074 1A60     		str	r2, [r3]
 4424              		.syntax unified
 4425              	@ 4503 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4426 0076 BFF34F8F 		dsb
 4427              	@ 0 "" 2
 4428              	@ 4503 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4429 007a BFF36F8F 		isb
 4430              	@ 0 "" 2
 4431              		.thumb
 4432              		.syntax unified
 4433 007e D8E7     		b	.L402
 4434              	.L408:
4541:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
 4435              		.loc 1 4541 0
 4436 0080 034B     		ldr	r3, .L409
 4437 0082 1A68     		ldr	r2, [r3]
 4438 0084 D36C     		ldr	r3, [r2, #76]
 4439 0086 23EA0505 		bic	r5, r3, r5
 4440              	.LVL361:
 4441 008a D564     		str	r5, [r2, #76]
 4442              	.LVL362:
4542:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4443              		.loc 1 4542 0
 4444 008c 0124     		movs	r4, #1
 4445              	.LVL363:
 4446 008e E1E7     		b	.L404
 4447              	.L410:
 4448              		.align	2
 4449              	.L409:
ARM GAS  /tmp/ccPN8tEQ.s 			page 179


 4450 0090 00000000 		.word	.LANCHOR10
 4451 0094 04ED00E0 		.word	-536810236
 4452              		.cfi_endproc
 4453              	.LFE49:
 4455              		.section	.text.xTaskGenericNotify,"ax",%progbits
 4456              		.align	1
 4457              		.global	xTaskGenericNotify
 4458              		.syntax unified
 4459              		.thumb
 4460              		.thumb_func
 4461              		.fpu fpv4-sp-d16
 4463              	xTaskGenericNotify:
 4464              	.LFB50:
4558:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 4465              		.loc 1 4558 0
 4466              		.cfi_startproc
 4467              		@ args = 0, pretend = 0, frame = 0
 4468              		@ frame_needed = 0, uses_anonymous_args = 0
 4469              	.LVL364:
 4470 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4471              	.LCFI47:
 4472              		.cfi_def_cfa_offset 24
 4473              		.cfi_offset 3, -24
 4474              		.cfi_offset 4, -20
 4475              		.cfi_offset 5, -16
 4476              		.cfi_offset 6, -12
 4477              		.cfi_offset 7, -8
 4478              		.cfi_offset 14, -4
 4479              	.LVL365:
4563:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 4480              		.loc 1 4563 0
 4481 0002 40B9     		cbnz	r0, .L412
 4482              	.LBB178:
 4483              	.LBB179:
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4484              		.loc 2 195 0
 4485              		.syntax unified
 4486              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4487 0004 4FF01003 			mov r3, #16												
 4488 0008 83F31188 		msr basepri, r3											
 4489 000c BFF36F8F 		isb														
 4490 0010 BFF34F8F 		dsb														
 4491              	
 4492              	@ 0 "" 2
 4493              	.LVL366:
 4494              		.thumb
 4495              		.syntax unified
 4496              	.L413:
 4497 0014 FEE7     		b	.L413
 4498              	.LVL367:
 4499              	.L412:
 4500 0016 0446     		mov	r4, r0
 4501 0018 1F46     		mov	r7, r3
 4502 001a 1546     		mov	r5, r2
 4503 001c 0E46     		mov	r6, r1
 4504              	.LVL368:
 4505              	.LBE179:
ARM GAS  /tmp/ccPN8tEQ.s 			page 180


 4506              	.LBE178:
4566:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4507              		.loc 1 4566 0
 4508 001e FFF7FEFF 		bl	vPortEnterCritical
 4509              	.LVL369:
4568:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4510              		.loc 1 4568 0
 4511 0022 0FB1     		cbz	r7, .L414
4570:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4512              		.loc 1 4570 0
 4513 0024 E36C     		ldr	r3, [r4, #76]
 4514 0026 3B60     		str	r3, [r7]
 4515              	.L414:
4573:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4516              		.loc 1 4573 0
 4517 0028 94F85030 		ldrb	r3, [r4, #80]	@ zero_extendqisi2
 4518 002c DBB2     		uxtb	r3, r3
 4519              	.LVL370:
4575:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4520              		.loc 1 4575 0
 4521 002e 0222     		movs	r2, #2
 4522 0030 84F85020 		strb	r2, [r4, #80]
4577:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4523              		.loc 1 4577 0
 4524 0034 6A1E     		subs	r2, r5, #1
 4525 0036 032A     		cmp	r2, #3
 4526 0038 1AD8     		bhi	.L424
 4527 003a DFE802F0 		tbb	[pc, r2]
 4528              	.L417:
 4529 003e 02       		.byte	(.L416-.L417)/2
 4530 003f 0C       		.byte	(.L418-.L417)/2
 4531 0040 11       		.byte	(.L419-.L417)/2
 4532 0041 14       		.byte	(.L420-.L417)/2
 4533              		.p2align 1
 4534              	.L416:
4580:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 4535              		.loc 1 4580 0
 4536 0042 E26C     		ldr	r2, [r4, #76]
 4537 0044 1643     		orrs	r6, r6, r2
 4538              	.LVL371:
 4539 0046 E664     		str	r6, [r4, #76]
4560:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4540              		.loc 1 4560 0
 4541 0048 0125     		movs	r5, #1
 4542              	.L415:
 4543              	.LVL372:
4613:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4544              		.loc 1 4613 0
 4545 004a 012B     		cmp	r3, #1
 4546 004c 14D0     		beq	.L427
 4547              	.LVL373:
 4548              	.L421:
4653:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4549              		.loc 1 4653 0
 4550 004e FFF7FEFF 		bl	vPortExitCritical
 4551              	.LVL374:
4656:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccPN8tEQ.s 			page 181


 4552              		.loc 1 4656 0
 4553 0052 2846     		mov	r0, r5
 4554 0054 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4555              	.LVL375:
 4556              	.L418:
4584:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 4557              		.loc 1 4584 0
 4558 0056 E26C     		ldr	r2, [r4, #76]
 4559 0058 0132     		adds	r2, r2, #1
 4560 005a E264     		str	r2, [r4, #76]
4560:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4561              		.loc 1 4560 0
 4562 005c 0125     		movs	r5, #1
4585:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4563              		.loc 1 4585 0
 4564 005e F4E7     		b	.L415
 4565              	.L419:
4588:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 4566              		.loc 1 4588 0
 4567 0060 E664     		str	r6, [r4, #76]
4560:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4568              		.loc 1 4560 0
 4569 0062 0125     		movs	r5, #1
4589:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4570              		.loc 1 4589 0
 4571 0064 F1E7     		b	.L415
 4572              	.L420:
4592:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4573              		.loc 1 4592 0
 4574 0066 022B     		cmp	r3, #2
 4575 0068 04D0     		beq	.L425
4594:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4576              		.loc 1 4594 0
 4577 006a E664     		str	r6, [r4, #76]
4560:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4578              		.loc 1 4560 0
 4579 006c 0125     		movs	r5, #1
 4580 006e ECE7     		b	.L415
 4581              	.L424:
 4582 0070 0125     		movs	r5, #1
 4583 0072 EAE7     		b	.L415
 4584              	.L425:
4599:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4585              		.loc 1 4599 0
 4586 0074 0025     		movs	r5, #0
 4587 0076 E8E7     		b	.L415
 4588              	.LVL376:
 4589              	.L427:
4615:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 4590              		.loc 1 4615 0
 4591 0078 261D     		adds	r6, r4, #4
 4592 007a 3046     		mov	r0, r6
 4593 007c FFF7FEFF 		bl	uxListRemove
 4594              	.LVL377:
4616:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4595              		.loc 1 4616 0
 4596 0080 E26A     		ldr	r2, [r4, #44]
ARM GAS  /tmp/ccPN8tEQ.s 			page 182


 4597 0082 0123     		movs	r3, #1
 4598 0084 9340     		lsls	r3, r3, r2
 4599 0086 1249     		ldr	r1, .L428
 4600 0088 0868     		ldr	r0, [r1]
 4601 008a 0343     		orrs	r3, r3, r0
 4602 008c 0B60     		str	r3, [r1]
 4603 008e 3146     		mov	r1, r6
 4604 0090 104B     		ldr	r3, .L428+4
 4605 0092 1420     		movs	r0, #20
 4606 0094 00FB0230 		mla	r0, r0, r2, r3
 4607 0098 FFF7FEFF 		bl	vListInsertEnd
 4608              	.LVL378:
4619:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4609              		.loc 1 4619 0
 4610 009c A36A     		ldr	r3, [r4, #40]
 4611 009e 43B1     		cbz	r3, .L422
 4612              	.LBB180:
 4613              	.LBB181:
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4614              		.loc 2 195 0
 4615              		.syntax unified
 4616              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4617 00a0 4FF01003 			mov r3, #16												
 4618 00a4 83F31188 		msr basepri, r3											
 4619 00a8 BFF36F8F 		isb														
 4620 00ac BFF34F8F 		dsb														
 4621              	
 4622              	@ 0 "" 2
 4623              	.LVL379:
 4624              		.thumb
 4625              		.syntax unified
 4626              	.L423:
 4627 00b0 FEE7     		b	.L423
 4628              	.L422:
 4629              	.LBE181:
 4630              	.LBE180:
4637:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4631              		.loc 1 4637 0
 4632 00b2 E26A     		ldr	r2, [r4, #44]
 4633 00b4 084B     		ldr	r3, .L428+8
 4634 00b6 1B68     		ldr	r3, [r3]
 4635 00b8 DB6A     		ldr	r3, [r3, #44]
 4636 00ba 9A42     		cmp	r2, r3
 4637 00bc C7D9     		bls	.L421
4641:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4638              		.loc 1 4641 0
 4639 00be 074B     		ldr	r3, .L428+12
 4640 00c0 4FF08052 		mov	r2, #268435456
 4641 00c4 1A60     		str	r2, [r3]
 4642              		.syntax unified
 4643              	@ 4641 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4644 00c6 BFF34F8F 		dsb
 4645              	@ 0 "" 2
 4646              	@ 4641 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4647 00ca BFF36F8F 		isb
 4648              	@ 0 "" 2
 4649              		.thumb
ARM GAS  /tmp/ccPN8tEQ.s 			page 183


 4650              		.syntax unified
 4651 00ce BEE7     		b	.L421
 4652              	.L429:
 4653              		.align	2
 4654              	.L428:
 4655 00d0 00000000 		.word	.LANCHOR13
 4656 00d4 00000000 		.word	.LANCHOR4
 4657 00d8 00000000 		.word	.LANCHOR10
 4658 00dc 04ED00E0 		.word	-536810236
 4659              		.cfi_endproc
 4660              	.LFE50:
 4662              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 4663              		.align	1
 4664              		.global	xTaskGenericNotifyFromISR
 4665              		.syntax unified
 4666              		.thumb
 4667              		.thumb_func
 4668              		.fpu fpv4-sp-d16
 4670              	xTaskGenericNotifyFromISR:
 4671              	.LFB51:
4664:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 4672              		.loc 1 4664 0
 4673              		.cfi_startproc
 4674              		@ args = 4, pretend = 0, frame = 0
 4675              		@ frame_needed = 0, uses_anonymous_args = 0
 4676              	.LVL380:
 4677 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 4678              	.LCFI48:
 4679              		.cfi_def_cfa_offset 32
 4680              		.cfi_offset 3, -32
 4681              		.cfi_offset 4, -28
 4682              		.cfi_offset 5, -24
 4683              		.cfi_offset 6, -20
 4684              		.cfi_offset 7, -16
 4685              		.cfi_offset 8, -12
 4686              		.cfi_offset 9, -8
 4687              		.cfi_offset 14, -4
 4688 0004 089E     		ldr	r6, [sp, #32]
 4689              	.LVL381:
4670:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4690              		.loc 1 4670 0
 4691 0006 40B9     		cbnz	r0, .L431
 4692              	.LBB182:
 4693              	.LBB183:
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4694              		.loc 2 195 0
 4695              		.syntax unified
 4696              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4697 0008 4FF01003 			mov r3, #16												
 4698 000c 83F31188 		msr basepri, r3											
 4699 0010 BFF36F8F 		isb														
 4700 0014 BFF34F8F 		dsb														
 4701              	
 4702              	@ 0 "" 2
 4703              	.LVL382:
 4704              		.thumb
 4705              		.syntax unified
ARM GAS  /tmp/ccPN8tEQ.s 			page 184


 4706              	.L432:
 4707 0018 FEE7     		b	.L432
 4708              	.LVL383:
 4709              	.L431:
 4710 001a 0446     		mov	r4, r0
 4711 001c 9946     		mov	r9, r3
 4712 001e 1546     		mov	r5, r2
 4713 0020 8846     		mov	r8, r1
 4714              	.LBE183:
 4715              	.LBE182:
4688:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4716              		.loc 1 4688 0
 4717 0022 FFF7FEFF 		bl	vPortValidateInterruptPriority
 4718              	.LVL384:
 4719              	.LBB184:
 4720              	.LBB185:
 211:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4721              		.loc 2 211 0
 4722              		.syntax unified
 4723              	@ 211 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4724 0026 EFF31187 			mrs r7, basepri											
 4725 002a 4FF01003 		mov r3, #16												
 4726 002e 83F31188 		msr basepri, r3											
 4727 0032 BFF36F8F 		isb														
 4728 0036 BFF34F8F 		dsb														
 4729              	
 4730              	@ 0 "" 2
 4731              		.thumb
 4732              		.syntax unified
 4733              	.LBE185:
 4734              	.LBE184:
4694:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4735              		.loc 1 4694 0
 4736 003a B9F1000F 		cmp	r9, #0
 4737 003e 02D0     		beq	.L433
4696:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4738              		.loc 1 4696 0
 4739 0040 E36C     		ldr	r3, [r4, #76]
 4740 0042 C9F80030 		str	r3, [r9]
 4741              	.L433:
4699:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 4742              		.loc 1 4699 0
 4743 0046 94F85030 		ldrb	r3, [r4, #80]	@ zero_extendqisi2
 4744 004a DBB2     		uxtb	r3, r3
 4745              	.LVL385:
4700:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4746              		.loc 1 4700 0
 4747 004c 0222     		movs	r2, #2
 4748 004e 84F85020 		strb	r2, [r4, #80]
4702:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4749              		.loc 1 4702 0
 4750 0052 6A1E     		subs	r2, r5, #1
 4751 0054 032A     		cmp	r2, #3
 4752 0056 1ED8     		bhi	.L446
 4753 0058 DFE802F0 		tbb	[pc, r2]
 4754              	.L436:
 4755 005c 02       		.byte	(.L435-.L436)/2
ARM GAS  /tmp/ccPN8tEQ.s 			page 185


 4756 005d 0E       		.byte	(.L437-.L436)/2
 4757 005e 13       		.byte	(.L438-.L436)/2
 4758 005f 17       		.byte	(.L439-.L436)/2
 4759              		.p2align 1
 4760              	.L435:
4705:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 4761              		.loc 1 4705 0
 4762 0060 E26C     		ldr	r2, [r4, #76]
 4763 0062 42EA0802 		orr	r2, r2, r8
 4764 0066 E264     		str	r2, [r4, #76]
4667:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4765              		.loc 1 4667 0
 4766 0068 0125     		movs	r5, #1
 4767              	.L434:
 4768              	.LVL386:
4738:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4769              		.loc 1 4738 0
 4770 006a 012B     		cmp	r3, #1
 4771 006c 17D0     		beq	.L449
 4772              	.LVL387:
 4773              	.L440:
 4774              	.LBB186:
 4775              	.LBB187:
 4776              		.loc 2 229 0
 4777              		.syntax unified
 4778              	@ 229 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4779 006e 87F31188 			msr basepri, r7	
 4780              	@ 0 "" 2
 4781              	.LVL388:
 4782              		.thumb
 4783              		.syntax unified
 4784              	.LBE187:
 4785              	.LBE186:
4780:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4786              		.loc 1 4780 0
 4787 0072 2846     		mov	r0, r5
 4788 0074 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 4789              	.LVL389:
 4790              	.L437:
4709:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 4791              		.loc 1 4709 0
 4792 0078 E26C     		ldr	r2, [r4, #76]
 4793 007a 0132     		adds	r2, r2, #1
 4794 007c E264     		str	r2, [r4, #76]
4667:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4795              		.loc 1 4667 0
 4796 007e 0125     		movs	r5, #1
4710:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4797              		.loc 1 4710 0
 4798 0080 F3E7     		b	.L434
 4799              	.L438:
4713:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 4800              		.loc 1 4713 0
 4801 0082 C4F84C80 		str	r8, [r4, #76]
4667:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4802              		.loc 1 4667 0
 4803 0086 0125     		movs	r5, #1
ARM GAS  /tmp/ccPN8tEQ.s 			page 186


4714:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4804              		.loc 1 4714 0
 4805 0088 EFE7     		b	.L434
 4806              	.L439:
4717:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4807              		.loc 1 4717 0
 4808 008a 022B     		cmp	r3, #2
 4809 008c 05D0     		beq	.L447
4719:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4810              		.loc 1 4719 0
 4811 008e C4F84C80 		str	r8, [r4, #76]
4667:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4812              		.loc 1 4667 0
 4813 0092 0125     		movs	r5, #1
 4814 0094 E9E7     		b	.L434
 4815              	.L446:
 4816 0096 0125     		movs	r5, #1
 4817 0098 E7E7     		b	.L434
 4818              	.L447:
4724:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4819              		.loc 1 4724 0
 4820 009a 0025     		movs	r5, #0
 4821 009c E5E7     		b	.L434
 4822              	.LVL390:
 4823              	.L449:
4741:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4824              		.loc 1 4741 0
 4825 009e A36A     		ldr	r3, [r4, #40]
 4826              	.LVL391:
 4827 00a0 43B1     		cbz	r3, .L441
 4828              	.LBB188:
 4829              	.LBB189:
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4830              		.loc 2 195 0
 4831              		.syntax unified
 4832              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4833 00a2 4FF01003 			mov r3, #16												
 4834 00a6 83F31188 		msr basepri, r3											
 4835 00aa BFF36F8F 		isb														
 4836 00ae BFF34F8F 		dsb														
 4837              	
 4838              	@ 0 "" 2
 4839              	.LVL392:
 4840              		.thumb
 4841              		.syntax unified
 4842              	.L442:
 4843 00b2 FEE7     		b	.L442
 4844              	.L441:
 4845              	.LBE189:
 4846              	.LBE188:
4743:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4847              		.loc 1 4743 0
 4848 00b4 144B     		ldr	r3, .L450
 4849 00b6 1B68     		ldr	r3, [r3]
 4850 00b8 E3B9     		cbnz	r3, .L443
4745:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4851              		.loc 1 4745 0
ARM GAS  /tmp/ccPN8tEQ.s 			page 187


 4852 00ba 04F10408 		add	r8, r4, #4
 4853              	.LVL393:
 4854 00be 4046     		mov	r0, r8
 4855 00c0 FFF7FEFF 		bl	uxListRemove
 4856              	.LVL394:
4746:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4857              		.loc 1 4746 0
 4858 00c4 E26A     		ldr	r2, [r4, #44]
 4859 00c6 0123     		movs	r3, #1
 4860 00c8 9340     		lsls	r3, r3, r2
 4861 00ca 1049     		ldr	r1, .L450+4
 4862 00cc 0868     		ldr	r0, [r1]
 4863 00ce 0343     		orrs	r3, r3, r0
 4864 00d0 0B60     		str	r3, [r1]
 4865 00d2 4146     		mov	r1, r8
 4866 00d4 0E4B     		ldr	r3, .L450+8
 4867 00d6 1420     		movs	r0, #20
 4868 00d8 00FB0230 		mla	r0, r0, r2, r3
 4869 00dc FFF7FEFF 		bl	vListInsertEnd
 4870              	.LVL395:
 4871              	.L444:
4755:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4872              		.loc 1 4755 0
 4873 00e0 E26A     		ldr	r2, [r4, #44]
 4874 00e2 0C4B     		ldr	r3, .L450+12
 4875 00e4 1B68     		ldr	r3, [r3]
 4876 00e6 DB6A     		ldr	r3, [r3, #44]
 4877 00e8 9A42     		cmp	r2, r3
 4878 00ea C0D9     		bls	.L440
4759:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4879              		.loc 1 4759 0
 4880 00ec 46B1     		cbz	r6, .L445
4761:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4881              		.loc 1 4761 0
 4882 00ee 0123     		movs	r3, #1
 4883 00f0 3360     		str	r3, [r6]
 4884 00f2 BCE7     		b	.L440
 4885              	.LVL396:
 4886              	.L443:
4752:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4887              		.loc 1 4752 0
 4888 00f4 04F11801 		add	r1, r4, #24
 4889 00f8 0748     		ldr	r0, .L450+16
 4890 00fa FFF7FEFF 		bl	vListInsertEnd
 4891              	.LVL397:
 4892 00fe EFE7     		b	.L444
 4893              	.LVL398:
 4894              	.L445:
4768:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4895              		.loc 1 4768 0
 4896 0100 064B     		ldr	r3, .L450+20
 4897 0102 0122     		movs	r2, #1
 4898 0104 1A60     		str	r2, [r3]
 4899 0106 B2E7     		b	.L440
 4900              	.L451:
 4901              		.align	2
 4902              	.L450:
ARM GAS  /tmp/ccPN8tEQ.s 			page 188


 4903 0108 00000000 		.word	.LANCHOR16
 4904 010c 00000000 		.word	.LANCHOR13
 4905 0110 00000000 		.word	.LANCHOR4
 4906 0114 00000000 		.word	.LANCHOR10
 4907 0118 00000000 		.word	.LANCHOR1
 4908 011c 00000000 		.word	.LANCHOR20
 4909              		.cfi_endproc
 4910              	.LFE51:
 4912              		.section	.text.vTaskNotifyGiveFromISR,"ax",%progbits
 4913              		.align	1
 4914              		.global	vTaskNotifyGiveFromISR
 4915              		.syntax unified
 4916              		.thumb
 4917              		.thumb_func
 4918              		.fpu fpv4-sp-d16
 4920              	vTaskNotifyGiveFromISR:
 4921              	.LFB52:
4788:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 4922              		.loc 1 4788 0
 4923              		.cfi_startproc
 4924              		@ args = 0, pretend = 0, frame = 0
 4925              		@ frame_needed = 0, uses_anonymous_args = 0
 4926              	.LVL399:
 4927 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4928              	.LCFI49:
 4929              		.cfi_def_cfa_offset 24
 4930              		.cfi_offset 3, -24
 4931              		.cfi_offset 4, -20
 4932              		.cfi_offset 5, -16
 4933              		.cfi_offset 6, -12
 4934              		.cfi_offset 7, -8
 4935              		.cfi_offset 14, -4
4793:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4936              		.loc 1 4793 0
 4937 0002 40B9     		cbnz	r0, .L453
 4938              	.LBB190:
 4939              	.LBB191:
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4940              		.loc 2 195 0
 4941              		.syntax unified
 4942              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4943 0004 4FF01003 			mov r3, #16												
 4944 0008 83F31188 		msr basepri, r3											
 4945 000c BFF36F8F 		isb														
 4946 0010 BFF34F8F 		dsb														
 4947              	
 4948              	@ 0 "" 2
 4949              	.LVL400:
 4950              		.thumb
 4951              		.syntax unified
 4952              	.L454:
 4953 0014 FEE7     		b	.L454
 4954              	.L453:
 4955 0016 0446     		mov	r4, r0
 4956 0018 0D46     		mov	r5, r1
 4957              	.LBE191:
 4958              	.LBE190:
ARM GAS  /tmp/ccPN8tEQ.s 			page 189


4811:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4959              		.loc 1 4811 0
 4960 001a FFF7FEFF 		bl	vPortValidateInterruptPriority
 4961              	.LVL401:
 4962              	.LBB192:
 4963              	.LBB193:
 211:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4964              		.loc 2 211 0
 4965              		.syntax unified
 4966              	@ 211 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4967 001e EFF31186 			mrs r6, basepri											
 4968 0022 4FF01003 		mov r3, #16												
 4969 0026 83F31188 		msr basepri, r3											
 4970 002a BFF36F8F 		isb														
 4971 002e BFF34F8F 		dsb														
 4972              	
 4973              	@ 0 "" 2
 4974              		.thumb
 4975              		.syntax unified
 4976              	.LBE193:
 4977              	.LBE192:
4817:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 4978              		.loc 1 4817 0
 4979 0032 94F85030 		ldrb	r3, [r4, #80]	@ zero_extendqisi2
 4980 0036 DBB2     		uxtb	r3, r3
 4981              	.LVL402:
4818:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4982              		.loc 1 4818 0
 4983 0038 0222     		movs	r2, #2
 4984 003a 84F85020 		strb	r2, [r4, #80]
4822:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4985              		.loc 1 4822 0
 4986 003e E26C     		ldr	r2, [r4, #76]
 4987 0040 0132     		adds	r2, r2, #1
 4988 0042 E264     		str	r2, [r4, #76]
4828:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4989              		.loc 1 4828 0
 4990 0044 012B     		cmp	r3, #1
 4991 0046 02D0     		beq	.L462
 4992              	.LVL403:
 4993              	.L455:
 4994              	.LBB194:
 4995              	.LBB195:
 4996              		.loc 2 229 0
 4997              		.syntax unified
 4998              	@ 229 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4999 0048 86F31188 			msr basepri, r6	
 5000              	@ 0 "" 2
 5001              	.LVL404:
 5002              		.thumb
 5003              		.syntax unified
 5004              	.LBE195:
 5005              	.LBE194:
4868:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5006              		.loc 1 4868 0
 5007 004c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5008              	.LVL405:
ARM GAS  /tmp/ccPN8tEQ.s 			page 190


 5009              	.L462:
4831:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5010              		.loc 1 4831 0
 5011 004e A36A     		ldr	r3, [r4, #40]
 5012              	.LVL406:
 5013 0050 43B1     		cbz	r3, .L456
 5014              	.LBB196:
 5015              	.LBB197:
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5016              		.loc 2 195 0
 5017              		.syntax unified
 5018              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5019 0052 4FF01003 			mov r3, #16												
 5020 0056 83F31188 		msr basepri, r3											
 5021 005a BFF36F8F 		isb														
 5022 005e BFF34F8F 		dsb														
 5023              	
 5024              	@ 0 "" 2
 5025              	.LVL407:
 5026              		.thumb
 5027              		.syntax unified
 5028              	.L457:
 5029 0062 FEE7     		b	.L457
 5030              	.L456:
 5031              	.LBE197:
 5032              	.LBE196:
4833:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5033              		.loc 1 4833 0
 5034 0064 144B     		ldr	r3, .L463
 5035 0066 1B68     		ldr	r3, [r3]
 5036 0068 DBB9     		cbnz	r3, .L458
4835:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 5037              		.loc 1 4835 0
 5038 006a 271D     		adds	r7, r4, #4
 5039 006c 3846     		mov	r0, r7
 5040 006e FFF7FEFF 		bl	uxListRemove
 5041              	.LVL408:
4836:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5042              		.loc 1 4836 0
 5043 0072 E26A     		ldr	r2, [r4, #44]
 5044 0074 0123     		movs	r3, #1
 5045 0076 9340     		lsls	r3, r3, r2
 5046 0078 1049     		ldr	r1, .L463+4
 5047 007a 0868     		ldr	r0, [r1]
 5048 007c 0343     		orrs	r3, r3, r0
 5049 007e 0B60     		str	r3, [r1]
 5050 0080 3946     		mov	r1, r7
 5051 0082 0F4B     		ldr	r3, .L463+8
 5052 0084 1420     		movs	r0, #20
 5053 0086 00FB0230 		mla	r0, r0, r2, r3
 5054 008a FFF7FEFF 		bl	vListInsertEnd
 5055              	.LVL409:
 5056              	.L459:
4845:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5057              		.loc 1 4845 0
 5058 008e E26A     		ldr	r2, [r4, #44]
 5059 0090 0C4B     		ldr	r3, .L463+12
ARM GAS  /tmp/ccPN8tEQ.s 			page 191


 5060 0092 1B68     		ldr	r3, [r3]
 5061 0094 DB6A     		ldr	r3, [r3, #44]
 5062 0096 9A42     		cmp	r2, r3
 5063 0098 D6D9     		bls	.L455
4849:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 5064              		.loc 1 4849 0
 5065 009a 45B1     		cbz	r5, .L460
4851:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5066              		.loc 1 4851 0
 5067 009c 0123     		movs	r3, #1
 5068 009e 2B60     		str	r3, [r5]
 5069 00a0 D2E7     		b	.L455
 5070              	.L458:
4842:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5071              		.loc 1 4842 0
 5072 00a2 04F11801 		add	r1, r4, #24
 5073 00a6 0848     		ldr	r0, .L463+16
 5074 00a8 FFF7FEFF 		bl	vListInsertEnd
 5075              	.LVL410:
 5076 00ac EFE7     		b	.L459
 5077              	.L460:
4858:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5078              		.loc 1 4858 0
 5079 00ae 074B     		ldr	r3, .L463+20
 5080 00b0 0122     		movs	r2, #1
 5081 00b2 1A60     		str	r2, [r3]
 5082 00b4 C8E7     		b	.L455
 5083              	.L464:
 5084 00b6 00BF     		.align	2
 5085              	.L463:
 5086 00b8 00000000 		.word	.LANCHOR16
 5087 00bc 00000000 		.word	.LANCHOR13
 5088 00c0 00000000 		.word	.LANCHOR4
 5089 00c4 00000000 		.word	.LANCHOR10
 5090 00c8 00000000 		.word	.LANCHOR1
 5091 00cc 00000000 		.word	.LANCHOR20
 5092              		.cfi_endproc
 5093              	.LFE52:
 5095              		.section	.text.xTaskNotifyStateClear,"ax",%progbits
 5096              		.align	1
 5097              		.global	xTaskNotifyStateClear
 5098              		.syntax unified
 5099              		.thumb
 5100              		.thumb_func
 5101              		.fpu fpv4-sp-d16
 5103              	xTaskNotifyStateClear:
 5104              	.LFB53:
4877:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 5105              		.loc 1 4877 0
 5106              		.cfi_startproc
 5107              		@ args = 0, pretend = 0, frame = 0
 5108              		@ frame_needed = 0, uses_anonymous_args = 0
 5109              	.LVL411:
 5110 0000 10B5     		push	{r4, lr}
 5111              	.LCFI50:
 5112              		.cfi_def_cfa_offset 8
 5113              		.cfi_offset 4, -8
ARM GAS  /tmp/ccPN8tEQ.s 			page 192


 5114              		.cfi_offset 14, -4
4883:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5115              		.loc 1 4883 0
 5116 0002 0446     		mov	r4, r0
 5117 0004 58B1     		cbz	r0, .L470
 5118              	.LVL412:
 5119              	.L466:
4885:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5120              		.loc 1 4885 0 discriminator 4
 5121 0006 FFF7FEFF 		bl	vPortEnterCritical
 5122              	.LVL413:
4887:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5123              		.loc 1 4887 0 discriminator 4
 5124 000a 94F85030 		ldrb	r3, [r4, #80]	@ zero_extendqisi2
 5125 000e DBB2     		uxtb	r3, r3
 5126 0010 022B     		cmp	r3, #2
 5127 0012 07D0     		beq	.L471
4894:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5128              		.loc 1 4894 0
 5129 0014 0024     		movs	r4, #0
 5130              	.LVL414:
 5131              	.L467:
4897:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5132              		.loc 1 4897 0
 5133 0016 FFF7FEFF 		bl	vPortExitCritical
 5134              	.LVL415:
4900:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5135              		.loc 1 4900 0
 5136 001a 2046     		mov	r0, r4
 5137 001c 10BD     		pop	{r4, pc}
 5138              	.LVL416:
 5139              	.L470:
4883:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5140              		.loc 1 4883 0 discriminator 1
 5141 001e 044B     		ldr	r3, .L472
 5142 0020 1C68     		ldr	r4, [r3]
 5143              	.LVL417:
 5144 0022 F0E7     		b	.L466
 5145              	.LVL418:
 5146              	.L471:
4889:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 5147              		.loc 1 4889 0
 5148 0024 0023     		movs	r3, #0
 5149 0026 84F85030 		strb	r3, [r4, #80]
 5150              	.LVL419:
4890:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5151              		.loc 1 4890 0
 5152 002a 0124     		movs	r4, #1
 5153              	.LVL420:
 5154 002c F3E7     		b	.L467
 5155              	.L473:
 5156 002e 00BF     		.align	2
 5157              	.L472:
 5158 0030 00000000 		.word	.LANCHOR10
 5159              		.cfi_endproc
 5160              	.LFE53:
 5162              		.global	pxCurrentTCB
ARM GAS  /tmp/ccPN8tEQ.s 			page 193


 5163              		.section	.bss.pxCurrentTCB,"aw",%nobits
 5164              		.align	2
 5165              		.set	.LANCHOR10,. + 0
 5168              	pxCurrentTCB:
 5169 0000 00000000 		.space	4
 5170              		.section	.bss.pxDelayedTaskList,"aw",%nobits
 5171              		.align	2
 5172              		.set	.LANCHOR2,. + 0
 5175              	pxDelayedTaskList:
 5176 0000 00000000 		.space	4
 5177              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
 5178              		.align	2
 5179              		.set	.LANCHOR8,. + 0
 5182              	pxOverflowDelayedTaskList:
 5183 0000 00000000 		.space	4
 5184              		.section	.bss.pxReadyTasksLists,"aw",%nobits
 5185              		.align	2
 5186              		.set	.LANCHOR4,. + 0
 5189              	pxReadyTasksLists:
 5190 0000 00000000 		.space	140
 5190      00000000 
 5190      00000000 
 5190      00000000 
 5190      00000000 
 5191              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
 5192              		.align	2
 5193              		.set	.LANCHOR9,. + 0
 5196              	uxCurrentNumberOfTasks:
 5197 0000 00000000 		.space	4
 5198              		.section	.bss.uxDeletedTasksWaitingCleanUp,"aw",%nobits
 5199              		.align	2
 5200              		.set	.LANCHOR14,. + 0
 5203              	uxDeletedTasksWaitingCleanUp:
 5204 0000 00000000 		.space	4
 5205              		.section	.bss.uxPendedTicks,"aw",%nobits
 5206              		.align	2
 5207              		.set	.LANCHOR19,. + 0
 5210              	uxPendedTicks:
 5211 0000 00000000 		.space	4
 5212              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 5213              		.align	2
 5214              		.set	.LANCHOR16,. + 0
 5217              	uxSchedulerSuspended:
 5218 0000 00000000 		.space	4
 5219              		.section	.bss.uxTaskNumber,"aw",%nobits
 5220              		.align	2
 5221              		.set	.LANCHOR12,. + 0
 5224              	uxTaskNumber:
 5225 0000 00000000 		.space	4
 5226              		.section	.bss.uxTopReadyPriority,"aw",%nobits
 5227              		.align	2
 5228              		.set	.LANCHOR13,. + 0
 5231              	uxTopReadyPriority:
 5232 0000 00000000 		.space	4
 5233              		.section	.bss.xDelayedTaskList1,"aw",%nobits
 5234              		.align	2
 5235              		.set	.LANCHOR5,. + 0
ARM GAS  /tmp/ccPN8tEQ.s 			page 194


 5238              	xDelayedTaskList1:
 5239 0000 00000000 		.space	20
 5239      00000000 
 5239      00000000 
 5239      00000000 
 5239      00000000 
 5240              		.section	.bss.xDelayedTaskList2,"aw",%nobits
 5241              		.align	2
 5242              		.set	.LANCHOR6,. + 0
 5245              	xDelayedTaskList2:
 5246 0000 00000000 		.space	20
 5246      00000000 
 5246      00000000 
 5246      00000000 
 5246      00000000 
 5247              		.section	.bss.xIdleTaskHandle,"aw",%nobits
 5248              		.align	2
 5249              		.set	.LANCHOR17,. + 0
 5252              	xIdleTaskHandle:
 5253 0000 00000000 		.space	4
 5254              		.section	.bss.xNextTaskUnblockTime,"aw",%nobits
 5255              		.align	2
 5256              		.set	.LANCHOR3,. + 0
 5259              	xNextTaskUnblockTime:
 5260 0000 00000000 		.space	4
 5261              		.section	.bss.xNumOfOverflows,"aw",%nobits
 5262              		.align	2
 5263              		.set	.LANCHOR18,. + 0
 5266              	xNumOfOverflows:
 5267 0000 00000000 		.space	4
 5268              		.section	.bss.xPendingReadyList,"aw",%nobits
 5269              		.align	2
 5270              		.set	.LANCHOR1,. + 0
 5273              	xPendingReadyList:
 5274 0000 00000000 		.space	20
 5274      00000000 
 5274      00000000 
 5274      00000000 
 5274      00000000 
 5275              		.section	.bss.xSchedulerRunning,"aw",%nobits
 5276              		.align	2
 5277              		.set	.LANCHOR11,. + 0
 5280              	xSchedulerRunning:
 5281 0000 00000000 		.space	4
 5282              		.section	.bss.xSuspendedTaskList,"aw",%nobits
 5283              		.align	2
 5284              		.set	.LANCHOR0,. + 0
 5287              	xSuspendedTaskList:
 5288 0000 00000000 		.space	20
 5288      00000000 
 5288      00000000 
 5288      00000000 
 5288      00000000 
 5289              		.section	.bss.xTasksWaitingTermination,"aw",%nobits
 5290              		.align	2
 5291              		.set	.LANCHOR7,. + 0
 5294              	xTasksWaitingTermination:
ARM GAS  /tmp/ccPN8tEQ.s 			page 195


 5295 0000 00000000 		.space	20
 5295      00000000 
 5295      00000000 
 5295      00000000 
 5295      00000000 
 5296              		.section	.bss.xTickCount,"aw",%nobits
 5297              		.align	2
 5298              		.set	.LANCHOR15,. + 0
 5301              	xTickCount:
 5302 0000 00000000 		.space	4
 5303              		.section	.bss.xYieldPending,"aw",%nobits
 5304              		.align	2
 5305              		.set	.LANCHOR20,. + 0
 5308              	xYieldPending:
 5309 0000 00000000 		.space	4
 5310              		.section	.rodata.vTaskStartScheduler.str1.4,"aMS",%progbits,1
 5311              		.align	2
 5312              	.LC0:
 5313 0000 49444C45 		.ascii	"IDLE\000"
 5313      00
 5314              		.text
 5315              	.Letext0:
 5316              		.file 3 "/home/mats/gcc-arm-none-eabi-7-2018-q2-update/lib/gcc/arm-none-eabi/7.3.1/include/stddef.
 5317              		.file 4 "/home/mats/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/machine/_default_type
 5318              		.file 5 "/home/mats/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/lock.h"
 5319              		.file 6 "/home/mats/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/_types.h"
 5320              		.file 7 "/home/mats/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/reent.h"
 5321              		.file 8 "/home/mats/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/stdlib.h"
 5322              		.file 9 "/home/mats/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/_stdint.h"
 5323              		.file 10 "../../core/platform/octa/inc/FreeRTOSConfig.h"
 5324              		.file 11 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/include/projdefs.h"
 5325              		.file 12 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/include/list.h"
 5326              		.file 13 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 5327              		.file 14 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/include/portable.h"
 5328              		.file 15 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/include/timers.h"
ARM GAS  /tmp/ccPN8tEQ.s 			page 196


DEFINED SYMBOLS
                            *ABS*:0000000000000000 tasks.c
     /tmp/ccPN8tEQ.s:18     .text.prvTaskIsTaskSuspended:0000000000000000 $t
     /tmp/ccPN8tEQ.s:24     .text.prvTaskIsTaskSuspended:0000000000000000 prvTaskIsTaskSuspended
     /tmp/ccPN8tEQ.s:92     .text.prvTaskIsTaskSuspended:0000000000000038 $d
     /tmp/ccPN8tEQ.s:98     .text.prvResetNextTaskUnblockTime:0000000000000000 $t
     /tmp/ccPN8tEQ.s:104    .text.prvResetNextTaskUnblockTime:0000000000000000 prvResetNextTaskUnblockTime
     /tmp/ccPN8tEQ.s:138    .text.prvResetNextTaskUnblockTime:0000000000000024 $d
     /tmp/ccPN8tEQ.s:144    .text.prvDeleteTCB:0000000000000000 $t
     /tmp/ccPN8tEQ.s:150    .text.prvDeleteTCB:0000000000000000 prvDeleteTCB
     /tmp/ccPN8tEQ.s:178    .text.prvInitialiseNewTask:0000000000000000 $t
     /tmp/ccPN8tEQ.s:184    .text.prvInitialiseNewTask:0000000000000000 prvInitialiseNewTask
     /tmp/ccPN8tEQ.s:293    .text.prvInitialiseTaskLists:0000000000000000 $t
     /tmp/ccPN8tEQ.s:299    .text.prvInitialiseTaskLists:0000000000000000 prvInitialiseTaskLists
     /tmp/ccPN8tEQ.s:366    .text.prvInitialiseTaskLists:0000000000000048 $d
     /tmp/ccPN8tEQ.s:378    .text.prvAddNewTaskToReadyList:0000000000000000 $t
     /tmp/ccPN8tEQ.s:384    .text.prvAddNewTaskToReadyList:0000000000000000 prvAddNewTaskToReadyList
     /tmp/ccPN8tEQ.s:492    .text.prvAddNewTaskToReadyList:000000000000008c $d
     /tmp/ccPN8tEQ.s:503    .text.prvCheckTasksWaitingTermination:0000000000000000 $t
     /tmp/ccPN8tEQ.s:509    .text.prvCheckTasksWaitingTermination:0000000000000000 prvCheckTasksWaitingTermination
     /tmp/ccPN8tEQ.s:576    .text.prvCheckTasksWaitingTermination:0000000000000040 $d
     /tmp/ccPN8tEQ.s:583    .text.prvIdleTask:0000000000000000 $t
     /tmp/ccPN8tEQ.s:589    .text.prvIdleTask:0000000000000000 prvIdleTask
     /tmp/ccPN8tEQ.s:629    .text.prvIdleTask:0000000000000020 $d
     /tmp/ccPN8tEQ.s:635    .text.prvAddCurrentTaskToDelayedList:0000000000000000 $t
     /tmp/ccPN8tEQ.s:641    .text.prvAddCurrentTaskToDelayedList:0000000000000000 prvAddCurrentTaskToDelayedList
     /tmp/ccPN8tEQ.s:742    .text.prvAddCurrentTaskToDelayedList:000000000000007c $d
     /tmp/ccPN8tEQ.s:753    .text.xTaskCreate:0000000000000000 $t
     /tmp/ccPN8tEQ.s:760    .text.xTaskCreate:0000000000000000 xTaskCreate
     /tmp/ccPN8tEQ.s:865    .text.vTaskDelete:0000000000000000 $t
     /tmp/ccPN8tEQ.s:872    .text.vTaskDelete:0000000000000000 vTaskDelete
     /tmp/ccPN8tEQ.s:1024   .text.vTaskDelete:00000000000000b8 $d
     /tmp/ccPN8tEQ.s:1038   .text.uxTaskPriorityGet:0000000000000000 $t
     /tmp/ccPN8tEQ.s:1045   .text.uxTaskPriorityGet:0000000000000000 uxTaskPriorityGet
     /tmp/ccPN8tEQ.s:1084   .text.uxTaskPriorityGet:000000000000001c $d
     /tmp/ccPN8tEQ.s:1089   .text.uxTaskPriorityGetFromISR:0000000000000000 $t
     /tmp/ccPN8tEQ.s:1096   .text.uxTaskPriorityGetFromISR:0000000000000000 uxTaskPriorityGetFromISR
     /tmp/ccPN8tEQ.s:1159   .text.uxTaskPriorityGetFromISR:000000000000002c $d
     /tmp/ccPN8tEQ.s:1164   .text.vTaskPrioritySet:0000000000000000 $t
     /tmp/ccPN8tEQ.s:1171   .text.vTaskPrioritySet:0000000000000000 vTaskPrioritySet
     /tmp/ccPN8tEQ.s:1349   .text.vTaskPrioritySet:00000000000000cc $d
     /tmp/ccPN8tEQ.s:1357   .text.vTaskResume:0000000000000000 $t
     /tmp/ccPN8tEQ.s:1364   .text.vTaskResume:0000000000000000 vTaskResume
     /tmp/ccPN8tEQ.s:1467   .text.vTaskResume:0000000000000074 $d
     /tmp/ccPN8tEQ.s:1475   .text.xTaskResumeFromISR:0000000000000000 $t
     /tmp/ccPN8tEQ.s:1482   .text.xTaskResumeFromISR:0000000000000000 xTaskResumeFromISR
     /tmp/ccPN8tEQ.s:1615   .text.xTaskResumeFromISR:0000000000000090 $d
     /tmp/ccPN8tEQ.s:1624   .text.vTaskStartScheduler:0000000000000000 $t
     /tmp/ccPN8tEQ.s:1631   .text.vTaskStartScheduler:0000000000000000 vTaskStartScheduler
     /tmp/ccPN8tEQ.s:1734   .text.vTaskStartScheduler:000000000000006c $d
     /tmp/ccPN8tEQ.s:1746   .text.vTaskEndScheduler:0000000000000000 $t
     /tmp/ccPN8tEQ.s:1753   .text.vTaskEndScheduler:0000000000000000 vTaskEndScheduler
     /tmp/ccPN8tEQ.s:1791   .text.vTaskEndScheduler:0000000000000020 $d
     /tmp/ccPN8tEQ.s:1796   .text.vTaskSuspendAll:0000000000000000 $t
     /tmp/ccPN8tEQ.s:1803   .text.vTaskSuspendAll:0000000000000000 vTaskSuspendAll
     /tmp/ccPN8tEQ.s:1820   .text.vTaskSuspendAll:000000000000000c $d
     /tmp/ccPN8tEQ.s:1825   .text.xTaskGetTickCount:0000000000000000 $t
ARM GAS  /tmp/ccPN8tEQ.s 			page 197


     /tmp/ccPN8tEQ.s:1832   .text.xTaskGetTickCount:0000000000000000 xTaskGetTickCount
     /tmp/ccPN8tEQ.s:1848   .text.xTaskGetTickCount:0000000000000008 $d
     /tmp/ccPN8tEQ.s:1853   .text.xTaskGetTickCountFromISR:0000000000000000 $t
     /tmp/ccPN8tEQ.s:1860   .text.xTaskGetTickCountFromISR:0000000000000000 xTaskGetTickCountFromISR
     /tmp/ccPN8tEQ.s:1883   .text.xTaskGetTickCountFromISR:000000000000000c $d
     /tmp/ccPN8tEQ.s:1888   .text.uxTaskGetNumberOfTasks:0000000000000000 $t
     /tmp/ccPN8tEQ.s:1895   .text.uxTaskGetNumberOfTasks:0000000000000000 uxTaskGetNumberOfTasks
     /tmp/ccPN8tEQ.s:1910   .text.uxTaskGetNumberOfTasks:0000000000000008 $d
     /tmp/ccPN8tEQ.s:1915   .text.pcTaskGetName:0000000000000000 $t
     /tmp/ccPN8tEQ.s:1922   .text.pcTaskGetName:0000000000000000 pcTaskGetName
     /tmp/ccPN8tEQ.s:1968   .text.pcTaskGetName:0000000000000024 $d
     /tmp/ccPN8tEQ.s:1975   .text.xTaskIncrementTick:0000000000000000 $t
     /tmp/ccPN8tEQ.s:1982   .text.xTaskIncrementTick:0000000000000000 xTaskIncrementTick
     /tmp/ccPN8tEQ.s:2186   .text.xTaskIncrementTick:00000000000000ec $d
     /tmp/ccPN8tEQ.s:2201   .text.xTaskResumeAll:0000000000000000 $t
     /tmp/ccPN8tEQ.s:2208   .text.xTaskResumeAll:0000000000000000 xTaskResumeAll
     /tmp/ccPN8tEQ.s:2392   .text.xTaskResumeAll:00000000000000d0 $d
     /tmp/ccPN8tEQ.s:2405   .text.vTaskDelay:0000000000000000 $t
     /tmp/ccPN8tEQ.s:2412   .text.vTaskDelay:0000000000000000 vTaskDelay
     /tmp/ccPN8tEQ.s:2485   .text.vTaskDelay:0000000000000044 $d
     /tmp/ccPN8tEQ.s:2491   .text.vTaskSwitchContext:0000000000000000 $t
     /tmp/ccPN8tEQ.s:2498   .text.vTaskSwitchContext:0000000000000000 vTaskSwitchContext
     /tmp/ccPN8tEQ.s:2625   .text.vTaskSwitchContext:0000000000000084 $d
     /tmp/ccPN8tEQ.s:2636   .text.vTaskSuspend:0000000000000000 $t
     /tmp/ccPN8tEQ.s:2643   .text.vTaskSuspend:0000000000000000 vTaskSuspend
     /tmp/ccPN8tEQ.s:2809   .text.vTaskSuspend:00000000000000cc $d
     /tmp/ccPN8tEQ.s:2821   .text.vTaskPlaceOnEventList:0000000000000000 $t
     /tmp/ccPN8tEQ.s:2828   .text.vTaskPlaceOnEventList:0000000000000000 vTaskPlaceOnEventList
     /tmp/ccPN8tEQ.s:2881   .text.vTaskPlaceOnEventList:000000000000002c $d
     /tmp/ccPN8tEQ.s:2886   .text.vTaskPlaceOnUnorderedEventList:0000000000000000 $t
     /tmp/ccPN8tEQ.s:2893   .text.vTaskPlaceOnUnorderedEventList:0000000000000000 vTaskPlaceOnUnorderedEventList
     /tmp/ccPN8tEQ.s:2981   .text.vTaskPlaceOnUnorderedEventList:0000000000000054 $d
     /tmp/ccPN8tEQ.s:2987   .text.vTaskPlaceOnEventListRestricted:0000000000000000 $t
     /tmp/ccPN8tEQ.s:2994   .text.vTaskPlaceOnEventListRestricted:0000000000000000 vTaskPlaceOnEventListRestricted
     /tmp/ccPN8tEQ.s:3056   .text.vTaskPlaceOnEventListRestricted:0000000000000034 $d
     /tmp/ccPN8tEQ.s:3061   .text.xTaskRemoveFromEventList:0000000000000000 $t
     /tmp/ccPN8tEQ.s:3068   .text.xTaskRemoveFromEventList:0000000000000000 xTaskRemoveFromEventList
     /tmp/ccPN8tEQ.s:3171   .text.xTaskRemoveFromEventList:0000000000000074 $d
     /tmp/ccPN8tEQ.s:3181   .text.vTaskRemoveFromUnorderedEventList:0000000000000000 $t
     /tmp/ccPN8tEQ.s:3188   .text.vTaskRemoveFromUnorderedEventList:0000000000000000 vTaskRemoveFromUnorderedEventList
     /tmp/ccPN8tEQ.s:3292   .text.vTaskRemoveFromUnorderedEventList:0000000000000074 $d
     /tmp/ccPN8tEQ.s:3303   .text.vTaskSetTimeOutState:0000000000000000 $t
     /tmp/ccPN8tEQ.s:3310   .text.vTaskSetTimeOutState:0000000000000000 vTaskSetTimeOutState
     /tmp/ccPN8tEQ.s:3365   .text.vTaskSetTimeOutState:0000000000000030 $d
     /tmp/ccPN8tEQ.s:3371   .text.vTaskInternalSetTimeOutState:0000000000000000 $t
     /tmp/ccPN8tEQ.s:3378   .text.vTaskInternalSetTimeOutState:0000000000000000 vTaskInternalSetTimeOutState
     /tmp/ccPN8tEQ.s:3399   .text.vTaskInternalSetTimeOutState:0000000000000010 $d
     /tmp/ccPN8tEQ.s:3405   .text.xTaskCheckForTimeOut:0000000000000000 $t
     /tmp/ccPN8tEQ.s:3412   .text.xTaskCheckForTimeOut:0000000000000000 xTaskCheckForTimeOut
     /tmp/ccPN8tEQ.s:3544   .text.xTaskCheckForTimeOut:0000000000000078 $d
     /tmp/ccPN8tEQ.s:3551   .text.vTaskMissedYield:0000000000000000 $t
     /tmp/ccPN8tEQ.s:3558   .text.vTaskMissedYield:0000000000000000 vTaskMissedYield
     /tmp/ccPN8tEQ.s:3574   .text.vTaskMissedYield:0000000000000008 $d
     /tmp/ccPN8tEQ.s:3579   .text.xTaskGetCurrentTaskHandle:0000000000000000 $t
     /tmp/ccPN8tEQ.s:3586   .text.xTaskGetCurrentTaskHandle:0000000000000000 xTaskGetCurrentTaskHandle
     /tmp/ccPN8tEQ.s:3602   .text.xTaskGetCurrentTaskHandle:0000000000000008 $d
     /tmp/ccPN8tEQ.s:3607   .text.xTaskGetSchedulerState:0000000000000000 $t
ARM GAS  /tmp/ccPN8tEQ.s 			page 198


     /tmp/ccPN8tEQ.s:3614   .text.xTaskGetSchedulerState:0000000000000000 xTaskGetSchedulerState
     /tmp/ccPN8tEQ.s:3646   .text.xTaskGetSchedulerState:0000000000000018 $d
     /tmp/ccPN8tEQ.s:3652   .text.xTaskPriorityInherit:0000000000000000 $t
     /tmp/ccPN8tEQ.s:3659   .text.xTaskPriorityInherit:0000000000000000 xTaskPriorityInherit
     /tmp/ccPN8tEQ.s:3797   .text.xTaskPriorityInherit:00000000000000ac $d
     /tmp/ccPN8tEQ.s:3804   .text.xTaskPriorityDisinherit:0000000000000000 $t
     /tmp/ccPN8tEQ.s:3811   .text.xTaskPriorityDisinherit:0000000000000000 xTaskPriorityDisinherit
     /tmp/ccPN8tEQ.s:3965   .text.xTaskPriorityDisinherit:00000000000000a4 $d
     /tmp/ccPN8tEQ.s:3972   .text.vTaskPriorityDisinheritAfterTimeout:0000000000000000 $t
     /tmp/ccPN8tEQ.s:3979   .text.vTaskPriorityDisinheritAfterTimeout:0000000000000000 vTaskPriorityDisinheritAfterTimeout
     /tmp/ccPN8tEQ.s:4138   .text.vTaskPriorityDisinheritAfterTimeout:00000000000000b4 $d
     /tmp/ccPN8tEQ.s:4145   .text.uxTaskResetEventItemValue:0000000000000000 $t
     /tmp/ccPN8tEQ.s:4152   .text.uxTaskResetEventItemValue:0000000000000000 uxTaskResetEventItemValue
     /tmp/ccPN8tEQ.s:4175   .text.uxTaskResetEventItemValue:0000000000000014 $d
     /tmp/ccPN8tEQ.s:4180   .text.pvTaskIncrementMutexHeldCount:0000000000000000 $t
     /tmp/ccPN8tEQ.s:4187   .text.pvTaskIncrementMutexHeldCount:0000000000000000 pvTaskIncrementMutexHeldCount
     /tmp/ccPN8tEQ.s:4213   .text.pvTaskIncrementMutexHeldCount:0000000000000018 $d
     /tmp/ccPN8tEQ.s:4218   .text.ulTaskNotifyTake:0000000000000000 $t
     /tmp/ccPN8tEQ.s:4225   .text.ulTaskNotifyTake:0000000000000000 ulTaskNotifyTake
     /tmp/ccPN8tEQ.s:4321   .text.ulTaskNotifyTake:0000000000000070 $d
     /tmp/ccPN8tEQ.s:4327   .text.xTaskNotifyWait:0000000000000000 $t
     /tmp/ccPN8tEQ.s:4334   .text.xTaskNotifyWait:0000000000000000 xTaskNotifyWait
     /tmp/ccPN8tEQ.s:4450   .text.xTaskNotifyWait:0000000000000090 $d
     /tmp/ccPN8tEQ.s:4456   .text.xTaskGenericNotify:0000000000000000 $t
     /tmp/ccPN8tEQ.s:4463   .text.xTaskGenericNotify:0000000000000000 xTaskGenericNotify
     /tmp/ccPN8tEQ.s:4529   .text.xTaskGenericNotify:000000000000003e $d
     /tmp/ccPN8tEQ.s:4533   .text.xTaskGenericNotify:0000000000000042 $t
     /tmp/ccPN8tEQ.s:4655   .text.xTaskGenericNotify:00000000000000d0 $d
     /tmp/ccPN8tEQ.s:4663   .text.xTaskGenericNotifyFromISR:0000000000000000 $t
     /tmp/ccPN8tEQ.s:4670   .text.xTaskGenericNotifyFromISR:0000000000000000 xTaskGenericNotifyFromISR
     /tmp/ccPN8tEQ.s:4755   .text.xTaskGenericNotifyFromISR:000000000000005c $d
     /tmp/ccPN8tEQ.s:4759   .text.xTaskGenericNotifyFromISR:0000000000000060 $t
     /tmp/ccPN8tEQ.s:4903   .text.xTaskGenericNotifyFromISR:0000000000000108 $d
     /tmp/ccPN8tEQ.s:4913   .text.vTaskNotifyGiveFromISR:0000000000000000 $t
     /tmp/ccPN8tEQ.s:4920   .text.vTaskNotifyGiveFromISR:0000000000000000 vTaskNotifyGiveFromISR
     /tmp/ccPN8tEQ.s:5086   .text.vTaskNotifyGiveFromISR:00000000000000b8 $d
     /tmp/ccPN8tEQ.s:5096   .text.xTaskNotifyStateClear:0000000000000000 $t
     /tmp/ccPN8tEQ.s:5103   .text.xTaskNotifyStateClear:0000000000000000 xTaskNotifyStateClear
     /tmp/ccPN8tEQ.s:5158   .text.xTaskNotifyStateClear:0000000000000030 $d
     /tmp/ccPN8tEQ.s:5168   .bss.pxCurrentTCB:0000000000000000 pxCurrentTCB
     /tmp/ccPN8tEQ.s:5164   .bss.pxCurrentTCB:0000000000000000 $d
     /tmp/ccPN8tEQ.s:5171   .bss.pxDelayedTaskList:0000000000000000 $d
     /tmp/ccPN8tEQ.s:5175   .bss.pxDelayedTaskList:0000000000000000 pxDelayedTaskList
     /tmp/ccPN8tEQ.s:5178   .bss.pxOverflowDelayedTaskList:0000000000000000 $d
     /tmp/ccPN8tEQ.s:5182   .bss.pxOverflowDelayedTaskList:0000000000000000 pxOverflowDelayedTaskList
     /tmp/ccPN8tEQ.s:5185   .bss.pxReadyTasksLists:0000000000000000 $d
     /tmp/ccPN8tEQ.s:5189   .bss.pxReadyTasksLists:0000000000000000 pxReadyTasksLists
     /tmp/ccPN8tEQ.s:5192   .bss.uxCurrentNumberOfTasks:0000000000000000 $d
     /tmp/ccPN8tEQ.s:5196   .bss.uxCurrentNumberOfTasks:0000000000000000 uxCurrentNumberOfTasks
     /tmp/ccPN8tEQ.s:5199   .bss.uxDeletedTasksWaitingCleanUp:0000000000000000 $d
     /tmp/ccPN8tEQ.s:5203   .bss.uxDeletedTasksWaitingCleanUp:0000000000000000 uxDeletedTasksWaitingCleanUp
     /tmp/ccPN8tEQ.s:5206   .bss.uxPendedTicks:0000000000000000 $d
     /tmp/ccPN8tEQ.s:5210   .bss.uxPendedTicks:0000000000000000 uxPendedTicks
     /tmp/ccPN8tEQ.s:5213   .bss.uxSchedulerSuspended:0000000000000000 $d
     /tmp/ccPN8tEQ.s:5217   .bss.uxSchedulerSuspended:0000000000000000 uxSchedulerSuspended
     /tmp/ccPN8tEQ.s:5220   .bss.uxTaskNumber:0000000000000000 $d
     /tmp/ccPN8tEQ.s:5224   .bss.uxTaskNumber:0000000000000000 uxTaskNumber
ARM GAS  /tmp/ccPN8tEQ.s 			page 199


     /tmp/ccPN8tEQ.s:5227   .bss.uxTopReadyPriority:0000000000000000 $d
     /tmp/ccPN8tEQ.s:5231   .bss.uxTopReadyPriority:0000000000000000 uxTopReadyPriority
     /tmp/ccPN8tEQ.s:5234   .bss.xDelayedTaskList1:0000000000000000 $d
     /tmp/ccPN8tEQ.s:5238   .bss.xDelayedTaskList1:0000000000000000 xDelayedTaskList1
     /tmp/ccPN8tEQ.s:5241   .bss.xDelayedTaskList2:0000000000000000 $d
     /tmp/ccPN8tEQ.s:5245   .bss.xDelayedTaskList2:0000000000000000 xDelayedTaskList2
     /tmp/ccPN8tEQ.s:5248   .bss.xIdleTaskHandle:0000000000000000 $d
     /tmp/ccPN8tEQ.s:5252   .bss.xIdleTaskHandle:0000000000000000 xIdleTaskHandle
     /tmp/ccPN8tEQ.s:5255   .bss.xNextTaskUnblockTime:0000000000000000 $d
     /tmp/ccPN8tEQ.s:5259   .bss.xNextTaskUnblockTime:0000000000000000 xNextTaskUnblockTime
     /tmp/ccPN8tEQ.s:5262   .bss.xNumOfOverflows:0000000000000000 $d
     /tmp/ccPN8tEQ.s:5266   .bss.xNumOfOverflows:0000000000000000 xNumOfOverflows
     /tmp/ccPN8tEQ.s:5269   .bss.xPendingReadyList:0000000000000000 $d
     /tmp/ccPN8tEQ.s:5273   .bss.xPendingReadyList:0000000000000000 xPendingReadyList
     /tmp/ccPN8tEQ.s:5276   .bss.xSchedulerRunning:0000000000000000 $d
     /tmp/ccPN8tEQ.s:5280   .bss.xSchedulerRunning:0000000000000000 xSchedulerRunning
     /tmp/ccPN8tEQ.s:5283   .bss.xSuspendedTaskList:0000000000000000 $d
     /tmp/ccPN8tEQ.s:5287   .bss.xSuspendedTaskList:0000000000000000 xSuspendedTaskList
     /tmp/ccPN8tEQ.s:5290   .bss.xTasksWaitingTermination:0000000000000000 $d
     /tmp/ccPN8tEQ.s:5294   .bss.xTasksWaitingTermination:0000000000000000 xTasksWaitingTermination
     /tmp/ccPN8tEQ.s:5297   .bss.xTickCount:0000000000000000 $d
     /tmp/ccPN8tEQ.s:5301   .bss.xTickCount:0000000000000000 xTickCount
     /tmp/ccPN8tEQ.s:5304   .bss.xYieldPending:0000000000000000 $d
     /tmp/ccPN8tEQ.s:5308   .bss.xYieldPending:0000000000000000 xYieldPending
     /tmp/ccPN8tEQ.s:5311   .rodata.vTaskStartScheduler.str1.4:0000000000000000 $d

UNDEFINED SYMBOLS
vPortFree
vListInitialiseItem
pxPortInitialiseStack
vListInitialise
vPortEnterCritical
vListInsertEnd
vPortExitCritical
uxListRemove
vListInsert
pvPortMalloc
vPortValidateInterruptPriority
xTimerCreateTimerTask
xPortStartScheduler
vPortEndScheduler
