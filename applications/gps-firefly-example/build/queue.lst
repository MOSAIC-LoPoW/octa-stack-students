ARM GAS  /tmp/ccQrEWyA.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"queue.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.prvGetDisinheritPriorityAfterTimeout,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	prvGetDisinheritPriorityAfterTimeout:
  25              	.LFB22:
  26              		.file 1 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c"
   1:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
   2:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * FreeRTOS Kernel V10.0.1
   3:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  *
   5:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * the Software without restriction, including without limitation the rights to
   8:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * subject to the following conditions:
  11:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  *
  12:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * The above copyright notice and this permission notice shall be included in all
  13:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * copies or substantial portions of the Software.
  14:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  *
  15:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  *
  22:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * http://www.FreeRTOS.org
  23:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * http://aws.amazon.com/freertos
  24:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  *
  25:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * 1 tab == 4 spaces!
  26:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  */
  27:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  28:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #include <stdlib.h>
  29:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #include <string.h>
  30:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  31:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  32:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** all the API functions to use the MPU wrappers.  That should only be done when
ARM GAS  /tmp/ccQrEWyA.s 			page 2


  33:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** task.h is included from an application file. */
  34:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  35:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  36:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #include "FreeRTOS.h"
  37:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #include "task.h"
  38:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #include "queue.h"
  39:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  40:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
  41:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#include "croutine.h"
  42:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif
  43:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  44:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  45:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  46:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** header files above, but not in this file, in order to generate the correct
  47:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** privileged Vs unprivileged linkage and placement. */
  48:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  49:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  50:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  51:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /* Constants used with the cRxLock and cTxLock structure members. */
  52:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #define queueUNLOCKED					( ( int8_t ) -1 )
  53:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #define queueLOCKED_UNMODIFIED			( ( int8_t ) 0 )
  54:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  55:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /* When the Queue_t structure is used to represent a base queue its pcHead and
  56:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** pcTail members are used as pointers into the queue storage area.  When the
  57:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t structure is used to represent a mutex pcHead and pcTail pointers are
  58:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** not necessary, and the pcHead pointer is set to NULL to indicate that the
  59:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** pcTail pointer actually points to the mutex holder (if any).  Map alternative
  60:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** names to the pcHead and pcTail structure members to ensure the readability of
  61:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** the code is maintained despite this dual use of two structure members.  An
  62:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** alternative implementation would be to use a union, but use of a union is
  63:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** against the coding standard (although an exception to the standard has been
  64:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** permitted where the dual use also significantly changes the type of the
  65:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** structure member). */
  66:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #define pxMutexHolder					pcTail
  67:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #define uxQueueType						pcHead
  68:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #define queueQUEUE_IS_MUTEX				NULL
  69:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  70:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /* Semaphores do not actually store or copy data, so have an item size of
  71:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** zero. */
  72:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #define queueSEMAPHORE_QUEUE_ITEM_LENGTH ( ( UBaseType_t ) 0 )
  73:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #define queueMUTEX_GIVE_BLOCK_TIME		 ( ( TickType_t ) 0U )
  74:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  75:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if( configUSE_PREEMPTION == 0 )
  76:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* If the cooperative scheduler is being used then a yield should not be
  77:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	performed just because a higher priority task has been woken. */
  78:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#define queueYIELD_IF_USING_PREEMPTION()
  79:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #else
  80:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#define queueYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
  81:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif
  82:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  83:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
  84:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Definition of the queue used by the scheduler.
  85:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Items are queued by copy, not reference.  See the following link for the
  86:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * rationale: http://www.freertos.org/Embedded-RTOS-Queues.html
  87:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  */
  88:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** typedef struct QueueDefinition
  89:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
ARM GAS  /tmp/ccQrEWyA.s 			page 3


  90:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	int8_t *pcHead;					/*< Points to the beginning of the queue storage area. */
  91:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	int8_t *pcTail;					/*< Points to the byte at the end of the queue storage area.  Once more byte i
  92:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	int8_t *pcWriteTo;				/*< Points to the free next place in the storage area. */
  93:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  94:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	union							/* Use of a union is an exception to the coding standard to ensure two mutually exclus
  95:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
  96:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		int8_t *pcReadFrom;			/*< Points to the last place that a queued item was read from when the stru
  97:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		UBaseType_t uxRecursiveCallCount;/*< Maintains a count of the number of times a recursive mutex h
  98:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	} u;
  99:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 100:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	List_t xTasksWaitingToSend;		/*< List of tasks that are blocked waiting to post onto this queue.  
 101:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	List_t xTasksWaitingToReceive;	/*< List of tasks that are blocked waiting to read from this queue.
 102:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 103:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	volatile UBaseType_t uxMessagesWaiting;/*< The number of items currently in the queue. */
 104:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	UBaseType_t uxLength;			/*< The length of the queue defined as the number of items it will hold, n
 105:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	UBaseType_t uxItemSize;			/*< The size of each items that the queue will hold. */
 106:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 107:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	volatile int8_t cRxLock;		/*< Stores the number of items received from the queue (removed from the
 108:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	volatile int8_t cTxLock;		/*< Stores the number of items transmitted to the queue (added to the qu
 109:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 110:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 111:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		uint8_t ucStaticallyAllocated;	/*< Set to pdTRUE if the memory used by the queue was statically a
 112:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#endif
 113:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 114:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( configUSE_QUEUE_SETS == 1 )
 115:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		struct QueueDefinition *pxQueueSetContainer;
 116:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#endif
 117:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 118:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 119:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		UBaseType_t uxQueueNumber;
 120:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		uint8_t ucQueueType;
 121:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#endif
 122:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 123:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** } xQUEUE;
 124:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 125:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /* The old xQUEUE name is maintained above then typedefed to the new Queue_t
 126:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** name below to enable the use of older kernel aware debuggers. */
 127:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** typedef xQUEUE Queue_t;
 128:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 129:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 130:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 131:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
 132:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * The queue registry is just a means for kernel aware debuggers to locate
 133:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * queue structures.  It has no other purpose so is an optional component.
 134:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  */
 135:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
 136:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 137:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* The type stored within the queue registry array.  This allows a name
 138:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	to be assigned to each queue making kernel aware debugging a little
 139:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	more user friendly. */
 140:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	typedef struct QUEUE_REGISTRY_ITEM
 141:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 142:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		const char *pcQueueName; /*lint !e971 Unqualified char types are allowed for strings and single c
 143:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		QueueHandle_t xHandle;
 144:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	} xQueueRegistryItem;
 145:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 146:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* The old xQueueRegistryItem name is maintained above then typedefed to the
ARM GAS  /tmp/ccQrEWyA.s 			page 4


 147:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	new xQueueRegistryItem name below to enable the use of older kernel aware
 148:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	debuggers. */
 149:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	typedef xQueueRegistryItem QueueRegistryItem_t;
 150:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 151:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* The queue registry is simply an array of QueueRegistryItem_t structures.
 152:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	The pcQueueName member of a structure being NULL is indicative of the
 153:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	array position being vacant. */
 154:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	PRIVILEGED_DATA QueueRegistryItem_t xQueueRegistry[ configQUEUE_REGISTRY_SIZE ];
 155:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 156:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
 157:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 158:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
 159:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Unlocks a queue locked by a call to prvLockQueue.  Locking a queue does not
 160:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * prevent an ISR from adding or removing items to the queue, but does prevent
 161:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * an ISR from removing tasks from the queue event lists.  If an ISR finds a
 162:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * queue is locked it will instead increment the appropriate queue lock count
 163:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * to indicate that a task may require unblocking.  When the queue in unlocked
 164:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * these lock counts are inspected, and the appropriate action taken.
 165:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  */
 166:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue ) PRIVILEGED_FUNCTION;
 167:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 168:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
 169:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Uses a critical section to determine if there is any data in a queue.
 170:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  *
 171:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * @return pdTRUE if the queue contains no items, otherwise pdFALSE.
 172:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  */
 173:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue ) PRIVILEGED_FUNCTION;
 174:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 175:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
 176:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Uses a critical section to determine if there is any space in a queue.
 177:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  *
 178:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * @return pdTRUE if there is no space, otherwise pdFALSE;
 179:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  */
 180:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t *pxQueue ) PRIVILEGED_FUNCTION;
 181:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 182:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
 183:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Copies an item into the queue, either at the front of the queue or the
 184:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * back of the queue.
 185:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  */
 186:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const Bas
 187:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 188:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
 189:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Copies an item out of a queue.
 190:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  */
 191:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer ) PRIVILEGED_FUNCT
 192:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 193:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_QUEUE_SETS == 1 )
 194:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/*
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	 * Checks to see if a queue is a member of a queue set, and if so, notifies
 196:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	 * the queue set that the queue contains data.
 197:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	 */
 198:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCop
 199:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif
 200:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 201:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
 202:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Called after a Queue_t structure has been allocated either statically or
 203:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * dynamically to fill in the structure's members.
ARM GAS  /tmp/ccQrEWyA.s 			page 5


 204:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  */
 205:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, u
 206:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 207:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
 208:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Mutexes are a special type of queue.  When a mutex is created, first the
 209:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * queue is created, then prvInitialiseMutex() is called to configure the queue
 210:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * as a mutex.
 211:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  */
 212:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if( configUSE_MUTEXES == 1 )
 213:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	static void prvInitialiseMutex( Queue_t *pxNewQueue ) PRIVILEGED_FUNCTION;
 214:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif
 215:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 216:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if( configUSE_MUTEXES == 1 )
 217:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/*
 218:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	 * If a task waiting for a mutex causes the mutex holder to inherit a
 219:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	 * priority, but the waiting task times out, then the holder should
 220:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	 * disinherit the priority - but only down to the highest priority of any
 221:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	 * other tasks that are waiting for the same mutex.  This function returns
 222:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	 * that priority.
 223:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	 */
 224:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue ) PRIVILEGE
 225:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif
 226:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 227:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 228:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
 229:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Macro to mark a queue as locked.  Locking a queue prevents an ISR from
 230:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * accessing the queue event lists.
 231:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  */
 232:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #define prvLockQueue( pxQueue )								\
 233:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();									\
 234:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{														\
 235:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( ( pxQueue )->cRxLock == queueUNLOCKED )			\
 236:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{													\
 237:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( pxQueue )->cRxLock = queueLOCKED_UNMODIFIED;	\
 238:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}													\
 239:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( ( pxQueue )->cTxLock == queueUNLOCKED )			\
 240:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{													\
 241:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( pxQueue )->cTxLock = queueLOCKED_UNMODIFIED;	\
 242:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}													\
 243:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}														\
 244:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL()
 245:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 246:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 247:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
 248:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
 249:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 250:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 251:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 252:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 253:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
 254:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 255:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 256:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 257:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
 258:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue-
 259:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 260:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
ARM GAS  /tmp/ccQrEWyA.s 			page 6


 261:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 262:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( xNewQueue == pdFALSE )
 263:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 264:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* If there are tasks blocked waiting to read from the queue, then
 265:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			the tasks will remain blocked as after this function exits the queue
 266:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			will still be empty.  If there are tasks blocked waiting to write to
 267:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			the queue, then one should be unblocked as after this function exits
 268:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			it will be possible to write to it. */
 269:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 270:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 271:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 272:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 273:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					queueYIELD_IF_USING_PREEMPTION();
 274:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 275:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
 276:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 277:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
 278:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 279:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 280:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
 281:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 282:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
 283:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 284:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 285:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
 286:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 287:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Ensure the event queues start in the correct state. */
 288:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 289:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 290:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 291:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 292:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
 293:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 294:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* A value is returned for calling semantic consistency with previous
 295:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	versions. */
 296:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return pdPASS;
 297:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
 298:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 299:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 300:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 301:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 302:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItem
 303:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 304:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t *pxNewQueue;
 305:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 306:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 307:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 308:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* The StaticQueue_t structure and the queue storage area must be
 309:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		supplied. */
 310:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( pxStaticQueue != NULL );
 311:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 312:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* A queue storage area should be provided if the item size is not 0, and
 313:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		should not be provided if the item size is 0. */
 314:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 315:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 316:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 317:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		#if( configASSERT_DEFINED == 1 )
ARM GAS  /tmp/ccQrEWyA.s 			page 7


 318:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 319:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Sanity check that the size of the structure used to declare a
 320:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
 321:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			the real queue and semaphore structures. */
 322:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			volatile size_t xSize = sizeof( StaticQueue_t );
 323:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			configASSERT( xSize == sizeof( Queue_t ) );
 324:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 325:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		#endif /* configASSERT_DEFINED */
 326:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 327:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* The address of a statically allocated queue was passed in, use it.
 328:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		The address of a statically allocated storage area was also passed in
 329:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		but is already set. */
 330:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are d
 331:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 332:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxNewQueue != NULL )
 333:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 334:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 335:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 336:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Queues can be allocated wither statically or dynamically, so
 337:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				note this queue was allocated statically in case the queue is
 338:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				later deleted. */
 339:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 340:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 341:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 342:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 343:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 344:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 345:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
 346:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 347:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_CREATE_FAILED( ucQueueType );
 348:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 349:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 350:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return pxNewQueue;
 351:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 352:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 353:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 354:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 355:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 356:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 357:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 358:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, 
 359:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 360:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t *pxNewQueue;
 361:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	size_t xQueueSizeInBytes;
 362:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	uint8_t *pucQueueStorage;
 363:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 364:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 365:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 366:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( uxItemSize == ( UBaseType_t ) 0 )
 367:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 368:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* There is not going to be a queue storage area. */
 369:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xQueueSizeInBytes = ( size_t ) 0;
 370:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 371:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
 372:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 373:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Allocate enough space to hold the maximum number of items that
 374:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			can be in the queue at any time. */
ARM GAS  /tmp/ccQrEWyA.s 			page 8


 375:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as t
 376:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 377:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 378:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 379:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 380:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxNewQueue != NULL )
 381:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 382:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Jump past the queue structure to find the location of the queue
 383:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			storage area. */
 384:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 385:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 386:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 387:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 388:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Queues can be created either statically or dynamically, so
 389:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				note this task was created dynamically in case it is later
 390:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				deleted. */
 391:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 392:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 393:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 394:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 395:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 396:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 397:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
 398:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 399:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_CREATE_FAILED( ucQueueType );
 400:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 401:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 402:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return pxNewQueue;
 403:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 404:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 405:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 406:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 407:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 408:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, u
 409:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
 410:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Remove compiler warnings about unused parameters should
 411:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configUSE_TRACE_FACILITY not be set to 1. */
 412:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	( void ) ucQueueType;
 413:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 414:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	if( uxItemSize == ( UBaseType_t ) 0 )
 415:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 416:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* No RAM was allocated for the queue storage area, but PC head cannot
 417:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		be set to NULL because NULL is used as a key to say the queue is used as
 418:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		a mutex.  Therefore just set pcHead to point to the queue as a benign
 419:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		value that is known to be within the memory map. */
 420:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 421:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 422:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	else
 423:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 424:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Set the head to the start of the queue storage area. */
 425:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 426:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 427:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 428:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Initialise the queue members as described where the queue type is
 429:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	defined. */
 430:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	pxNewQueue->uxLength = uxQueueLength;
 431:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	pxNewQueue->uxItemSize = uxItemSize;
ARM GAS  /tmp/ccQrEWyA.s 			page 9


 432:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 433:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 434:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 435:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 436:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxNewQueue->ucQueueType = ucQueueType;
 437:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 438:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#endif /* configUSE_TRACE_FACILITY */
 439:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 440:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if( configUSE_QUEUE_SETS == 1 )
 441:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 442:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxNewQueue->pxQueueSetContainer = NULL;
 443:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 444:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#endif /* configUSE_QUEUE_SETS */
 445:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 446:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	traceQUEUE_CREATE( pxNewQueue );
 447:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
 448:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 449:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 450:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if( configUSE_MUTEXES == 1 )
 451:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 452:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	static void prvInitialiseMutex( Queue_t *pxNewQueue )
 453:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 454:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxNewQueue != NULL )
 455:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 456:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* The queue create function will set all the queue structure members
 457:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			correctly for a generic queue, but this function is creating a
 458:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			mutex.  Overwrite those members that need to be set differently -
 459:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			in particular the information required for priority inheritance. */
 460:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxNewQueue->pxMutexHolder = NULL;
 461:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 462:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 463:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* In case this is a recursive mutex. */
 464:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxNewQueue->u.uxRecursiveCallCount = 0;
 465:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 466:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceCREATE_MUTEX( pxNewQueue );
 467:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 468:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Start with the semaphore in the expected state. */
 469:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 470:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 471:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
 472:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 473:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceCREATE_MUTEX_FAILED();
 474:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 475:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 476:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 477:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_MUTEXES */
 478:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 479:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 480:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 481:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 482:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
 483:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 484:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t *pxNewQueue;
 485:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 486:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 487:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 488:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		prvInitialiseMutex( pxNewQueue );
ARM GAS  /tmp/ccQrEWyA.s 			page 10


 489:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 490:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return pxNewQueue;
 491:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 492:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 493:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_MUTEXES */
 494:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 495:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 496:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 497:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 498:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
 499:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 500:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t *pxNewQueue;
 501:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 502:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 503:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Prevent compiler warnings about unused parameters if
 504:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configUSE_TRACE_FACILITY does not equal 1. */
 505:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		( void ) ucQueueType;
 506:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 507:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQ
 508:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		prvInitialiseMutex( pxNewQueue );
 509:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 510:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return pxNewQueue;
 511:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 512:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 513:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_MUTEXES */
 514:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 515:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 516:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )
 517:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 518:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	void* xQueueGetMutexHolder( QueueHandle_t xSemaphore )
 519:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 520:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	void *pxReturn;
 521:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 522:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* This function is called by xSemaphoreGetMutexHolder(), and should not
 523:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		be called directly.  Note:  This is a good way of determining if the
 524:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		calling task is the mutex holder, but not a good way of determining the
 525:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		identity of the mutex holder, as the holder may change between the
 526:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		following critical section exiting and the function returning. */
 527:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		taskENTER_CRITICAL();
 528:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 529:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( ( ( Queue_t * ) xSemaphore )->uxQueueType == queueQUEUE_IS_MUTEX )
 530:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 531:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxReturn = ( void * ) ( ( Queue_t * ) xSemaphore )->pxMutexHolder;
 532:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 533:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
 534:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 535:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxReturn = NULL;
 536:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 537:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 538:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		taskEXIT_CRITICAL();
 539:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 540:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return pxReturn;
 541:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	} /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 542:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 543:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif
 544:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 545:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
ARM GAS  /tmp/ccQrEWyA.s 			page 11


 546:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )
 547:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 548:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	void* xQueueGetMutexHolderFromISR( QueueHandle_t xSemaphore )
 549:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 550:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	void *pxReturn;
 551:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 552:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( xSemaphore );
 553:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 554:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Mutexes cannot be used in interrupt service routines, so the mutex
 555:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		holder should not change in an ISR, and therefore a critical section is
 556:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		not required here. */
 557:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( ( ( Queue_t * ) xSemaphore )->uxQueueType == queueQUEUE_IS_MUTEX )
 558:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 559:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxReturn = ( void * ) ( ( Queue_t * ) xSemaphore )->pxMutexHolder;
 560:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 561:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
 562:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 563:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxReturn = NULL;
 564:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 565:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 566:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return pxReturn;
 567:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	} /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 568:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 569:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif
 570:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 571:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 572:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 573:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 574:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
 575:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 576:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xReturn;
 577:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 578:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 579:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( pxMutex );
 580:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 581:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* If this is the task that holds the mutex then pxMutexHolder will not
 582:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		change outside of this task.  If this task does not hold the mutex then
 583:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxMutexHolder can never coincidentally equal the tasks handle, and as
 584:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		this is the only condition we are interested in it does not matter if
 585:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxMutexHolder is accessed simultaneously by another task.  Therefore no
 586:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		mutual exclusion is required to test the pxMutexHolder variable. */
 587:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redunda
 588:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 589:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceGIVE_MUTEX_RECURSIVE( pxMutex );
 590:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 591:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
 592:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			the task handle, therefore no underflow check is required.  Also,
 593:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			uxRecursiveCallCount is only modified by the mutex holder, and as
 594:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			there can only be one, no mutual exclusion is required to modify the
 595:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			uxRecursiveCallCount member. */
 596:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( pxMutex->u.uxRecursiveCallCount )--;
 597:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 598:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Has the recursive call count unwound to 0? */
 599:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 600:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 601:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Return the mutex.  This will automatically unblock any other
 602:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				task that might be waiting to access the mutex. */
ARM GAS  /tmp/ccQrEWyA.s 			page 12


 603:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 604:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 605:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
 606:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 607:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
 608:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 609:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 610:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
 611:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 612:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
 613:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 614:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* The mutex cannot be given because the calling task is not the
 615:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			holder. */
 616:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdFAIL;
 617:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 618:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
 619:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 620:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 621:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return xReturn;
 622:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 623:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 624:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 625:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 626:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 627:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 628:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 629:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
 630:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 631:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xReturn;
 632:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 633:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 634:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( pxMutex );
 635:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 636:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Comments regarding mutual exclusion as per those within
 637:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		xQueueGiveMutexRecursive(). */
 638:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 639:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		traceTAKE_MUTEX_RECURSIVE( pxMutex );
 640:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 641:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not r
 642:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 643:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( pxMutex->u.uxRecursiveCallCount )++;
 644:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
 645:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 646:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
 647:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 648:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 649:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 650:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* pdPASS will only be returned if the mutex was successfully
 651:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			obtained.  The calling task may have entered the Blocked state
 652:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			before reaching here. */
 653:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( xReturn != pdFAIL )
 654:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 655:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				( pxMutex->u.uxRecursiveCallCount )++;
 656:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 657:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
 658:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 659:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
ARM GAS  /tmp/ccQrEWyA.s 			page 13


 660:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 661:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 662:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 663:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return xReturn;
 664:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 665:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 666:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 667:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 668:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 669:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 670:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 671:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t
 672:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 673:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	QueueHandle_t xHandle;
 674:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 675:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( uxMaxCount != 0 );
 676:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 677:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 678:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStatic
 679:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 680:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( xHandle != NULL )
 681:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 682:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 683:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 684:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE();
 685:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 686:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
 687:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 688:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE_FAILED();
 689:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 690:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 691:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return xHandle;
 692:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 693:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 694:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 695:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 696:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 697:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 698:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 699:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxIni
 700:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 701:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	QueueHandle_t xHandle;
 702:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 703:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( uxMaxCount != 0 );
 704:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 705:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 706:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUN
 707:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 708:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( xHandle != NULL )
 709:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 710:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 711:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 712:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE();
 713:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 714:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
 715:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 716:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE_FAILED();
ARM GAS  /tmp/ccQrEWyA.s 			page 14


 717:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 718:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 719:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return xHandle;
 720:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 721:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 722:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 723:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 724:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 725:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xT
 726:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
 727:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 728:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** TimeOut_t xTimeOut;
 729:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 730:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 731:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 732:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 733:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 734:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 735:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 736:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
 737:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 738:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#endif
 739:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 740:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 741:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* This function relaxes the coding standard somewhat to allow return
 742:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	statements within the function itself.  This is done in the interest
 743:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	of execution time efficiency. */
 744:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	for( ;; )
 745:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 746:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		taskENTER_CRITICAL();
 747:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 748:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Is there room on the queue now?  The running task must be the
 749:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			highest priority task wanting to access the queue.  If the head item
 750:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			in the queue is to be overwritten then it does not matter if the
 751:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			queue is full. */
 752:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 753:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 754:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceQUEUE_SEND( pxQueue );
 755:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 756:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 757:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
 758:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 759:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
 760:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 761:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 762:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 763:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							/* The queue is a member of a queue set, and posting
 764:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							to the queue set caused a higher priority task to
 765:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							unblock. A context switch is required. */
 766:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 767:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 768:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
 769:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 770:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 771:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 772:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 773:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
ARM GAS  /tmp/ccQrEWyA.s 			page 15


 774:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 775:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						/* If there was a task waiting for data to arrive on the
 776:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						queue then unblock it now. */
 777:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 778:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 779:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 780:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
 781:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								/* The unblocked task has a priority higher than
 782:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								our own so yield immediately.  Yes it is ok to
 783:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								do this from within the critical section - the
 784:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								kernel takes care of that. */
 785:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								queueYIELD_IF_USING_PREEMPTION();
 786:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
 787:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							else
 788:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
 789:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
 790:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
 791:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 792:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else if( xYieldRequired != pdFALSE )
 793:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 794:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							/* This path is a special case that will only get
 795:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							executed if the task was holding multiple mutexes
 796:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							and the mutexes were given back in an order that is
 797:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							different to that in which they were taken. */
 798:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 799:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 800:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
 801:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 802:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 803:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 804:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 805:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 806:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#else /* configUSE_QUEUE_SETS */
 807:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 808:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* If there was a task waiting for data to arrive on the
 809:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					queue then unblock it now. */
 810:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 811:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 812:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 813:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 814:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							/* The unblocked task has a priority higher than
 815:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							our own so yield immediately.  Yes it is ok to do
 816:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							this from within the critical section - the kernel
 817:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							takes care of that. */
 818:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 819:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 820:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
 821:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 822:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 823:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 824:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 825:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else if( xYieldRequired != pdFALSE )
 826:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 827:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						/* This path is a special case that will only get
 828:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						executed if the task was holding multiple mutexes and
 829:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						the mutexes were given back in an order that is
 830:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						different to that in which they were taken. */
ARM GAS  /tmp/ccQrEWyA.s 			page 16


 831:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
 832:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 833:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
 834:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 835:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
 836:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 837:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 838:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
 839:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 840:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				taskEXIT_CRITICAL();
 841:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				return pdPASS;
 842:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 843:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
 844:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 845:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
 846:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 847:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* The queue was full and no block time is specified (or
 848:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					the block time has expired) so leave now. */
 849:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					taskEXIT_CRITICAL();
 850:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 851:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* Return to the original privilege level before exiting
 852:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					the function. */
 853:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					traceQUEUE_SEND_FAILED( pxQueue );
 854:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					return errQUEUE_FULL;
 855:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 856:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
 857:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 858:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* The queue was full and a block time was specified so
 859:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					configure the timeout structure. */
 860:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					vTaskInternalSetTimeOutState( &xTimeOut );
 861:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					xEntryTimeSet = pdTRUE;
 862:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 863:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
 864:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 865:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* Entry time was already set. */
 866:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
 867:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 868:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 869:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 870:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		taskEXIT_CRITICAL();
 871:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 872:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
 873:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		now the critical section has been exited. */
 874:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 875:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		vTaskSuspendAll();
 876:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
 877:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 878:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
 879:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 880:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 881:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 882:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 883:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 884:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 885:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 886:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Unlocking the queue means queue events can effect the
 887:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				event list.  It is possible that interrupts occurring now
ARM GAS  /tmp/ccQrEWyA.s 			page 17


 888:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				remove this task from the event list again - but as the
 889:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				scheduler is suspended the task will go onto the pending
 890:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				ready last instead of the actual ready list. */
 891:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
 892:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 893:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Resuming the scheduler will move tasks from the pending
 894:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				ready list into the ready list - so it is feasible that this
 895:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				task is already in a ready list before it yields - in which
 896:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				case the yield will not cause a context switch unless there
 897:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				is also a higher priority task in the pending ready list. */
 898:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 899:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 900:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					portYIELD_WITHIN_API();
 901:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 902:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 903:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
 904:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 905:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Try again. */
 906:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
 907:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				( void ) xTaskResumeAll();
 908:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 909:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 910:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
 911:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 912:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* The timeout has expired. */
 913:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			prvUnlockQueue( pxQueue );
 914:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( void ) xTaskResumeAll();
 915:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 916:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_SEND_FAILED( pxQueue );
 917:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			return errQUEUE_FULL;
 918:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 919:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 920:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
 921:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 922:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 923:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseTy
 924:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
 925:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
 926:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxSavedInterruptStatus;
 927:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 928:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 929:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 930:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 931:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 932:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 933:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
 934:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
 935:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
 936:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
 937:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
 938:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
 939:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
 940:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	assigned a priority above the configured maximum system call priority.
 941:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
 942:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
 943:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
 944:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
ARM GAS  /tmp/ccQrEWyA.s 			page 18


 945:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
 946:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
 947:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 948:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 949:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Similar to xQueueGenericSend, except without blocking if there is no room
 950:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	in the queue.  Also don't directly wake a task that was blocked on a queue
 951:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	read, instead return a flag to say whether a context switch is required or
 952:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	not (i.e. has a task with a higher priority than us been woken by this
 953:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	post). */
 954:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 955:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 956:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 957:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 958:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			const int8_t cTxLock = pxQueue->cTxLock;
 959:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 960:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_SEND_FROM_ISR( pxQueue );
 961:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 962:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
 963:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
 964:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			in a task disinheriting a priority and prvCopyDataToQueue() can be
 965:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			called here even though the disinherit function does not check if
 966:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			the scheduler is suspended before accessing the ready lists. */
 967:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 968:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 969:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* The event list is not altered if the queue is locked.  This will
 970:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			be done when the queue is unlocked later. */
 971:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( cTxLock == queueUNLOCKED )
 972:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 973:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
 974:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 975:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
 976:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 977:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 978:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 979:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							/* The queue is a member of a queue set, and posting
 980:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							to the queue set caused a higher priority task to
 981:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							unblock.  A context switch is required. */
 982:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
 983:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
 984:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
 985:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
 986:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							else
 987:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
 988:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
 989:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
 990:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 991:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
 992:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 993:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 994:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 995:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 996:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
 997:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 998:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 999:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1000:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1001:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
ARM GAS  /tmp/ccQrEWyA.s 			page 19


1002:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								/* The task waiting has a higher priority so
1003:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								record that a context switch is required. */
1004:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								if( pxHigherPriorityTaskWoken != NULL )
1005:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								{
1006:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 									*pxHigherPriorityTaskWoken = pdTRUE;
1007:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								}
1008:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								else
1009:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								{
1010:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 									mtCOVERAGE_TEST_MARKER();
1011:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								}
1012:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1013:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							else
1014:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1015:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1016:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1017:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1018:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
1019:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1020:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1021:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1022:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1023:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1024:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#else /* configUSE_QUEUE_SETS */
1025:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1026:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1027:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1028:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1029:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1030:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							/* The task waiting has a higher priority so record that a
1031:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							context	switch is required. */
1032:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1033:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1034:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1035:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1036:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							else
1037:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1038:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1039:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1040:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1041:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
1042:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1043:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1044:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1045:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1046:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
1047:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1048:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1049:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1050:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1051:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
1052:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1053:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
1054:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1055:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1056:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				knows that data was posted while it was locked. */
1057:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1058:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
ARM GAS  /tmp/ccQrEWyA.s 			page 20


1059:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1060:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
1061:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1062:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
1063:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1064:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1065:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = errQUEUE_FULL;
1066:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1067:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1068:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1069:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1070:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return xReturn;
1071:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
1072:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1073:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1074:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
1075:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
1076:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
1077:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxSavedInterruptStatus;
1078:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1079:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1080:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Similar to xQueueGenericSendFromISR() but used with semaphores where the
1081:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	item size is 0.  Don't directly wake a task that was blocked on a queue
1082:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	read, instead return a flag to say whether a context switch is required or
1083:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	not (i.e. has a task with a higher priority than us been woken by this
1084:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	post). */
1085:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1086:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
1087:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1088:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
1089:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	if the item size is not 0. */
1090:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue->uxItemSize == 0 );
1091:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1092:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Normally a mutex would not be given from an interrupt, especially if
1093:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	there is a mutex holder, as priority inheritance makes no sense for an
1094:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	interrupts, only tasks. */
1095:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NU
1096:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1097:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1098:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1099:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1100:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1101:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1102:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1103:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1104:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	assigned a priority above the configured maximum system call priority.
1105:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1106:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1107:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1108:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1109:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1110:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1111:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1112:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1113:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1114:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1115:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
ARM GAS  /tmp/ccQrEWyA.s 			page 21


1116:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1117:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* When the queue is used to implement a semaphore no data is ever
1118:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		moved through the queue but it is still valid to see if the queue 'has
1119:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		space'. */
1120:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( uxMessagesWaiting < pxQueue->uxLength )
1121:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1122:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			const int8_t cTxLock = pxQueue->cTxLock;
1123:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1124:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_SEND_FROM_ISR( pxQueue );
1125:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1126:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* A task can only have an inherited priority if it is a mutex
1127:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			holder - and if there is a mutex holder then the mutex cannot be
1128:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			given from an ISR.  As this is the ISR version of the function it
1129:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			can be assumed there is no mutex holder and no need to determine if
1130:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			priority disinheritance is needed.  Simply increase the count of
1131:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			messages (semaphores) available. */
1132:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1133:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1134:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* The event list is not altered if the queue is locked.  This will
1135:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			be done when the queue is unlocked later. */
1136:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( cTxLock == queueUNLOCKED )
1137:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1138:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
1139:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1140:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
1141:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1142:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
1143:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1144:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							/* The semaphore is a member of a queue set, and
1145:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							posting	to the queue set caused a higher priority
1146:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							task to	unblock.  A context switch is required. */
1147:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1148:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1149:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1150:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1151:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							else
1152:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1153:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1154:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1155:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1156:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
1157:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1158:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1159:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1160:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1161:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
1162:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1163:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1164:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1165:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1166:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1167:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								/* The task waiting has a higher priority so
1168:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								record that a context switch is required. */
1169:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								if( pxHigherPriorityTaskWoken != NULL )
1170:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								{
1171:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 									*pxHigherPriorityTaskWoken = pdTRUE;
1172:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								}
ARM GAS  /tmp/ccQrEWyA.s 			page 22


1173:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								else
1174:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								{
1175:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 									mtCOVERAGE_TEST_MARKER();
1176:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								}
1177:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1178:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							else
1179:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1180:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1181:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1182:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1183:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
1184:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1185:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1186:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1187:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1188:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1189:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#else /* configUSE_QUEUE_SETS */
1190:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1191:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1192:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1193:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1194:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							/* The task waiting has a higher priority so record that a
1196:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							context	switch is required. */
1197:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1198:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1199:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1200:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1201:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							else
1202:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1203:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1204:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1205:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1206:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
1207:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1208:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1209:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1210:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1211:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
1212:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1213:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1214:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1215:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1216:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
1217:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1218:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
1219:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1220:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1221:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				knows that data was posted while it was locked. */
1222:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1223:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1224:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1225:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
1226:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1227:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
1228:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1229:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
ARM GAS  /tmp/ccQrEWyA.s 			page 23


1230:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = errQUEUE_FULL;
1231:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1232:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1233:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1234:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1235:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return xReturn;
1236:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
1237:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1238:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1239:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
1240:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
1241:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
1242:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** TimeOut_t xTimeOut;
1243:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1244:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1245:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Check the pointer is not NULL. */
1246:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( ( pxQueue ) );
1247:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1248:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* The buffer into which data is received can only be NULL if the data size
1249:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	is zero (so no data is copied into the buffer. */
1250:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) )
1251:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1252:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Cannot block if the scheduler is suspended. */
1253:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1254:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1255:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
1256:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1257:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#endif
1258:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1259:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* This function relaxes the coding standard somewhat to allow return
1260:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	statements within the function itself.  This is done in the interest
1261:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	of execution time efficiency. */
1262:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1263:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	for( ;; )
1264:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1265:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		taskENTER_CRITICAL();
1266:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1267:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1268:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1269:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Is there data in the queue now?  To be running the calling task
1270:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			must be the highest priority task wanting to access the queue. */
1271:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1272:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1273:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Data available, remove one item. */
1274:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvCopyDataFromQueue( pxQueue, pvBuffer );
1275:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceQUEUE_RECEIVE( pxQueue );
1276:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1277:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1278:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* There is now space in the queue, were any tasks waiting to
1279:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				post to the queue?  If so, unblock the highest priority waiting
1280:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				task. */
1281:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1282:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1283:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1284:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1285:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
1286:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
ARM GAS  /tmp/ccQrEWyA.s 			page 24


1287:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
1288:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1289:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1290:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1291:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1292:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
1293:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1294:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1295:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1296:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1297:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				taskEXIT_CRITICAL();
1298:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				return pdPASS;
1299:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1300:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
1301:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1302:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
1303:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1304:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* The queue was empty and no block time is specified (or
1305:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					the block time has expired) so leave now. */
1306:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					taskEXIT_CRITICAL();
1307:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
1308:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					return errQUEUE_EMPTY;
1309:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1310:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
1311:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1312:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* The queue was empty and a block time was specified so
1313:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					configure the timeout structure. */
1314:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					vTaskInternalSetTimeOutState( &xTimeOut );
1315:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					xEntryTimeSet = pdTRUE;
1316:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1317:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
1318:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1319:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* Entry time was already set. */
1320:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1321:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1322:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1323:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1324:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		taskEXIT_CRITICAL();
1325:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1326:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
1327:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		now the critical section has been exited. */
1328:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1329:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		vTaskSuspendAll();
1330:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
1331:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1332:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
1333:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1334:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1335:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* The timeout has not expired.  If the queue is still empty place
1336:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			the task on the list of tasks waiting to receive from the queue. */
1337:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1338:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1339:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
1340:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1341:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
1342:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
1343:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
ARM GAS  /tmp/ccQrEWyA.s 			page 25


1344:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					portYIELD_WITHIN_API();
1345:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1346:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
1347:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1348:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1349:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1350:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1351:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
1352:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1353:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* The queue contains data again.  Loop back to try and read the
1354:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				data. */
1355:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
1356:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				( void ) xTaskResumeAll();
1357:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1358:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1359:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
1360:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1361:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Timed out.  If there is no data in the queue exit, otherwise loop
1362:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			back and attempt to read the data. */
1363:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			prvUnlockQueue( pxQueue );
1364:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( void ) xTaskResumeAll();
1365:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1366:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1367:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1368:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceQUEUE_RECEIVE_FAILED( pxQueue );
1369:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				return errQUEUE_EMPTY;
1370:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1371:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
1372:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1373:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1374:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1375:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1376:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1377:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
1378:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1379:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1380:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
1381:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
1382:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
1383:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** TimeOut_t xTimeOut;
1384:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1385:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1386:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if( configUSE_MUTEXES == 1 )
1387:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xInheritanceOccurred = pdFALSE;
1388:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif
1389:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1390:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Check the queue pointer is not NULL. */
1391:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( ( pxQueue ) );
1392:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1393:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Check this really is a semaphore, in which case the item size will be
1394:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	0. */
1395:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue->uxItemSize == 0 );
1396:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1397:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Cannot block if the scheduler is suspended. */
1398:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1399:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1400:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
ARM GAS  /tmp/ccQrEWyA.s 			page 26


1401:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1402:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#endif
1403:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1404:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1405:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* This function relaxes the coding standard somewhat to allow return
1406:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	statements within the function itself.  This is done in the interest
1407:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	of execution time efficiency. */
1408:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1409:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	for( ;; )
1410:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1411:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		taskENTER_CRITICAL();
1412:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1413:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Semaphores are queues with an item size of 0, and where the
1414:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			number of messages in the queue is the semaphore's count value. */
1415:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
1416:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1417:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Is there data in the queue now?  To be running the calling task
1418:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			must be the highest priority task wanting to access the queue. */
1419:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
1420:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1421:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceQUEUE_RECEIVE( pxQueue );
1422:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1423:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Semaphores are queues with a data size of zero and where the
1424:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				messages waiting is the semaphore's count.  Reduce the count. */
1425:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
1426:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1427:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#if ( configUSE_MUTEXES == 1 )
1428:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1429:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1430:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1431:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						/* Record the information required to implement
1432:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						priority inheritance should it become necessary. */
1433:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is n
1434:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1435:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
1436:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1437:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1438:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1439:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1440:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#endif /* configUSE_MUTEXES */
1441:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1442:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Check to see if other tasks are blocked waiting to give the
1443:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				semaphore, and if so, unblock the highest priority such task. */
1444:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1445:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1446:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1447:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1448:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
1449:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1450:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
1451:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1452:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1453:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1454:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1455:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
1456:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1457:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
ARM GAS  /tmp/ccQrEWyA.s 			page 27


1458:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1459:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1460:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				taskEXIT_CRITICAL();
1461:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				return pdPASS;
1462:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1463:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
1464:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1465:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
1466:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1467:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* For inheritance to have occurred there must have been an
1468:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					initial timeout, and an adjusted timeout cannot become 0, as
1469:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if it were 0 the function would have exited. */
1470:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					#if( configUSE_MUTEXES == 1 )
1471:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1472:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						configASSERT( xInheritanceOccurred == pdFALSE );
1473:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1474:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					#endif /* configUSE_MUTEXES */
1475:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1476:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* The semaphore count was 0 and no block time is specified
1477:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					(or the block time has expired) so exit now. */
1478:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					taskEXIT_CRITICAL();
1479:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
1480:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					return errQUEUE_EMPTY;
1481:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1482:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
1483:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1484:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* The semaphore count was 0 and a block time was specified
1485:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					so configure the timeout structure ready to block. */
1486:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					vTaskInternalSetTimeOutState( &xTimeOut );
1487:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					xEntryTimeSet = pdTRUE;
1488:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1489:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
1490:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1491:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* Entry time was already set. */
1492:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1493:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1494:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1495:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1496:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		taskEXIT_CRITICAL();
1497:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1498:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Interrupts and other tasks can give to and take from the semaphore
1499:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		now the critical section has been exited. */
1500:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1501:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		vTaskSuspendAll();
1502:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
1503:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1504:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
1505:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1506:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1507:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* A block time is specified and not expired.  If the semaphore
1508:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			count is 0 then enter the Blocked state to wait for a semaphore to
1509:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			become available.  As semaphores are implemented with queues the
1510:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			queue being empty is equivalent to the semaphore count being 0. */
1511:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1512:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1513:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
1514:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
ARM GAS  /tmp/ccQrEWyA.s 			page 28


1515:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#if ( configUSE_MUTEXES == 1 )
1516:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1517:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1518:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1519:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						taskENTER_CRITICAL();
1520:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1521:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
1522:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1523:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						taskEXIT_CRITICAL();
1524:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1525:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
1526:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1527:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1528:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1529:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1530:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#endif
1531:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1532:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1533:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
1534:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
1535:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1536:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					portYIELD_WITHIN_API();
1537:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1538:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
1539:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1540:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1541:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1542:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1543:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
1544:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1545:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* There was no timeout and the semaphore count was not 0, so
1546:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				attempt to take the semaphore again. */
1547:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
1548:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				( void ) xTaskResumeAll();
1549:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1550:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1551:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
1552:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1553:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Timed out. */
1554:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			prvUnlockQueue( pxQueue );
1555:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( void ) xTaskResumeAll();
1556:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1557:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* If the semaphore count is 0 exit now as the timeout has
1558:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			expired.  Otherwise return to attempt to take the semaphore that is
1559:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			known to be available.  As semaphores are implemented by queues the
1560:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			queue being empty is equivalent to the semaphore count being 0. */
1561:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1562:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1563:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#if ( configUSE_MUTEXES == 1 )
1564:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1565:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* xInheritanceOccurred could only have be set if
1566:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
1567:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					test the mutex type again to check it is actually a mutex. */
1568:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( xInheritanceOccurred != pdFALSE )
1569:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1570:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						taskENTER_CRITICAL();
1571:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
ARM GAS  /tmp/ccQrEWyA.s 			page 29


1572:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							UBaseType_t uxHighestWaitingPriority;
1573:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1574:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							/* This task blocking on the mutex caused another
1575:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							task to inherit this task's priority.  Now this task
1576:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							has timed out the priority should be disinherited
1577:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							again, but only as low as the next highest priority
1578:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							task that is waiting for the same mutex. */
1579:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
1580:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPrio
1581:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1582:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						taskEXIT_CRITICAL();
1583:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1584:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1585:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#endif /* configUSE_MUTEXES */
1586:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1587:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceQUEUE_RECEIVE_FAILED( pxQueue );
1588:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				return errQUEUE_EMPTY;
1589:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1590:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
1591:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1592:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1593:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1594:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1595:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1596:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
1597:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1598:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1599:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
1600:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
1601:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
1602:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** TimeOut_t xTimeOut;
1603:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** int8_t *pcOriginalReadPosition;
1604:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1605:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1606:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Check the pointer is not NULL. */
1607:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( ( pxQueue ) );
1608:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1609:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* The buffer into which data is received can only be NULL if the data size
1610:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	is zero (so no data is copied into the buffer. */
1611:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) )
1612:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1613:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Cannot block if the scheduler is suspended. */
1614:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1615:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1616:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
1617:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1618:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#endif
1619:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1620:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1621:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* This function relaxes the coding standard somewhat to allow return
1622:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	statements within the function itself.  This is done in the interest
1623:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	of execution time efficiency. */
1624:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1625:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	for( ;; )
1626:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1627:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		taskENTER_CRITICAL();
1628:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
ARM GAS  /tmp/ccQrEWyA.s 			page 30


1629:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1630:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1631:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Is there data in the queue now?  To be running the calling task
1632:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			must be the highest priority task wanting to access the queue. */
1633:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1634:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1635:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Remember the read position so it can be reset after the data
1636:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				is read from the queue as this function is only peeking the
1637:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				data, not removing it. */
1638:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
1639:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1640:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvCopyDataFromQueue( pxQueue, pvBuffer );
1641:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceQUEUE_PEEK( pxQueue );
1642:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1643:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* The data is not being removed, so reset the read pointer. */
1644:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxQueue->u.pcReadFrom = pcOriginalReadPosition;
1645:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1646:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* The data is being left in the queue, so see if there are
1647:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				any other tasks waiting for the data. */
1648:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1649:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1650:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1651:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1652:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						/* The task waiting has a higher priority than this task. */
1653:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
1654:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1655:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
1656:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1657:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1658:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1659:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1660:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
1661:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1662:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1663:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1664:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1665:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				taskEXIT_CRITICAL();
1666:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				return pdPASS;
1667:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1668:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
1669:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1670:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
1671:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1672:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* The queue was empty and no block time is specified (or
1673:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					the block time has expired) so leave now. */
1674:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					taskEXIT_CRITICAL();
1675:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					traceQUEUE_PEEK_FAILED( pxQueue );
1676:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					return errQUEUE_EMPTY;
1677:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1678:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
1679:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1680:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* The queue was empty and a block time was specified so
1681:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					configure the timeout structure ready to enter the blocked
1682:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					state. */
1683:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					vTaskInternalSetTimeOutState( &xTimeOut );
1684:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					xEntryTimeSet = pdTRUE;
1685:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
ARM GAS  /tmp/ccQrEWyA.s 			page 31


1686:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
1687:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1688:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* Entry time was already set. */
1689:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1690:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1691:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1692:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1693:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		taskEXIT_CRITICAL();
1694:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1695:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
1696:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		now the critical section has been exited. */
1697:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1698:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		vTaskSuspendAll();
1699:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
1700:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1701:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
1702:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1703:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1704:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Timeout has not expired yet, check to see if there is data in the
1705:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			queue now, and if not enter the Blocked state to wait for data. */
1706:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1707:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1708:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
1709:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1710:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
1711:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
1712:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1713:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					portYIELD_WITHIN_API();
1714:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1715:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
1716:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1717:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1718:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1719:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1720:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
1721:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1722:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* There is data in the queue now, so don't enter the blocked
1723:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				state, instead return to try and obtain the data. */
1724:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
1725:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				( void ) xTaskResumeAll();
1726:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1727:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1728:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
1729:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1730:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* The timeout has expired.  If there is still no data in the queue
1731:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			exit, otherwise go back and try to read the data again. */
1732:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			prvUnlockQueue( pxQueue );
1733:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( void ) xTaskResumeAll();
1734:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1735:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1736:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1737:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceQUEUE_PEEK_FAILED( pxQueue );
1738:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				return errQUEUE_EMPTY;
1739:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1740:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
1741:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1742:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
ARM GAS  /tmp/ccQrEWyA.s 			page 32


1743:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1744:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1745:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1746:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
1747:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1748:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1749:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const px
1750:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
1751:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
1752:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxSavedInterruptStatus;
1753:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1754:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1755:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
1756:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1757:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1758:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1759:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1760:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1761:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1762:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1763:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1764:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1765:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	assigned a priority above the configured maximum system call priority.
1766:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1767:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1768:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1769:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1770:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1771:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1772:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1773:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1774:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1775:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1776:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1777:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1778:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Cannot block in an ISR, so check there is data available. */
1779:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1780:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1781:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			const int8_t cRxLock = pxQueue->cRxLock;
1782:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1783:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
1784:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1785:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
1786:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1787:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1788:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* If the queue is locked the event list will not be modified.
1789:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			Instead update the lock count so the task that unlocks the queue
1790:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			will know that an ISR has removed data while the queue was
1791:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			locked. */
1792:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( cRxLock == queueUNLOCKED )
1793:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1794:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1795:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1796:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1797:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1798:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						/* The task waiting has a higher priority than us so
1799:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						force a context switch. */
ARM GAS  /tmp/ccQrEWyA.s 			page 33


1800:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( pxHigherPriorityTaskWoken != NULL )
1801:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1802:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							*pxHigherPriorityTaskWoken = pdTRUE;
1803:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1804:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
1805:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1806:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1807:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1808:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1809:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
1810:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1811:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1812:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1813:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1814:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
1815:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1816:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1817:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1818:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1819:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
1820:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1821:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1822:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				knows that data was removed while it was locked. */
1823:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
1824:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1825:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1826:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
1827:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1828:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
1829:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1830:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdFAIL;
1831:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
1832:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1833:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1834:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1835:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1836:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return xReturn;
1837:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
1838:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1839:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1840:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
1841:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
1842:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
1843:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxSavedInterruptStatus;
1844:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** int8_t *pcOriginalReadPosition;
1845:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1846:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1847:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
1848:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1849:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
1850:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1851:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1852:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1853:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1854:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1855:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1856:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
ARM GAS  /tmp/ccQrEWyA.s 			page 34


1857:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1858:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	assigned a priority above the configured maximum system call priority.
1859:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1860:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1861:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1862:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1863:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1864:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1865:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1866:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1867:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1868:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1869:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Cannot block in an ISR, so check there is data available. */
1870:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
1871:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1872:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_PEEK_FROM_ISR( pxQueue );
1873:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1874:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Remember the read position so it can be reset as nothing is
1875:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			actually being removed from the queue. */
1876:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
1877:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
1878:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
1879:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1880:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
1881:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1882:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
1883:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1884:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdFAIL;
1885:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
1886:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1887:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1888:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1889:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1890:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return xReturn;
1891:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
1892:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1893:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1894:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
1895:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
1896:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxReturn;
1897:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1898:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( xQueue );
1899:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1900:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
1901:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1902:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
1903:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1904:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
1905:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1906:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return uxReturn;
1907:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1908:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1909:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1910:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
1911:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
1912:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxReturn;
1913:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t *pxQueue;
ARM GAS  /tmp/ccQrEWyA.s 			page 35


1914:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1915:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	pxQueue = ( Queue_t * ) xQueue;
1916:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
1917:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1918:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
1919:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1920:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
1921:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1922:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
1923:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1924:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return uxReturn;
1925:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1926:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1927:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1928:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
1929:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
1930:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxReturn;
1931:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1932:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( xQueue );
1933:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1934:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
1935:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1936:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return uxReturn;
1937:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1938:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1939:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1940:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** void vQueueDelete( QueueHandle_t xQueue )
1941:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
1942:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1943:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1944:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
1945:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	traceQUEUE_DELETE( pxQueue );
1946:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1947:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( configQUEUE_REGISTRY_SIZE > 0 )
1948:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1949:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		vQueueUnregisterQueue( pxQueue );
1950:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1951:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#endif
1952:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1953:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
1954:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1955:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* The queue can only have been allocated dynamically - free it
1956:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		again. */
1957:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		vPortFree( pxQueue );
1958:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1959:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
1960:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1961:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* The queue could have been allocated statically or dynamically, so
1962:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		check before attempting to free the memory. */
1963:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
1964:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1965:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			vPortFree( pxQueue );
1966:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1967:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
1968:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1969:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
1970:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
ARM GAS  /tmp/ccQrEWyA.s 			page 36


1971:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1972:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#else
1973:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1974:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* The queue must have been statically allocated, so is not going to be
1975:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		deleted.  Avoid compiler warnings about the unused parameter. */
1976:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		( void ) pxQueue;
1977:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1978:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
1979:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
1980:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1981:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1982:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1983:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1984:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
1985:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1986:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
1987:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1988:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1989:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_TRACE_FACILITY */
1990:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1991:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1992:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1993:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1994:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
1995:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1996:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
1997:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1998:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1999:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_TRACE_FACILITY */
2000:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2001:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2002:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2003:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2004:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
2005:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2006:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return ( ( Queue_t * ) xQueue )->ucQueueType;
2007:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2008:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2009:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_TRACE_FACILITY */
2010:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2011:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2012:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if( configUSE_MUTEXES == 1 )
2013:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2014:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
2015:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
  27              		.loc 1 2015 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
2016:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	UBaseType_t uxHighestPriorityOfWaitingTasks;
2017:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2018:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* If a task waiting for a mutex causes the mutex holder to inherit a
2019:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		priority, but the waiting task times out, then the holder should
2020:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		disinherit the priority - but only down to the highest priority of any
2021:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		other tasks that are waiting for the same mutex.  For this purpose,
ARM GAS  /tmp/ccQrEWyA.s 			page 37


2022:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return the priority of the highest priority task that is waiting for the
2023:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		mutex. */
2024:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
  33              		.loc 1 2024 0
  34 0000 436A     		ldr	r3, [r0, #36]
  35 0002 23B1     		cbz	r3, .L3
2025:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2026:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( px
  36              		.loc 1 2026 0
  37 0004 036B     		ldr	r3, [r0, #48]
  38 0006 1868     		ldr	r0, [r3]
  39              	.LVL1:
  40 0008 C0F10700 		rsb	r0, r0, #7
  41              	.LVL2:
  42 000c 7047     		bx	lr
  43              	.LVL3:
  44              	.L3:
2027:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2028:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
2029:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2030:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
  45              		.loc 1 2030 0
  46 000e 0020     		movs	r0, #0
  47              	.LVL4:
2031:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2032:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2033:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return uxHighestPriorityOfWaitingTasks;
2034:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
  48              		.loc 1 2034 0
  49 0010 7047     		bx	lr
  50              		.cfi_endproc
  51              	.LFE22:
  53              		.section	.text.prvIsQueueFull,"ax",%progbits
  54              		.align	1
  55              		.syntax unified
  56              		.thumb
  57              		.thumb_func
  58              		.fpu fpv4-sp-d16
  60              	prvIsQueueFull:
  61              	.LFB28:
2035:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2036:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_MUTEXES */
2037:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2038:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2039:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const Bas
2040:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
2041:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn = pdFALSE;
2042:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxMessagesWaiting;
2043:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2044:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* This function is called from a critical section. */
2045:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2046:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
2047:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2048:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
2049:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2050:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		#if ( configUSE_MUTEXES == 1 )
2051:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
ARM GAS  /tmp/ccQrEWyA.s 			page 38


2052:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
2053:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2054:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* The mutex is no longer being held. */
2055:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
2056:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxQueue->pxMutexHolder = NULL;
2057:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2058:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
2059:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2060:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2061:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2062:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2063:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		#endif /* configUSE_MUTEXES */
2064:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2065:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	else if( xPosition == queueSEND_TO_BACK )
2066:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2067:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); 
2068:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize;
2069:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison 
2070:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2071:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxQueue->pcWriteTo = pxQueue->pcHead;
2072:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2073:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
2074:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2075:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2076:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2077:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2078:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	else
2079:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2080:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize 
2081:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
2082:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as compariso
2083:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2084:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
2085:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2086:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
2087:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2088:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2089:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2090:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2091:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( xPosition == queueOVERWRITE )
2092:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2093:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
2094:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2095:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* An item is not being added but overwritten, so subtract
2096:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				one from the recorded number of items in the queue so when
2097:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				one is added again below the number of recorded items remains
2098:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				correct. */
2099:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				--uxMessagesWaiting;
2100:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2101:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
2102:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2103:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2104:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2105:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2106:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
2107:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2108:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
ARM GAS  /tmp/ccQrEWyA.s 			page 39


2109:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2110:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2111:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2112:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
2113:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2114:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return xReturn;
2115:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
2116:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2117:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2118:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
2119:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
2120:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
2121:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2122:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
2123:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of t
2124:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2125:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxQueue->u.pcReadFrom = pxQueue->pcHead;
2126:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2127:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
2128:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2129:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2130:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2131:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxIte
2132:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2133:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
2134:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2135:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2136:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue )
2137:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
2138:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
2139:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2140:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* The lock counts contains the number of extra data items placed or
2141:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	removed from the queue while the queue was locked.  When a queue is
2142:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	locked items can be added or removed, but the event lists cannot be
2143:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	updated. */
2144:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
2145:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2146:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		int8_t cTxLock = pxQueue->cTxLock;
2147:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2148:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* See if data was added to the queue while it was locked. */
2149:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		while( cTxLock > queueLOCKED_UNMODIFIED )
2150:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2151:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Data was posted while the queue was locked.  Are any tasks
2152:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			blocked waiting for data to become available? */
2153:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			#if ( configUSE_QUEUE_SETS == 1 )
2154:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2155:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( pxQueue->pxQueueSetContainer != NULL )
2156:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2157:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
2158:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2159:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						/* The queue is a member of a queue set, and posting to
2160:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						the queue set caused a higher priority task to unblock.
2161:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						A context switch is required. */
2162:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						vTaskMissedYield();
2163:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2164:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
2165:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
ARM GAS  /tmp/ccQrEWyA.s 			page 40


2166:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2167:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2168:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2169:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
2170:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2171:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* Tasks that are removed from the event list will get
2172:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					added to the pending ready list as the scheduler is still
2173:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					suspended. */
2174:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2175:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2176:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2177:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
2178:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							/* The task waiting has a higher priority so record that a
2179:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							context	switch is required. */
2180:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							vTaskMissedYield();
2181:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
2182:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
2183:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
2184:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
2185:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
2186:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2187:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
2188:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2189:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						break;
2190:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2191:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2192:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2193:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			#else /* configUSE_QUEUE_SETS */
2194:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Tasks that are removed from the event list will get added to
2196:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				the pending ready list as the scheduler is still suspended. */
2197:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2198:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2199:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2200:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2201:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						/* The task waiting has a higher priority so record that
2202:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						a context switch is required. */
2203:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						vTaskMissedYield();
2204:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2205:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
2206:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2207:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2208:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2209:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2210:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
2211:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2212:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					break;
2213:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2214:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2215:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			#endif /* configUSE_QUEUE_SETS */
2216:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2217:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			--cTxLock;
2218:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2219:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2220:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
2221:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2222:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
ARM GAS  /tmp/ccQrEWyA.s 			page 41


2223:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2224:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Do the same for the Rx lock. */
2225:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
2226:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2227:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		int8_t cRxLock = pxQueue->cRxLock;
2228:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2229:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		while( cRxLock > queueLOCKED_UNMODIFIED )
2230:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2231:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2232:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2233:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2234:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2235:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					vTaskMissedYield();
2236:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2237:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
2238:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2239:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2240:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2241:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2242:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				--cRxLock;
2243:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2244:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
2245:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2246:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				break;
2247:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2248:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2249:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2250:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
2251:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2252:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
2253:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
2254:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2255:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2256:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
2257:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
2258:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
2259:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2260:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
2261:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2262:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
2263:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2264:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdTRUE;
2265:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2266:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
2267:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2268:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdFALSE;
2269:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2270:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2271:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
2272:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2273:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return xReturn;
2274:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
2275:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2276:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2277:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
2278:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
2279:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
ARM GAS  /tmp/ccQrEWyA.s 			page 42


2280:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2281:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( xQueue );
2282:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
2283:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2284:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		xReturn = pdTRUE;
2285:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2286:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	else
2287:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2288:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		xReturn = pdFALSE;
2289:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2290:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2291:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return xReturn;
2292:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
2293:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2294:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2295:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
2296:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
  62              		.loc 1 2296 0
  63              		.cfi_startproc
  64              		@ args = 0, pretend = 0, frame = 0
  65              		@ frame_needed = 0, uses_anonymous_args = 0
  66              	.LVL5:
  67 0000 10B5     		push	{r4, lr}
  68              	.LCFI0:
  69              		.cfi_def_cfa_offset 8
  70              		.cfi_offset 4, -8
  71              		.cfi_offset 14, -4
  72 0002 0446     		mov	r4, r0
2297:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
2298:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2299:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
  73              		.loc 1 2299 0
  74 0004 FFF7FEFF 		bl	vPortEnterCritical
  75              	.LVL6:
2300:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2301:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  76              		.loc 1 2301 0
  77 0008 A26B     		ldr	r2, [r4, #56]
  78 000a E36B     		ldr	r3, [r4, #60]
  79 000c 9A42     		cmp	r2, r3
  80 000e 04D0     		beq	.L8
2302:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2303:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdTRUE;
2304:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2305:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
2306:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2307:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdFALSE;
  81              		.loc 1 2307 0
  82 0010 0024     		movs	r4, #0
  83              	.LVL7:
  84              	.L5:
2308:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2309:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2310:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
  85              		.loc 1 2310 0
  86 0012 FFF7FEFF 		bl	vPortExitCritical
  87              	.LVL8:
ARM GAS  /tmp/ccQrEWyA.s 			page 43


2311:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2312:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return xReturn;
2313:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
  88              		.loc 1 2313 0
  89 0016 2046     		mov	r0, r4
  90 0018 10BD     		pop	{r4, pc}
  91              	.LVL9:
  92              	.L8:
2303:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
  93              		.loc 1 2303 0
  94 001a 0124     		movs	r4, #1
  95              	.LVL10:
  96 001c F9E7     		b	.L5
  97              		.cfi_endproc
  98              	.LFE28:
 100              		.section	.text.prvIsQueueEmpty,"ax",%progbits
 101              		.align	1
 102              		.syntax unified
 103              		.thumb
 104              		.thumb_func
 105              		.fpu fpv4-sp-d16
 107              	prvIsQueueEmpty:
 108              	.LFB26:
2257:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
 109              		.loc 1 2257 0
 110              		.cfi_startproc
 111              		@ args = 0, pretend = 0, frame = 0
 112              		@ frame_needed = 0, uses_anonymous_args = 0
 113              	.LVL11:
 114 0000 10B5     		push	{r4, lr}
 115              	.LCFI1:
 116              		.cfi_def_cfa_offset 8
 117              		.cfi_offset 4, -8
 118              		.cfi_offset 14, -4
 119 0002 0446     		mov	r4, r0
2260:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 120              		.loc 1 2260 0
 121 0004 FFF7FEFF 		bl	vPortEnterCritical
 122              	.LVL12:
2262:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 123              		.loc 1 2262 0
 124 0008 A36B     		ldr	r3, [r4, #56]
 125 000a 23B1     		cbz	r3, .L13
2268:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 126              		.loc 1 2268 0
 127 000c 0024     		movs	r4, #0
 128              	.LVL13:
 129              	.L10:
2271:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 130              		.loc 1 2271 0
 131 000e FFF7FEFF 		bl	vPortExitCritical
 132              	.LVL14:
2274:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 133              		.loc 1 2274 0
 134 0012 2046     		mov	r0, r4
 135 0014 10BD     		pop	{r4, pc}
 136              	.LVL15:
ARM GAS  /tmp/ccQrEWyA.s 			page 44


 137              	.L13:
2264:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 138              		.loc 1 2264 0
 139 0016 0124     		movs	r4, #1
 140              	.LVL16:
 141 0018 F9E7     		b	.L10
 142              		.cfi_endproc
 143              	.LFE26:
 145              		.section	.text.prvCopyDataToQueue,"ax",%progbits
 146              		.align	1
 147              		.syntax unified
 148              		.thumb
 149              		.thumb_func
 150              		.fpu fpv4-sp-d16
 152              	prvCopyDataToQueue:
 153              	.LFB23:
2040:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn = pdFALSE;
 154              		.loc 1 2040 0
 155              		.cfi_startproc
 156              		@ args = 0, pretend = 0, frame = 0
 157              		@ frame_needed = 0, uses_anonymous_args = 0
 158              	.LVL17:
 159 0000 70B5     		push	{r4, r5, r6, lr}
 160              	.LCFI2:
 161              		.cfi_def_cfa_offset 16
 162              		.cfi_offset 4, -16
 163              		.cfi_offset 5, -12
 164              		.cfi_offset 6, -8
 165              		.cfi_offset 14, -4
 166 0002 0446     		mov	r4, r0
 167 0004 1646     		mov	r6, r2
 168              	.LVL18:
2046:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 169              		.loc 1 2046 0
 170 0006 856B     		ldr	r5, [r0, #56]
 171              	.LVL19:
2048:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 172              		.loc 1 2048 0
 173 0008 026C     		ldr	r2, [r0, #64]
 174              	.LVL20:
 175 000a 5AB9     		cbnz	r2, .L15
2052:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 176              		.loc 1 2052 0
 177 000c 0368     		ldr	r3, [r0]
 178 000e 1BB1     		cbz	r3, .L24
2041:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxMessagesWaiting;
 179              		.loc 1 2041 0
 180 0010 0020     		movs	r0, #0
 181              	.LVL21:
 182              	.L16:
2112:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 183              		.loc 1 2112 0
 184 0012 0135     		adds	r5, r5, #1
 185              	.LVL22:
 186 0014 A563     		str	r5, [r4, #56]
2115:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 187              		.loc 1 2115 0
ARM GAS  /tmp/ccQrEWyA.s 			page 45


 188 0016 70BD     		pop	{r4, r5, r6, pc}
 189              	.LVL23:
 190              	.L24:
2055:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxQueue->pxMutexHolder = NULL;
 191              		.loc 1 2055 0
 192 0018 4068     		ldr	r0, [r0, #4]
 193              	.LVL24:
 194 001a FFF7FEFF 		bl	xTaskPriorityDisinherit
 195              	.LVL25:
2056:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 196              		.loc 1 2056 0
 197 001e 0023     		movs	r3, #0
 198 0020 6360     		str	r3, [r4, #4]
 199 0022 F6E7     		b	.L16
 200              	.LVL26:
 201              	.L15:
2065:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 202              		.loc 1 2065 0
 203 0024 6EB9     		cbnz	r6, .L17
2067:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 204              		.loc 1 2067 0
 205 0026 8068     		ldr	r0, [r0, #8]
 206              	.LVL27:
 207 0028 FFF7FEFF 		bl	memcpy
 208              	.LVL28:
2068:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison 
 209              		.loc 1 2068 0
 210 002c 226C     		ldr	r2, [r4, #64]
 211 002e A368     		ldr	r3, [r4, #8]
 212 0030 1344     		add	r3, r3, r2
 213 0032 A360     		str	r3, [r4, #8]
2069:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 214              		.loc 1 2069 0
 215 0034 6268     		ldr	r2, [r4, #4]
 216 0036 9342     		cmp	r3, r2
 217 0038 19D3     		bcc	.L20
2071:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 218              		.loc 1 2071 0
 219 003a 2368     		ldr	r3, [r4]
 220 003c A360     		str	r3, [r4, #8]
2041:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxMessagesWaiting;
 221              		.loc 1 2041 0
 222 003e 0020     		movs	r0, #0
 223 0040 E7E7     		b	.L16
 224              	.LVL29:
 225              	.L17:
2080:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 226              		.loc 1 2080 0
 227 0042 C068     		ldr	r0, [r0, #12]
 228              	.LVL30:
 229 0044 FFF7FEFF 		bl	memcpy
 230              	.LVL31:
2081:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as compariso
 231              		.loc 1 2081 0
 232 0048 226C     		ldr	r2, [r4, #64]
 233 004a 5242     		negs	r2, r2
 234 004c E368     		ldr	r3, [r4, #12]
ARM GAS  /tmp/ccQrEWyA.s 			page 46


 235 004e 1344     		add	r3, r3, r2
 236 0050 E360     		str	r3, [r4, #12]
2082:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 237              		.loc 1 2082 0
 238 0052 2168     		ldr	r1, [r4]
 239 0054 8B42     		cmp	r3, r1
 240 0056 02D2     		bcs	.L18
2084:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 241              		.loc 1 2084 0
 242 0058 6368     		ldr	r3, [r4, #4]
 243 005a 1A44     		add	r2, r2, r3
 244 005c E260     		str	r2, [r4, #12]
 245              	.L18:
2091:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 246              		.loc 1 2091 0
 247 005e 022E     		cmp	r6, #2
 248 0060 01D0     		beq	.L25
2041:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxMessagesWaiting;
 249              		.loc 1 2041 0
 250 0062 0020     		movs	r0, #0
 251 0064 D5E7     		b	.L16
 252              	.L25:
2093:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 253              		.loc 1 2093 0
 254 0066 25B1     		cbz	r5, .L22
2099:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 255              		.loc 1 2099 0
 256 0068 013D     		subs	r5, r5, #1
 257              	.LVL32:
2041:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxMessagesWaiting;
 258              		.loc 1 2041 0
 259 006a 0020     		movs	r0, #0
 260 006c D1E7     		b	.L16
 261              	.L20:
 262 006e 0020     		movs	r0, #0
 263 0070 CFE7     		b	.L16
 264              	.L22:
 265 0072 0020     		movs	r0, #0
 266 0074 CDE7     		b	.L16
 267              		.cfi_endproc
 268              	.LFE23:
 270              		.section	.text.prvCopyDataFromQueue,"ax",%progbits
 271              		.align	1
 272              		.syntax unified
 273              		.thumb
 274              		.thumb_func
 275              		.fpu fpv4-sp-d16
 277              	prvCopyDataFromQueue:
 278              	.LFB24:
2119:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 279              		.loc 1 2119 0
 280              		.cfi_startproc
 281              		@ args = 0, pretend = 0, frame = 0
 282              		@ frame_needed = 0, uses_anonymous_args = 0
 283              	.LVL33:
2120:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 284              		.loc 1 2120 0
ARM GAS  /tmp/ccQrEWyA.s 			page 47


 285 0000 026C     		ldr	r2, [r0, #64]
 286 0002 72B1     		cbz	r2, .L30
2119:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 287              		.loc 1 2119 0
 288 0004 10B5     		push	{r4, lr}
 289              	.LCFI3:
 290              		.cfi_def_cfa_offset 8
 291              		.cfi_offset 4, -8
 292              		.cfi_offset 14, -4
2122:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of t
 293              		.loc 1 2122 0
 294 0006 C368     		ldr	r3, [r0, #12]
 295 0008 1344     		add	r3, r3, r2
 296 000a C360     		str	r3, [r0, #12]
2123:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 297              		.loc 1 2123 0
 298 000c 4468     		ldr	r4, [r0, #4]
 299 000e A342     		cmp	r3, r4
 300 0010 01D3     		bcc	.L28
2125:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 301              		.loc 1 2125 0
 302 0012 0368     		ldr	r3, [r0]
 303 0014 C360     		str	r3, [r0, #12]
 304              	.L28:
 305 0016 0C46     		mov	r4, r1
2131:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 306              		.loc 1 2131 0
 307 0018 C168     		ldr	r1, [r0, #12]
 308              	.LVL34:
 309 001a 2046     		mov	r0, r4
 310              	.LVL35:
 311 001c FFF7FEFF 		bl	memcpy
 312              	.LVL36:
2133:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 313              		.loc 1 2133 0
 314 0020 10BD     		pop	{r4, pc}
 315              	.LVL37:
 316              	.L30:
 317              	.LCFI4:
 318              		.cfi_def_cfa_offset 0
 319              		.cfi_restore 4
 320              		.cfi_restore 14
 321 0022 7047     		bx	lr
 322              		.cfi_endproc
 323              	.LFE24:
 325              		.section	.text.prvUnlockQueue,"ax",%progbits
 326              		.align	1
 327              		.syntax unified
 328              		.thumb
 329              		.thumb_func
 330              		.fpu fpv4-sp-d16
 332              	prvUnlockQueue:
 333              	.LFB25:
2137:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
 334              		.loc 1 2137 0
 335              		.cfi_startproc
 336              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccQrEWyA.s 			page 48


 337              		@ frame_needed = 0, uses_anonymous_args = 0
 338              	.LVL38:
 339 0000 38B5     		push	{r3, r4, r5, lr}
 340              	.LCFI5:
 341              		.cfi_def_cfa_offset 16
 342              		.cfi_offset 3, -16
 343              		.cfi_offset 4, -12
 344              		.cfi_offset 5, -8
 345              		.cfi_offset 14, -4
 346 0002 0546     		mov	r5, r0
2144:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 347              		.loc 1 2144 0
 348 0004 FFF7FEFF 		bl	vPortEnterCritical
 349              	.LVL39:
 350              	.LBB93:
2146:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 351              		.loc 1 2146 0
 352 0008 95F84540 		ldrb	r4, [r5, #69]	@ zero_extendqisi2
 353 000c 64B2     		sxtb	r4, r4
 354              	.LVL40:
2149:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 355              		.loc 1 2149 0
 356 000e 03E0     		b	.L34
 357              	.L43:
2203:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 358              		.loc 1 2203 0
 359 0010 FFF7FEFF 		bl	vTaskMissedYield
 360              	.LVL41:
 361              	.L36:
2217:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 362              		.loc 1 2217 0
 363 0014 013C     		subs	r4, r4, #1
 364              	.LVL42:
 365 0016 64B2     		sxtb	r4, r4
 366              	.LVL43:
 367              	.L34:
2149:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 368              		.loc 1 2149 0
 369 0018 002C     		cmp	r4, #0
 370 001a 08DD     		ble	.L35
2197:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 371              		.loc 1 2197 0
 372 001c 6B6A     		ldr	r3, [r5, #36]
 373 001e 33B1     		cbz	r3, .L35
2199:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 374              		.loc 1 2199 0
 375 0020 05F12400 		add	r0, r5, #36
 376 0024 FFF7FEFF 		bl	xTaskRemoveFromEventList
 377              	.LVL44:
 378 0028 0028     		cmp	r0, #0
 379 002a F3D0     		beq	.L36
 380 002c F0E7     		b	.L43
 381              	.L35:
2220:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 382              		.loc 1 2220 0
 383 002e FF23     		movs	r3, #255
 384 0030 85F84530 		strb	r3, [r5, #69]
ARM GAS  /tmp/ccQrEWyA.s 			page 49


 385              	.LBE93:
2222:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 386              		.loc 1 2222 0
 387 0034 FFF7FEFF 		bl	vPortExitCritical
 388              	.LVL45:
2225:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 389              		.loc 1 2225 0
 390 0038 FFF7FEFF 		bl	vPortEnterCritical
 391              	.LVL46:
 392              	.LBB94:
2227:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 393              		.loc 1 2227 0
 394 003c 95F84440 		ldrb	r4, [r5, #68]	@ zero_extendqisi2
 395              	.LVL47:
 396 0040 64B2     		sxtb	r4, r4
 397              	.LVL48:
2229:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 398              		.loc 1 2229 0
 399 0042 03E0     		b	.L38
 400              	.L44:
2235:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 401              		.loc 1 2235 0
 402 0044 FFF7FEFF 		bl	vTaskMissedYield
 403              	.LVL49:
 404              	.L40:
2242:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 405              		.loc 1 2242 0
 406 0048 013C     		subs	r4, r4, #1
 407              	.LVL50:
 408 004a 64B2     		sxtb	r4, r4
 409              	.LVL51:
 410              	.L38:
2229:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 411              		.loc 1 2229 0
 412 004c 002C     		cmp	r4, #0
 413 004e 08DD     		ble	.L39
2231:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 414              		.loc 1 2231 0
 415 0050 2B69     		ldr	r3, [r5, #16]
 416 0052 33B1     		cbz	r3, .L39
2233:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 417              		.loc 1 2233 0
 418 0054 05F11000 		add	r0, r5, #16
 419 0058 FFF7FEFF 		bl	xTaskRemoveFromEventList
 420              	.LVL52:
 421 005c 0028     		cmp	r0, #0
 422 005e F3D0     		beq	.L40
 423 0060 F0E7     		b	.L44
 424              	.L39:
2250:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 425              		.loc 1 2250 0
 426 0062 FF23     		movs	r3, #255
 427 0064 85F84430 		strb	r3, [r5, #68]
 428              	.LBE94:
2252:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
 429              		.loc 1 2252 0
 430 0068 FFF7FEFF 		bl	vPortExitCritical
ARM GAS  /tmp/ccQrEWyA.s 			page 50


 431              	.LVL53:
2253:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 432              		.loc 1 2253 0
 433 006c 38BD     		pop	{r3, r4, r5, pc}
 434              		.cfi_endproc
 435              	.LFE25:
 437              		.section	.text.xQueueGenericReset,"ax",%progbits
 438              		.align	1
 439              		.global	xQueueGenericReset
 440              		.syntax unified
 441              		.thumb
 442              		.thumb_func
 443              		.fpu fpv4-sp-d16
 445              	xQueueGenericReset:
 446              	.LFB5:
 248:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 447              		.loc 1 248 0
 448              		.cfi_startproc
 449              		@ args = 0, pretend = 0, frame = 0
 450              		@ frame_needed = 0, uses_anonymous_args = 0
 451              	.LVL54:
 452 0000 38B5     		push	{r3, r4, r5, lr}
 453              	.LCFI6:
 454              		.cfi_def_cfa_offset 16
 455              		.cfi_offset 3, -16
 456              		.cfi_offset 4, -12
 457              		.cfi_offset 5, -8
 458              		.cfi_offset 14, -4
 459              	.LVL55:
 251:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 460              		.loc 1 251 0
 461 0002 40B9     		cbnz	r0, .L46
 462              	.LBB95:
 463              	.LBB96:
 464              		.file 2 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
   1:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FreeRTOS Kernel V10.0.1
   3:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
   5:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * subject to the following conditions:
  11:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  12:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * copies or substantial portions of the Software.
  14:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  15:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  22:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://www.FreeRTOS.org
ARM GAS  /tmp/ccQrEWyA.s 			page 51


  23:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://aws.amazon.com/freertos
  24:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  25:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * 1 tab == 4 spaces!
  26:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  27:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  28:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  29:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  30:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  31:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  32:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  33:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern "C" {
  34:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  35:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  36:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  37:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  38:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  39:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  41:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  42:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  43:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  44:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  45:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  46:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  47:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR		char
  48:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT		float
  49:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE		double
  50:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG		long
  51:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT		short
  52:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE	long
  54:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  55:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef long BaseType_t;
  57:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long UBaseType_t;
  58:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  59:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint16_t TickType_t;
  61:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #else
  63:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint32_t TickType_t;
  64:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  66:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	not need to be guarded with a critical section. */
  68:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  70:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  71:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  72:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
  73:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  77:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  78:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
  79:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD() 															\
ARM GAS  /tmp/ccQrEWyA.s 			page 52


  80:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {																				\
  81:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 																				\
  84:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "isb" );													\
  88:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
  89:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  90:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  95:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  96:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
  97:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
  98:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
  99:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 106:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 107:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** (which build with all the ports) will build. */
 111:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 114:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 115:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 116:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 120:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 121:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 122:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 123:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 126:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 127:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 129:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Generic helper function. */
 130:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 132:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	uint8_t ucReturn;
 133:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 134:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 136:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
ARM GAS  /tmp/ccQrEWyA.s 			page 53


 137:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 138:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Check the configuration. */
 139:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#endif
 142:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 143:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 147:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 149:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 151:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 153:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 154:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 155:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 156:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 159:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 160:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 161:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 162:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 163:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portINLINE	__inline
 164:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 165:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 166:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 168:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 170:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 171:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulCurrentInterrupt;
 172:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** BaseType_t xReturn;
 173:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 174:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 175:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 176:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 177:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 178:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 179:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdFALSE;
 180:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 181:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	else
 182:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 183:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdTRUE;
 184:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 185:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 186:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return xReturn;
 187:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 188:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 189:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 190:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 192:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 193:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulNewBASEPRI;
ARM GAS  /tmp/ccQrEWyA.s 			page 54


 194:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 465              		.loc 2 195 0
 466              		.syntax unified
 467              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 468 0004 4FF01003 			mov r3, #16												
 469 0008 83F31188 		msr basepri, r3											
 470 000c BFF36F8F 		isb														
 471 0010 BFF34F8F 		dsb														
 472              	
 473              	@ 0 "" 2
 474              	.LVL56:
 475              		.thumb
 476              		.syntax unified
 477              	.L47:
 478 0014 FEE7     		b	.L47
 479              	.L46:
 480 0016 0446     		mov	r4, r0
 481 0018 0D46     		mov	r5, r1
 482              	.LBE96:
 483              	.LBE95:
 253:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 484              		.loc 1 253 0
 485 001a FFF7FEFF 		bl	vPortEnterCritical
 486              	.LVL57:
 255:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 487              		.loc 1 255 0
 488 001e 2168     		ldr	r1, [r4]
 489 0020 E26B     		ldr	r2, [r4, #60]
 490 0022 236C     		ldr	r3, [r4, #64]
 491 0024 03FB0210 		mla	r0, r3, r2, r1
 492 0028 6060     		str	r0, [r4, #4]
 256:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
 493              		.loc 1 256 0
 494 002a 0020     		movs	r0, #0
 495 002c A063     		str	r0, [r4, #56]
 257:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue-
 496              		.loc 1 257 0
 497 002e A160     		str	r1, [r4, #8]
 258:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 498              		.loc 1 258 0
 499 0030 013A     		subs	r2, r2, #1
 500 0032 02FB0313 		mla	r3, r2, r3, r1
 501 0036 E360     		str	r3, [r4, #12]
 259:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
 502              		.loc 1 259 0
 503 0038 FF23     		movs	r3, #255
 504 003a 84F84430 		strb	r3, [r4, #68]
 260:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 505              		.loc 1 260 0
 506 003e 84F84530 		strb	r3, [r4, #69]
 262:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 507              		.loc 1 262 0
 508 0042 A5B9     		cbnz	r5, .L48
 269:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 509              		.loc 1 269 0
 510 0044 2369     		ldr	r3, [r4, #16]
ARM GAS  /tmp/ccQrEWyA.s 			page 55


 511 0046 1BB9     		cbnz	r3, .L51
 512              	.L49:
 292:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 513              		.loc 1 292 0
 514 0048 FFF7FEFF 		bl	vPortExitCritical
 515              	.LVL58:
 297:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 516              		.loc 1 297 0
 517 004c 0120     		movs	r0, #1
 518 004e 38BD     		pop	{r3, r4, r5, pc}
 519              	.LVL59:
 520              	.L51:
 271:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 521              		.loc 1 271 0
 522 0050 04F11000 		add	r0, r4, #16
 523 0054 FFF7FEFF 		bl	xTaskRemoveFromEventList
 524              	.LVL60:
 525 0058 0028     		cmp	r0, #0
 526 005a F5D0     		beq	.L49
 273:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 527              		.loc 1 273 0
 528 005c 084B     		ldr	r3, .L52
 529 005e 4FF08052 		mov	r2, #268435456
 530 0062 1A60     		str	r2, [r3]
 531              		.syntax unified
 532              	@ 273 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 533 0064 BFF34F8F 		dsb
 534              	@ 0 "" 2
 535              	@ 273 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 536 0068 BFF36F8F 		isb
 537              	@ 0 "" 2
 538              		.thumb
 539              		.syntax unified
 540 006c ECE7     		b	.L49
 541              	.L48:
 288:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 542              		.loc 1 288 0
 543 006e 04F11000 		add	r0, r4, #16
 544 0072 FFF7FEFF 		bl	vListInitialise
 545              	.LVL61:
 289:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 546              		.loc 1 289 0
 547 0076 04F12400 		add	r0, r4, #36
 548 007a FFF7FEFF 		bl	vListInitialise
 549              	.LVL62:
 550 007e E3E7     		b	.L49
 551              	.L53:
 552              		.align	2
 553              	.L52:
 554 0080 04ED00E0 		.word	-536810236
 555              		.cfi_endproc
 556              	.LFE5:
 558              		.section	.text.prvInitialiseNewQueue,"ax",%progbits
 559              		.align	1
 560              		.syntax unified
 561              		.thumb
 562              		.thumb_func
ARM GAS  /tmp/ccQrEWyA.s 			page 56


 563              		.fpu fpv4-sp-d16
 565              	prvInitialiseNewQueue:
 566              	.LFB7:
 409:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Remove compiler warnings about unused parameters should
 567              		.loc 1 409 0
 568              		.cfi_startproc
 569              		@ args = 4, pretend = 0, frame = 0
 570              		@ frame_needed = 0, uses_anonymous_args = 0
 571              	.LVL63:
 572 0000 10B5     		push	{r4, lr}
 573              	.LCFI7:
 574              		.cfi_def_cfa_offset 8
 575              		.cfi_offset 4, -8
 576              		.cfi_offset 14, -4
 577 0002 029B     		ldr	r3, [sp, #8]
 578              	.LVL64:
 414:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 579              		.loc 1 414 0
 580 0004 0C46     		mov	r4, r1
 581 0006 39B1     		cbz	r1, .L58
 425:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 582              		.loc 1 425 0
 583 0008 1A60     		str	r2, [r3]
 584              	.L56:
 430:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	pxNewQueue->uxItemSize = uxItemSize;
 585              		.loc 1 430 0
 586 000a D863     		str	r0, [r3, #60]
 431:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 587              		.loc 1 431 0
 588 000c 1C64     		str	r4, [r3, #64]
 432:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 589              		.loc 1 432 0
 590 000e 0121     		movs	r1, #1
 591              	.LVL65:
 592 0010 1846     		mov	r0, r3
 593              	.LVL66:
 594 0012 FFF7FEFF 		bl	xQueueGenericReset
 595              	.LVL67:
 447:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 596              		.loc 1 447 0
 597 0016 10BD     		pop	{r4, pc}
 598              	.LVL68:
 599              	.L58:
 420:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 600              		.loc 1 420 0
 601 0018 1B60     		str	r3, [r3]
 602 001a F6E7     		b	.L56
 603              		.cfi_endproc
 604              	.LFE7:
 606              		.section	.text.xQueueGenericCreate,"ax",%progbits
 607              		.align	1
 608              		.global	xQueueGenericCreate
 609              		.syntax unified
 610              		.thumb
 611              		.thumb_func
 612              		.fpu fpv4-sp-d16
 614              	xQueueGenericCreate:
ARM GAS  /tmp/ccQrEWyA.s 			page 57


 615              	.LFB6:
 359:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t *pxNewQueue;
 616              		.loc 1 359 0
 617              		.cfi_startproc
 618              		@ args = 0, pretend = 0, frame = 0
 619              		@ frame_needed = 0, uses_anonymous_args = 0
 620              	.LVL69:
 364:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 621              		.loc 1 364 0
 622 0000 40B9     		cbnz	r0, .L60
 623              	.LBB97:
 624              	.LBB98:
 625              		.loc 2 195 0
 626              		.syntax unified
 627              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 628 0002 4FF01003 			mov r3, #16												
 629 0006 83F31188 		msr basepri, r3											
 630 000a BFF36F8F 		isb														
 631 000e BFF34F8F 		dsb														
 632              	
 633              	@ 0 "" 2
 634              	.LVL70:
 635              		.thumb
 636              		.syntax unified
 637              	.L61:
 638 0012 FEE7     		b	.L61
 639              	.L60:
 640              	.LBE98:
 641              	.LBE97:
 359:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t *pxNewQueue;
 642              		.loc 1 359 0
 643 0014 F0B5     		push	{r4, r5, r6, r7, lr}
 644              	.LCFI8:
 645              		.cfi_def_cfa_offset 20
 646              		.cfi_offset 4, -20
 647              		.cfi_offset 5, -16
 648              		.cfi_offset 6, -12
 649              		.cfi_offset 7, -8
 650              		.cfi_offset 14, -4
 651 0016 83B0     		sub	sp, sp, #12
 652              	.LCFI9:
 653              		.cfi_def_cfa_offset 32
 654 0018 0546     		mov	r5, r0
 366:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 655              		.loc 1 366 0
 656 001a 11B1     		cbz	r1, .L64
 375:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 657              		.loc 1 375 0
 658 001c 01FB00F0 		mul	r0, r1, r0
 659              	.LVL71:
 660 0020 00E0     		b	.L62
 661              	.LVL72:
 662              	.L64:
 369:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 663              		.loc 1 369 0
 664 0022 0020     		movs	r0, #0
 665              	.LVL73:
ARM GAS  /tmp/ccQrEWyA.s 			page 58


 666              	.L62:
 667 0024 1746     		mov	r7, r2
 668 0026 0C46     		mov	r4, r1
 669              	.LVL74:
 378:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 670              		.loc 1 378 0
 671 0028 4830     		adds	r0, r0, #72
 672              	.LVL75:
 673 002a FFF7FEFF 		bl	pvPortMalloc
 674              	.LVL76:
 380:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 675              		.loc 1 380 0
 676 002e 0646     		mov	r6, r0
 677 0030 38B1     		cbz	r0, .L59
 678              	.LVL77:
 395:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 679              		.loc 1 395 0
 680 0032 0090     		str	r0, [sp]
 681 0034 3B46     		mov	r3, r7
 682 0036 00F14802 		add	r2, r0, #72
 683              	.LVL78:
 684 003a 2146     		mov	r1, r4
 685 003c 2846     		mov	r0, r5
 686              	.LVL79:
 687 003e FFF7FEFF 		bl	prvInitialiseNewQueue
 688              	.LVL80:
 689              	.L59:
 403:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 690              		.loc 1 403 0
 691 0042 3046     		mov	r0, r6
 692 0044 03B0     		add	sp, sp, #12
 693              	.LCFI10:
 694              		.cfi_def_cfa_offset 20
 695              		@ sp needed
 696 0046 F0BD     		pop	{r4, r5, r6, r7, pc}
 697              		.cfi_endproc
 698              	.LFE6:
 700              		.section	.text.xQueueGenericSend,"ax",%progbits
 701              		.align	1
 702              		.global	xQueueGenericSend
 703              		.syntax unified
 704              		.thumb
 705              		.thumb_func
 706              		.fpu fpv4-sp-d16
 708              	xQueueGenericSend:
 709              	.LFB10:
 726:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 710              		.loc 1 726 0
 711              		.cfi_startproc
 712              		@ args = 0, pretend = 0, frame = 16
 713              		@ frame_needed = 0, uses_anonymous_args = 0
 714              	.LVL81:
 715 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 716              	.LCFI11:
 717              		.cfi_def_cfa_offset 20
 718              		.cfi_offset 4, -20
 719              		.cfi_offset 5, -16
ARM GAS  /tmp/ccQrEWyA.s 			page 59


 720              		.cfi_offset 6, -12
 721              		.cfi_offset 7, -8
 722              		.cfi_offset 14, -4
 723 0002 85B0     		sub	sp, sp, #20
 724              	.LCFI12:
 725              		.cfi_def_cfa_offset 40
 726 0004 0192     		str	r2, [sp, #4]
 727              	.LVL82:
 731:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 728              		.loc 1 731 0
 729 0006 60B1     		cbz	r0, .L92
 730 0008 0446     		mov	r4, r0
 732:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 731              		.loc 1 732 0
 732 000a 99B9     		cbnz	r1, .L70
 732:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 733              		.loc 1 732 0 is_stmt 0 discriminator 2
 734 000c 026C     		ldr	r2, [r0, #64]
 735              	.LVL83:
 736 000e 8AB1     		cbz	r2, .L70
 737              	.LBB99:
 738              	.LBB100:
 739              		.loc 2 195 0 is_stmt 1
 740              		.syntax unified
 741              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 742 0010 4FF01003 			mov r3, #16												
 743 0014 83F31188 		msr basepri, r3											
 744 0018 BFF36F8F 		isb														
 745 001c BFF34F8F 		dsb														
 746              	
 747              	@ 0 "" 2
 748              	.LVL84:
 749              		.thumb
 750              		.syntax unified
 751              	.L71:
 752 0020 FEE7     		b	.L71
 753              	.LVL85:
 754              	.L92:
 755              	.LBE100:
 756              	.LBE99:
 757              	.LBB101:
 758              	.LBB102:
 759              		.syntax unified
 760              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 761 0022 4FF01003 			mov r3, #16												
 762 0026 83F31188 		msr basepri, r3											
 763 002a BFF36F8F 		isb														
 764 002e BFF34F8F 		dsb														
 765              	
 766              	@ 0 "" 2
 767              	.LVL86:
 768              		.thumb
 769              		.syntax unified
 770              	.L69:
 771 0032 FEE7     		b	.L69
 772              	.LVL87:
 773              	.L70:
ARM GAS  /tmp/ccQrEWyA.s 			page 60


 774              	.LBE102:
 775              	.LBE101:
 733:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 776              		.loc 1 733 0
 777 0034 022B     		cmp	r3, #2
 778 0036 0BD1     		bne	.L72
 733:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 779              		.loc 1 733 0 is_stmt 0 discriminator 2
 780 0038 E26B     		ldr	r2, [r4, #60]
 781 003a 012A     		cmp	r2, #1
 782 003c 08D0     		beq	.L72
 783              	.LBB103:
 784              	.LBB104:
 785              		.loc 2 195 0 is_stmt 1
 786              		.syntax unified
 787              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 788 003e 4FF01003 			mov r3, #16												
 789 0042 83F31188 		msr basepri, r3											
 790 0046 BFF36F8F 		isb														
 791 004a BFF34F8F 		dsb														
 792              	
 793              	@ 0 "" 2
 794              	.LVL88:
 795              		.thumb
 796              		.syntax unified
 797              	.L73:
 798 004e FEE7     		b	.L73
 799              	.LVL89:
 800              	.L72:
 801 0050 1E46     		mov	r6, r3
 802 0052 0F46     		mov	r7, r1
 803              	.LBE104:
 804              	.LBE103:
 736:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 805              		.loc 1 736 0
 806 0054 FFF7FEFF 		bl	xTaskGetSchedulerState
 807              	.LVL90:
 808 0058 50B9     		cbnz	r0, .L89
 736:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 809              		.loc 1 736 0 is_stmt 0 discriminator 2
 810 005a 019B     		ldr	r3, [sp, #4]
 811 005c 53B1     		cbz	r3, .L90
 812              	.LBB105:
 813              	.LBB106:
 814              		.loc 2 195 0 is_stmt 1
 815              		.syntax unified
 816              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 817 005e 4FF01003 			mov r3, #16												
 818 0062 83F31188 		msr basepri, r3											
 819 0066 BFF36F8F 		isb														
 820 006a BFF34F8F 		dsb														
 821              	
 822              	@ 0 "" 2
 823              	.LVL91:
 824              		.thumb
 825              		.syntax unified
 826              	.L75:
ARM GAS  /tmp/ccQrEWyA.s 			page 61


 827 006e FEE7     		b	.L75
 828              	.L89:
 829              	.LBE106:
 830              	.LBE105:
 831 0070 0025     		movs	r5, #0
 832 0072 3AE0     		b	.L76
 833              	.L90:
 834 0074 0025     		movs	r5, #0
 835 0076 38E0     		b	.L76
 836              	.LVL92:
 837              	.L77:
 755:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 838              		.loc 1 755 0
 839 0078 3246     		mov	r2, r6
 840 007a 3946     		mov	r1, r7
 841 007c 2046     		mov	r0, r4
 842 007e FFF7FEFF 		bl	prvCopyDataToQueue
 843              	.LVL93:
 810:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 844              		.loc 1 810 0
 845 0082 636A     		ldr	r3, [r4, #36]
 846 0084 4BB9     		cbnz	r3, .L93
 825:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 847              		.loc 1 825 0
 848 0086 A8B1     		cbz	r0, .L80
 831:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 849              		.loc 1 831 0
 850 0088 3B4B     		ldr	r3, .L98
 851 008a 4FF08052 		mov	r2, #268435456
 852 008e 1A60     		str	r2, [r3]
 853              		.syntax unified
 854              	@ 831 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 855 0090 BFF34F8F 		dsb
 856              	@ 0 "" 2
 857              	@ 831 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 858 0094 BFF36F8F 		isb
 859              	@ 0 "" 2
 860              		.thumb
 861              		.syntax unified
 862 0098 0CE0     		b	.L80
 863              	.L93:
 812:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 864              		.loc 1 812 0
 865 009a 04F12400 		add	r0, r4, #36
 866              	.LVL94:
 867 009e FFF7FEFF 		bl	xTaskRemoveFromEventList
 868              	.LVL95:
 869 00a2 38B1     		cbz	r0, .L80
 818:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 870              		.loc 1 818 0
 871 00a4 344B     		ldr	r3, .L98
 872 00a6 4FF08052 		mov	r2, #268435456
 873 00aa 1A60     		str	r2, [r3]
 874              		.syntax unified
 875              	@ 818 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 876 00ac BFF34F8F 		dsb
 877              	@ 0 "" 2
ARM GAS  /tmp/ccQrEWyA.s 			page 62


 878              	@ 818 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 879 00b0 BFF36F8F 		isb
 880              	@ 0 "" 2
 881              		.thumb
 882              		.syntax unified
 883              	.L80:
 840:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				return pdPASS;
 884              		.loc 1 840 0
 885 00b4 FFF7FEFF 		bl	vPortExitCritical
 886              	.LVL96:
 841:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 887              		.loc 1 841 0
 888 00b8 0120     		movs	r0, #1
 889              	.L67:
 920:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 890              		.loc 1 920 0
 891 00ba 05B0     		add	sp, sp, #20
 892              	.LCFI13:
 893              		.cfi_remember_state
 894              		.cfi_def_cfa_offset 20
 895              		@ sp needed
 896 00bc F0BD     		pop	{r4, r5, r6, r7, pc}
 897              	.LVL97:
 898              	.L94:
 899              	.LCFI14:
 900              		.cfi_restore_state
 849:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 901              		.loc 1 849 0
 902 00be FFF7FEFF 		bl	vPortExitCritical
 903              	.LVL98:
 854:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 904              		.loc 1 854 0
 905 00c2 0020     		movs	r0, #0
 906 00c4 F9E7     		b	.L67
 907              	.L95:
 860:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					xEntryTimeSet = pdTRUE;
 908              		.loc 1 860 0
 909 00c6 02A8     		add	r0, sp, #8
 910 00c8 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 911              	.LVL99:
 861:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 912              		.loc 1 861 0
 913 00cc 0125     		movs	r5, #1
 914 00ce 19E0     		b	.L83
 915              	.LVL100:
 916              	.L96:
 876:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 917              		.loc 1 876 0 discriminator 1
 918 00d0 0023     		movs	r3, #0
 919 00d2 84F84430 		strb	r3, [r4, #68]
 920 00d6 21E0     		b	.L84
 921              	.L97:
 876:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 922              		.loc 1 876 0 is_stmt 0 discriminator 4
 923 00d8 0023     		movs	r3, #0
 924 00da 84F84530 		strb	r3, [r4, #69]
 925 00de 23E0     		b	.L85
ARM GAS  /tmp/ccQrEWyA.s 			page 63


 926              	.L87:
 906:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				( void ) xTaskResumeAll();
 927              		.loc 1 906 0 is_stmt 1
 928 00e0 2046     		mov	r0, r4
 929 00e2 FFF7FEFF 		bl	prvUnlockQueue
 930              	.LVL101:
 907:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 931              		.loc 1 907 0
 932 00e6 FFF7FEFF 		bl	xTaskResumeAll
 933              	.LVL102:
 934              	.L76:
 746:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 935              		.loc 1 746 0
 936 00ea FFF7FEFF 		bl	vPortEnterCritical
 937              	.LVL103:
 752:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 938              		.loc 1 752 0
 939 00ee A26B     		ldr	r2, [r4, #56]
 940 00f0 E36B     		ldr	r3, [r4, #60]
 941 00f2 9A42     		cmp	r2, r3
 942 00f4 C0D3     		bcc	.L77
 752:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 943              		.loc 1 752 0 is_stmt 0 discriminator 1
 944 00f6 022E     		cmp	r6, #2
 945 00f8 BED0     		beq	.L77
 845:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 946              		.loc 1 845 0 is_stmt 1
 947 00fa 019B     		ldr	r3, [sp, #4]
 948 00fc 002B     		cmp	r3, #0
 949 00fe DED0     		beq	.L94
 856:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 950              		.loc 1 856 0
 951 0100 002D     		cmp	r5, #0
 952 0102 E0D0     		beq	.L95
 953              	.LVL104:
 954              	.L83:
 870:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 955              		.loc 1 870 0
 956 0104 FFF7FEFF 		bl	vPortExitCritical
 957              	.LVL105:
 875:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
 958              		.loc 1 875 0
 959 0108 FFF7FEFF 		bl	vTaskSuspendAll
 960              	.LVL106:
 876:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 961              		.loc 1 876 0
 962 010c FFF7FEFF 		bl	vPortEnterCritical
 963              	.LVL107:
 964 0110 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 965 0114 5BB2     		sxtb	r3, r3
 966 0116 B3F1FF3F 		cmp	r3, #-1
 967 011a D9D0     		beq	.L96
 968              	.L84:
 876:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 969              		.loc 1 876 0 is_stmt 0 discriminator 3
 970 011c 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 971 0120 5BB2     		sxtb	r3, r3
ARM GAS  /tmp/ccQrEWyA.s 			page 64


 972 0122 B3F1FF3F 		cmp	r3, #-1
 973 0126 D7D0     		beq	.L97
 974              	.L85:
 876:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 975              		.loc 1 876 0 discriminator 6
 976 0128 FFF7FEFF 		bl	vPortExitCritical
 977              	.LVL108:
 879:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 978              		.loc 1 879 0 is_stmt 1 discriminator 6
 979 012c 01A9     		add	r1, sp, #4
 980 012e 02A8     		add	r0, sp, #8
 981 0130 FFF7FEFF 		bl	xTaskCheckForTimeOut
 982              	.LVL109:
 983 0134 C8B9     		cbnz	r0, .L86
 881:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 984              		.loc 1 881 0
 985 0136 2046     		mov	r0, r4
 986 0138 FFF7FEFF 		bl	prvIsQueueFull
 987              	.LVL110:
 988 013c 0028     		cmp	r0, #0
 989 013e CFD0     		beq	.L87
 884:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 990              		.loc 1 884 0
 991 0140 0199     		ldr	r1, [sp, #4]
 992 0142 04F11000 		add	r0, r4, #16
 993 0146 FFF7FEFF 		bl	vTaskPlaceOnEventList
 994              	.LVL111:
 891:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 995              		.loc 1 891 0
 996 014a 2046     		mov	r0, r4
 997 014c FFF7FEFF 		bl	prvUnlockQueue
 998              	.LVL112:
 898:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 999              		.loc 1 898 0
 1000 0150 FFF7FEFF 		bl	xTaskResumeAll
 1001              	.LVL113:
 1002 0154 0028     		cmp	r0, #0
 1003 0156 C8D1     		bne	.L76
 900:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 1004              		.loc 1 900 0
 1005 0158 074B     		ldr	r3, .L98
 1006 015a 4FF08052 		mov	r2, #268435456
 1007 015e 1A60     		str	r2, [r3]
 1008              		.syntax unified
 1009              	@ 900 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 1010 0160 BFF34F8F 		dsb
 1011              	@ 0 "" 2
 1012              	@ 900 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 1013 0164 BFF36F8F 		isb
 1014              	@ 0 "" 2
 1015              		.thumb
 1016              		.syntax unified
 1017 0168 BFE7     		b	.L76
 1018              	.L86:
 913:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( void ) xTaskResumeAll();
 1019              		.loc 1 913 0
 1020 016a 2046     		mov	r0, r4
ARM GAS  /tmp/ccQrEWyA.s 			page 65


 1021 016c FFF7FEFF 		bl	prvUnlockQueue
 1022              	.LVL114:
 914:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1023              		.loc 1 914 0
 1024 0170 FFF7FEFF 		bl	xTaskResumeAll
 1025              	.LVL115:
 917:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 1026              		.loc 1 917 0
 1027 0174 0020     		movs	r0, #0
 1028 0176 A0E7     		b	.L67
 1029              	.L99:
 1030              		.align	2
 1031              	.L98:
 1032 0178 04ED00E0 		.word	-536810236
 1033              		.cfi_endproc
 1034              	.LFE10:
 1036              		.section	.text.prvInitialiseMutex,"ax",%progbits
 1037              		.align	1
 1038              		.syntax unified
 1039              		.thumb
 1040              		.thumb_func
 1041              		.fpu fpv4-sp-d16
 1043              	prvInitialiseMutex:
 1044              	.LFB8:
 453:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxNewQueue != NULL )
 1045              		.loc 1 453 0
 1046              		.cfi_startproc
 1047              		@ args = 0, pretend = 0, frame = 0
 1048              		@ frame_needed = 0, uses_anonymous_args = 0
 1049              	.LVL116:
 454:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 1050              		.loc 1 454 0
 1051 0000 48B1     		cbz	r0, .L103
 453:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxNewQueue != NULL )
 1052              		.loc 1 453 0
 1053 0002 08B5     		push	{r3, lr}
 1054              	.LCFI15:
 1055              		.cfi_def_cfa_offset 8
 1056              		.cfi_offset 3, -8
 1057              		.cfi_offset 14, -4
 460:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 1058              		.loc 1 460 0
 1059 0004 0021     		movs	r1, #0
 1060 0006 4160     		str	r1, [r0, #4]
 461:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1061              		.loc 1 461 0
 1062 0008 0160     		str	r1, [r0]
 464:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1063              		.loc 1 464 0
 1064 000a C160     		str	r1, [r0, #12]
 469:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 1065              		.loc 1 469 0
 1066 000c 0B46     		mov	r3, r1
 1067 000e 0A46     		mov	r2, r1
 1068 0010 FFF7FEFF 		bl	xQueueGenericSend
 1069              	.LVL117:
 475:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
ARM GAS  /tmp/ccQrEWyA.s 			page 66


 1070              		.loc 1 475 0
 1071 0014 08BD     		pop	{r3, pc}
 1072              	.LVL118:
 1073              	.L103:
 1074              	.LCFI16:
 1075              		.cfi_def_cfa_offset 0
 1076              		.cfi_restore 3
 1077              		.cfi_restore 14
 1078 0016 7047     		bx	lr
 1079              		.cfi_endproc
 1080              	.LFE8:
 1082              		.section	.text.xQueueCreateMutex,"ax",%progbits
 1083              		.align	1
 1084              		.global	xQueueCreateMutex
 1085              		.syntax unified
 1086              		.thumb
 1087              		.thumb_func
 1088              		.fpu fpv4-sp-d16
 1090              	xQueueCreateMutex:
 1091              	.LFB9:
 483:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t *pxNewQueue;
 1092              		.loc 1 483 0
 1093              		.cfi_startproc
 1094              		@ args = 0, pretend = 0, frame = 0
 1095              		@ frame_needed = 0, uses_anonymous_args = 0
 1096              	.LVL119:
 1097 0000 10B5     		push	{r4, lr}
 1098              	.LCFI17:
 1099              		.cfi_def_cfa_offset 8
 1100              		.cfi_offset 4, -8
 1101              		.cfi_offset 14, -4
 1102              	.LVL120:
 487:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		prvInitialiseMutex( pxNewQueue );
 1103              		.loc 1 487 0
 1104 0002 0246     		mov	r2, r0
 1105 0004 0021     		movs	r1, #0
 1106 0006 0120     		movs	r0, #1
 1107              	.LVL121:
 1108 0008 FFF7FEFF 		bl	xQueueGenericCreate
 1109              	.LVL122:
 1110 000c 0446     		mov	r4, r0
 1111              	.LVL123:
 488:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1112              		.loc 1 488 0
 1113 000e FFF7FEFF 		bl	prvInitialiseMutex
 1114              	.LVL124:
 491:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1115              		.loc 1 491 0
 1116 0012 2046     		mov	r0, r4
 1117 0014 10BD     		pop	{r4, pc}
 1118              		.cfi_endproc
 1119              	.LFE9:
 1121              		.section	.text.xQueueGenericSendFromISR,"ax",%progbits
 1122              		.align	1
 1123              		.global	xQueueGenericSendFromISR
 1124              		.syntax unified
 1125              		.thumb
ARM GAS  /tmp/ccQrEWyA.s 			page 67


 1126              		.thumb_func
 1127              		.fpu fpv4-sp-d16
 1129              	xQueueGenericSendFromISR:
 1130              	.LFB11:
 924:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
 1131              		.loc 1 924 0
 1132              		.cfi_startproc
 1133              		@ args = 0, pretend = 0, frame = 0
 1134              		@ frame_needed = 0, uses_anonymous_args = 0
 1135              	.LVL125:
 1136 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 1137              	.LCFI18:
 1138              		.cfi_def_cfa_offset 32
 1139              		.cfi_offset 3, -32
 1140              		.cfi_offset 4, -28
 1141              		.cfi_offset 5, -24
 1142              		.cfi_offset 6, -20
 1143              		.cfi_offset 7, -16
 1144              		.cfi_offset 8, -12
 1145              		.cfi_offset 9, -8
 1146              		.cfi_offset 14, -4
 1147              	.LVL126:
 929:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 1148              		.loc 1 929 0
 1149 0004 60B1     		cbz	r0, .L123
 1150 0006 0446     		mov	r4, r0
 930:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1151              		.loc 1 930 0
 1152 0008 99B9     		cbnz	r1, .L111
 930:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1153              		.loc 1 930 0 is_stmt 0 discriminator 2
 1154 000a 006C     		ldr	r0, [r0, #64]
 1155              	.LVL127:
 1156 000c 88B1     		cbz	r0, .L111
 1157              	.LBB107:
 1158              	.LBB108:
 1159              		.loc 2 195 0 is_stmt 1
 1160              		.syntax unified
 1161              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1162 000e 4FF01003 			mov r3, #16												
 1163 0012 83F31188 		msr basepri, r3											
 1164 0016 BFF36F8F 		isb														
 1165 001a BFF34F8F 		dsb														
 1166              	
 1167              	@ 0 "" 2
 1168              	.LVL128:
 1169              		.thumb
 1170              		.syntax unified
 1171              	.L112:
 1172 001e FEE7     		b	.L112
 1173              	.LVL129:
 1174              	.L123:
 1175              	.LBE108:
 1176              	.LBE107:
 1177              	.LBB109:
 1178              	.LBB110:
 1179              		.syntax unified
ARM GAS  /tmp/ccQrEWyA.s 			page 68


 1180              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1181 0020 4FF01003 			mov r3, #16												
 1182 0024 83F31188 		msr basepri, r3											
 1183 0028 BFF36F8F 		isb														
 1184 002c BFF34F8F 		dsb														
 1185              	
 1186              	@ 0 "" 2
 1187              	.LVL130:
 1188              		.thumb
 1189              		.syntax unified
 1190              	.L110:
 1191 0030 FEE7     		b	.L110
 1192              	.LVL131:
 1193              	.L111:
 1194              	.LBE110:
 1195              	.LBE109:
 931:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1196              		.loc 1 931 0
 1197 0032 022B     		cmp	r3, #2
 1198 0034 0BD1     		bne	.L113
 931:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1199              		.loc 1 931 0 is_stmt 0 discriminator 2
 1200 0036 E06B     		ldr	r0, [r4, #60]
 1201 0038 0128     		cmp	r0, #1
 1202 003a 08D0     		beq	.L113
 1203              	.LBB111:
 1204              	.LBB112:
 1205              		.loc 2 195 0 is_stmt 1
 1206              		.syntax unified
 1207              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1208 003c 4FF01003 			mov r3, #16												
 1209 0040 83F31188 		msr basepri, r3											
 1210 0044 BFF36F8F 		isb														
 1211 0048 BFF34F8F 		dsb														
 1212              	
 1213              	@ 0 "" 2
 1214              	.LVL132:
 1215              		.thumb
 1216              		.syntax unified
 1217              	.L114:
 1218 004c FEE7     		b	.L114
 1219              	.LVL133:
 1220              	.L113:
 1221 004e 1F46     		mov	r7, r3
 1222 0050 9046     		mov	r8, r2
 1223 0052 8946     		mov	r9, r1
 1224              	.LBE112:
 1225              	.LBE111:
 947:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1226              		.loc 1 947 0
 1227 0054 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1228              	.LVL134:
 1229              	.LBB113:
 1230              	.LBB114:
 196:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 197:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %0, %1												\n"	\
 198:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0											\n" \
ARM GAS  /tmp/ccQrEWyA.s 			page 69


 199:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 200:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 201:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 202:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 203:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 204:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 205:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 206:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 207:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 208:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 209:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 210:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 211:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1231              		.loc 2 211 0
 1232              		.syntax unified
 1233              	@ 211 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1234 0058 EFF31186 			mrs r6, basepri											
 1235 005c 4FF01003 		mov r3, #16												
 1236 0060 83F31188 		msr basepri, r3											
 1237 0064 BFF36F8F 		isb														
 1238 0068 BFF34F8F 		dsb														
 1239              	
 1240              	@ 0 "" 2
 1241              		.thumb
 1242              		.syntax unified
 1243              	.LBE114:
 1244              	.LBE113:
 956:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 1245              		.loc 1 956 0
 1246 006c A26B     		ldr	r2, [r4, #56]
 1247 006e E36B     		ldr	r3, [r4, #60]
 1248 0070 9A42     		cmp	r2, r3
 1249 0072 03D3     		bcc	.L115
 956:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 1250              		.loc 1 956 0 is_stmt 0 discriminator 1
 1251 0074 022F     		cmp	r7, #2
 1252 0076 01D0     		beq	.L115
1065:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 1253              		.loc 1 1065 0 is_stmt 1
 1254 0078 0020     		movs	r0, #0
 1255 007a 0FE0     		b	.L116
 1256              	.L115:
 1257              	.LBB115:
 958:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1258              		.loc 1 958 0
 1259 007c 94F84550 		ldrb	r5, [r4, #69]	@ zero_extendqisi2
 1260 0080 6DB2     		sxtb	r5, r5
 1261              	.LVL135:
 967:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1262              		.loc 1 967 0
 1263 0082 3A46     		mov	r2, r7
 1264 0084 4946     		mov	r1, r9
 1265 0086 2046     		mov	r0, r4
 1266 0088 FFF7FEFF 		bl	prvCopyDataToQueue
 1267              	.LVL136:
 971:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 1268              		.loc 1 971 0
ARM GAS  /tmp/ccQrEWyA.s 			page 70


 1269 008c B5F1FF3F 		cmp	r5, #-1
 1270 0090 08D0     		beq	.L124
1057:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 1271              		.loc 1 1057 0
 1272 0092 6B1C     		adds	r3, r5, #1
 1273 0094 5BB2     		sxtb	r3, r3
 1274 0096 84F84530 		strb	r3, [r4, #69]
1060:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 1275              		.loc 1 1060 0
 1276 009a 0120     		movs	r0, #1
 1277              	.LVL137:
 1278              	.L116:
 1279              	.LBE115:
 1280              	.LBB116:
 1281              	.LBB117:
 212:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 213:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mrs %0, basepri											\n" \
 214:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %1, %2												\n"	\
 215:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %1											\n" \
 216:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 217:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 218:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 219:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 220:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 221:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 222:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	warnings. */
 223:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return ulOriginalBASEPRI;
 224:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 225:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 226:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 227:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 228:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 229:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1282              		.loc 2 229 0
 1283              		.syntax unified
 1284              	@ 229 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1285 009c 86F31188 			msr basepri, r6	
 1286              	@ 0 "" 2
 1287              	.LVL138:
 1288              		.thumb
 1289              		.syntax unified
 1290              	.LBE117:
 1291              	.LBE116:
1071:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 1292              		.loc 1 1071 0
 1293 00a0 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1294              	.LVL139:
 1295              	.L124:
 1296              	.LBB118:
1026:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 1297              		.loc 1 1026 0
 1298 00a4 636A     		ldr	r3, [r4, #36]
 1299 00a6 5BB1     		cbz	r3, .L119
1028:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 1300              		.loc 1 1028 0
 1301 00a8 04F12400 		add	r0, r4, #36
 1302 00ac FFF7FEFF 		bl	xTaskRemoveFromEventList
ARM GAS  /tmp/ccQrEWyA.s 			page 71


 1303              	.LVL140:
 1304 00b0 40B1     		cbz	r0, .L120
1032:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
 1305              		.loc 1 1032 0
 1306 00b2 B8F1000F 		cmp	r8, #0
 1307 00b6 07D0     		beq	.L121
1034:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
 1308              		.loc 1 1034 0
 1309 00b8 0120     		movs	r0, #1
 1310 00ba C8F80000 		str	r0, [r8]
 1311 00be EDE7     		b	.L116
 1312              	.L119:
1060:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 1313              		.loc 1 1060 0
 1314 00c0 0120     		movs	r0, #1
 1315 00c2 EBE7     		b	.L116
 1316              	.L120:
 1317 00c4 0120     		movs	r0, #1
 1318 00c6 E9E7     		b	.L116
 1319              	.L121:
 1320 00c8 0120     		movs	r0, #1
 1321 00ca E7E7     		b	.L116
 1322              	.LBE118:
 1323              		.cfi_endproc
 1324              	.LFE11:
 1326              		.section	.text.xQueueGiveFromISR,"ax",%progbits
 1327              		.align	1
 1328              		.global	xQueueGiveFromISR
 1329              		.syntax unified
 1330              		.thumb
 1331              		.thumb_func
 1332              		.fpu fpv4-sp-d16
 1334              	xQueueGiveFromISR:
 1335              	.LFB12:
1075:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
 1336              		.loc 1 1075 0
 1337              		.cfi_startproc
 1338              		@ args = 0, pretend = 0, frame = 0
 1339              		@ frame_needed = 0, uses_anonymous_args = 0
 1340              	.LVL141:
1086:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1341              		.loc 1 1086 0
 1342 0000 60B1     		cbz	r0, .L140
1075:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
 1343              		.loc 1 1075 0
 1344 0002 70B5     		push	{r4, r5, r6, lr}
 1345              	.LCFI19:
 1346              		.cfi_def_cfa_offset 16
 1347              		.cfi_offset 4, -16
 1348              		.cfi_offset 5, -12
 1349              		.cfi_offset 6, -8
 1350              		.cfi_offset 14, -4
 1351 0004 0446     		mov	r4, r0
1090:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1352              		.loc 1 1090 0
 1353 0006 036C     		ldr	r3, [r0, #64]
 1354 0008 8BB1     		cbz	r3, .L128
ARM GAS  /tmp/ccQrEWyA.s 			page 72


 1355              	.LBB119:
 1356              	.LBB120:
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1357              		.loc 2 195 0
 1358              		.syntax unified
 1359              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1360 000a 4FF01003 			mov r3, #16												
 1361 000e 83F31188 		msr basepri, r3											
 1362 0012 BFF36F8F 		isb														
 1363 0016 BFF34F8F 		dsb														
 1364              	
 1365              	@ 0 "" 2
 1366              	.LVL142:
 1367              		.thumb
 1368              		.syntax unified
 1369              	.L129:
 1370 001a FEE7     		b	.L129
 1371              	.L140:
 1372              	.LCFI20:
 1373              		.cfi_def_cfa_offset 0
 1374              		.cfi_restore 4
 1375              		.cfi_restore 5
 1376              		.cfi_restore 6
 1377              		.cfi_restore 14
 1378              	.LBE120:
 1379              	.LBE119:
 1380              	.LBB121:
 1381              	.LBB122:
 1382              		.syntax unified
 1383              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1384 001c 4FF01003 			mov r3, #16												
 1385 0020 83F31188 		msr basepri, r3											
 1386 0024 BFF36F8F 		isb														
 1387 0028 BFF34F8F 		dsb														
 1388              	
 1389              	@ 0 "" 2
 1390              	.LVL143:
 1391              		.thumb
 1392              		.syntax unified
 1393              	.L127:
 1394 002c FEE7     		b	.L127
 1395              	.L128:
 1396              	.LCFI21:
 1397              		.cfi_def_cfa_offset 16
 1398              		.cfi_offset 4, -16
 1399              		.cfi_offset 5, -12
 1400              		.cfi_offset 6, -8
 1401              		.cfi_offset 14, -4
 1402              	.LBE122:
 1403              	.LBE121:
1095:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1404              		.loc 1 1095 0
 1405 002e 0368     		ldr	r3, [r0]
 1406 0030 2BB3     		cbz	r3, .L141
 1407              	.L130:
 1408 0032 0E46     		mov	r6, r1
1111:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
ARM GAS  /tmp/ccQrEWyA.s 			page 73


 1409              		.loc 1 1111 0
 1410 0034 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1411              	.LVL144:
 1412              	.LBB123:
 1413              	.LBB124:
 211:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1414              		.loc 2 211 0
 1415              		.syntax unified
 1416              	@ 211 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1417 0038 EFF31185 			mrs r5, basepri											
 1418 003c 4FF01003 		mov r3, #16												
 1419 0040 83F31188 		msr basepri, r3											
 1420 0044 BFF36F8F 		isb														
 1421 0048 BFF34F8F 		dsb														
 1422              	
 1423              	@ 0 "" 2
 1424              		.thumb
 1425              		.syntax unified
 1426              	.LBE124:
 1427              	.LBE123:
 1428              	.LBB125:
1115:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1429              		.loc 1 1115 0
 1430 004c A26B     		ldr	r2, [r4, #56]
 1431              	.LVL145:
1120:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 1432              		.loc 1 1120 0
 1433 004e E36B     		ldr	r3, [r4, #60]
 1434 0050 9342     		cmp	r3, r2
 1435 0052 26D9     		bls	.L134
 1436              	.LBB126:
1122:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1437              		.loc 1 1122 0
 1438 0054 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 1439 0058 5BB2     		sxtb	r3, r3
 1440              	.LVL146:
1132:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1441              		.loc 1 1132 0
 1442 005a 0132     		adds	r2, r2, #1
 1443              	.LVL147:
 1444 005c A263     		str	r2, [r4, #56]
1136:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 1445              		.loc 1 1136 0
 1446 005e B3F1FF3F 		cmp	r3, #-1
 1447 0062 18D1     		bne	.L133
1191:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 1448              		.loc 1 1191 0
 1449 0064 636A     		ldr	r3, [r4, #36]
 1450              	.LVL148:
 1451 0066 F3B1     		cbz	r3, .L135
1193:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 1452              		.loc 1 1193 0
 1453 0068 04F12400 		add	r0, r4, #36
 1454 006c FFF7FEFF 		bl	xTaskRemoveFromEventList
 1455              	.LVL149:
 1456 0070 D8B1     		cbz	r0, .L136
1197:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
ARM GAS  /tmp/ccQrEWyA.s 			page 74


 1457              		.loc 1 1197 0
 1458 0072 E6B1     		cbz	r6, .L137
1199:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
 1459              		.loc 1 1199 0
 1460 0074 0120     		movs	r0, #1
 1461 0076 3060     		str	r0, [r6]
 1462              	.L132:
 1463              	.LVL150:
 1464              	.LBE126:
 1465              	.LBE125:
 1466              	.LBB129:
 1467              	.LBB130:
 1468              		.loc 2 229 0
 1469              		.syntax unified
 1470              	@ 229 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1471 0078 85F31188 			msr basepri, r5	
 1472              	@ 0 "" 2
 1473              	.LVL151:
 1474              		.thumb
 1475              		.syntax unified
 1476              	.LBE130:
 1477              	.LBE129:
1236:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 1478              		.loc 1 1236 0
 1479 007c 70BD     		pop	{r4, r5, r6, pc}
 1480              	.LVL152:
 1481              	.L141:
1095:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1482              		.loc 1 1095 0 discriminator 2
 1483 007e 4368     		ldr	r3, [r0, #4]
 1484 0080 002B     		cmp	r3, #0
 1485 0082 D6D0     		beq	.L130
 1486              	.LBB131:
 1487              	.LBB132:
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1488              		.loc 2 195 0
 1489              		.syntax unified
 1490              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1491 0084 4FF01003 			mov r3, #16												
 1492 0088 83F31188 		msr basepri, r3											
 1493 008c BFF36F8F 		isb														
 1494 0090 BFF34F8F 		dsb														
 1495              	
 1496              	@ 0 "" 2
 1497              	.LVL153:
 1498              		.thumb
 1499              		.syntax unified
 1500              	.L131:
 1501 0094 FEE7     		b	.L131
 1502              	.LVL154:
 1503              	.L133:
 1504              	.LBE132:
 1505              	.LBE131:
 1506              	.LBB133:
 1507              	.LBB127:
1222:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 1508              		.loc 1 1222 0
ARM GAS  /tmp/ccQrEWyA.s 			page 75


 1509 0096 0133     		adds	r3, r3, #1
 1510              	.LVL155:
 1511 0098 5BB2     		sxtb	r3, r3
 1512              	.LVL156:
 1513 009a 84F84530 		strb	r3, [r4, #69]
1225:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 1514              		.loc 1 1225 0
 1515 009e 0120     		movs	r0, #1
 1516 00a0 EAE7     		b	.L132
 1517              	.LVL157:
 1518              	.L134:
 1519              	.LBE127:
1230:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 1520              		.loc 1 1230 0
 1521 00a2 0020     		movs	r0, #0
 1522 00a4 E8E7     		b	.L132
 1523              	.LVL158:
 1524              	.L135:
 1525              	.LBB128:
1225:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 1526              		.loc 1 1225 0
 1527 00a6 0120     		movs	r0, #1
 1528 00a8 E6E7     		b	.L132
 1529              	.LVL159:
 1530              	.L136:
 1531 00aa 0120     		movs	r0, #1
 1532 00ac E4E7     		b	.L132
 1533              	.L137:
 1534 00ae 0120     		movs	r0, #1
 1535 00b0 E2E7     		b	.L132
 1536              	.LBE128:
 1537              	.LBE133:
 1538              		.cfi_endproc
 1539              	.LFE12:
 1541              		.section	.text.xQueueReceive,"ax",%progbits
 1542              		.align	1
 1543              		.global	xQueueReceive
 1544              		.syntax unified
 1545              		.thumb
 1546              		.thumb_func
 1547              		.fpu fpv4-sp-d16
 1549              	xQueueReceive:
 1550              	.LFB13:
1240:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 1551              		.loc 1 1240 0
 1552              		.cfi_startproc
 1553              		@ args = 0, pretend = 0, frame = 16
 1554              		@ frame_needed = 0, uses_anonymous_args = 0
 1555              	.LVL160:
 1556 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1557              	.LCFI22:
 1558              		.cfi_def_cfa_offset 20
 1559              		.cfi_offset 4, -20
 1560              		.cfi_offset 5, -16
 1561              		.cfi_offset 6, -12
 1562              		.cfi_offset 7, -8
 1563              		.cfi_offset 14, -4
ARM GAS  /tmp/ccQrEWyA.s 			page 76


 1564 0002 85B0     		sub	sp, sp, #20
 1565              	.LCFI23:
 1566              		.cfi_def_cfa_offset 40
 1567 0004 0192     		str	r2, [sp, #4]
 1568              	.LVL161:
1246:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1569              		.loc 1 1246 0
 1570 0006 60B1     		cbz	r0, .L163
 1571 0008 0446     		mov	r4, r0
1250:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1572              		.loc 1 1250 0
 1573 000a 99B9     		cbnz	r1, .L145
1250:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1574              		.loc 1 1250 0 is_stmt 0 discriminator 2
 1575 000c 036C     		ldr	r3, [r0, #64]
 1576 000e 8BB1     		cbz	r3, .L145
 1577              	.LBB134:
 1578              	.LBB135:
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1579              		.loc 2 195 0 is_stmt 1
 1580              		.syntax unified
 1581              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1582 0010 4FF01003 			mov r3, #16												
 1583 0014 83F31188 		msr basepri, r3											
 1584 0018 BFF36F8F 		isb														
 1585 001c BFF34F8F 		dsb														
 1586              	
 1587              	@ 0 "" 2
 1588              	.LVL162:
 1589              		.thumb
 1590              		.syntax unified
 1591              	.L146:
 1592 0020 FEE7     		b	.L146
 1593              	.L163:
 1594              	.LBE135:
 1595              	.LBE134:
 1596              	.LBB136:
 1597              	.LBB137:
 1598              		.syntax unified
 1599              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1600 0022 4FF01003 			mov r3, #16												
 1601 0026 83F31188 		msr basepri, r3											
 1602 002a BFF36F8F 		isb														
 1603 002e BFF34F8F 		dsb														
 1604              	
 1605              	@ 0 "" 2
 1606              	.LVL163:
 1607              		.thumb
 1608              		.syntax unified
 1609              	.L144:
 1610 0032 FEE7     		b	.L144
 1611              	.L145:
 1612 0034 0F46     		mov	r7, r1
 1613              	.LBE137:
 1614              	.LBE136:
1255:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 1615              		.loc 1 1255 0
ARM GAS  /tmp/ccQrEWyA.s 			page 77


 1616 0036 FFF7FEFF 		bl	xTaskGetSchedulerState
 1617              	.LVL164:
 1618 003a 50B9     		cbnz	r0, .L160
1255:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 1619              		.loc 1 1255 0 is_stmt 0 discriminator 2
 1620 003c 019B     		ldr	r3, [sp, #4]
 1621 003e 53B1     		cbz	r3, .L161
 1622              	.LBB138:
 1623              	.LBB139:
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1624              		.loc 2 195 0 is_stmt 1
 1625              		.syntax unified
 1626              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1627 0040 4FF01003 			mov r3, #16												
 1628 0044 83F31188 		msr basepri, r3											
 1629 0048 BFF36F8F 		isb														
 1630 004c BFF34F8F 		dsb														
 1631              	
 1632              	@ 0 "" 2
 1633              	.LVL165:
 1634              		.thumb
 1635              		.syntax unified
 1636              	.L148:
 1637 0050 FEE7     		b	.L148
 1638              	.L160:
 1639              	.LBE139:
 1640              	.LBE138:
 1641 0052 0026     		movs	r6, #0
 1642 0054 3EE0     		b	.L149
 1643              	.L161:
 1644 0056 0026     		movs	r6, #0
 1645 0058 3CE0     		b	.L149
 1646              	.LVL166:
 1647              	.L166:
 1648              	.LBB140:
1274:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceQUEUE_RECEIVE( pxQueue );
 1649              		.loc 1 1274 0
 1650 005a 3946     		mov	r1, r7
 1651 005c 2046     		mov	r0, r4
 1652 005e FFF7FEFF 		bl	prvCopyDataFromQueue
 1653              	.LVL167:
1276:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1654              		.loc 1 1276 0
 1655 0062 013D     		subs	r5, r5, #1
 1656              	.LVL168:
 1657 0064 A563     		str	r5, [r4, #56]
1281:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 1658              		.loc 1 1281 0
 1659 0066 2369     		ldr	r3, [r4, #16]
 1660 0068 23B9     		cbnz	r3, .L164
 1661              	.L151:
1297:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				return pdPASS;
 1662              		.loc 1 1297 0
 1663 006a FFF7FEFF 		bl	vPortExitCritical
 1664              	.LVL169:
1298:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 1665              		.loc 1 1298 0
ARM GAS  /tmp/ccQrEWyA.s 			page 78


 1666 006e 0120     		movs	r0, #1
 1667              	.LVL170:
 1668              	.L142:
 1669              	.LBE140:
1377:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 1670              		.loc 1 1377 0
 1671 0070 05B0     		add	sp, sp, #20
 1672              	.LCFI24:
 1673              		.cfi_remember_state
 1674              		.cfi_def_cfa_offset 20
 1675              		@ sp needed
 1676 0072 F0BD     		pop	{r4, r5, r6, r7, pc}
 1677              	.LVL171:
 1678              	.L164:
 1679              	.LCFI25:
 1680              		.cfi_restore_state
 1681              	.LBB141:
1283:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 1682              		.loc 1 1283 0
 1683 0074 04F11000 		add	r0, r4, #16
 1684 0078 FFF7FEFF 		bl	xTaskRemoveFromEventList
 1685              	.LVL172:
 1686 007c 0028     		cmp	r0, #0
 1687 007e F4D0     		beq	.L151
1285:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 1688              		.loc 1 1285 0
 1689 0080 344B     		ldr	r3, .L171
 1690 0082 4FF08052 		mov	r2, #268435456
 1691 0086 1A60     		str	r2, [r3]
 1692              		.syntax unified
 1693              	@ 1285 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 1694 0088 BFF34F8F 		dsb
 1695              	@ 0 "" 2
 1696              	@ 1285 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 1697 008c BFF36F8F 		isb
 1698              	@ 0 "" 2
 1699              		.thumb
 1700              		.syntax unified
 1701 0090 EBE7     		b	.L151
 1702              	.LVL173:
 1703              	.L167:
1306:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
 1704              		.loc 1 1306 0
 1705 0092 FFF7FEFF 		bl	vPortExitCritical
 1706              	.LVL174:
1308:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 1707              		.loc 1 1308 0
 1708 0096 0020     		movs	r0, #0
 1709 0098 EAE7     		b	.L142
 1710              	.L168:
1314:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					xEntryTimeSet = pdTRUE;
 1711              		.loc 1 1314 0
 1712 009a 02A8     		add	r0, sp, #8
 1713 009c FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 1714              	.LVL175:
1315:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 1715              		.loc 1 1315 0
ARM GAS  /tmp/ccQrEWyA.s 			page 79


 1716 00a0 0126     		movs	r6, #1
 1717 00a2 21E0     		b	.L154
 1718              	.LVL176:
 1719              	.L169:
 1720              	.LBE141:
1330:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1721              		.loc 1 1330 0 discriminator 1
 1722 00a4 0023     		movs	r3, #0
 1723 00a6 84F84430 		strb	r3, [r4, #68]
 1724 00aa 29E0     		b	.L155
 1725              	.L170:
1330:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1726              		.loc 1 1330 0 is_stmt 0 discriminator 4
 1727 00ac 0023     		movs	r3, #0
 1728 00ae 84F84530 		strb	r3, [r4, #69]
 1729 00b2 2BE0     		b	.L156
 1730              	.L158:
1355:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				( void ) xTaskResumeAll();
 1731              		.loc 1 1355 0 is_stmt 1
 1732 00b4 2046     		mov	r0, r4
 1733 00b6 FFF7FEFF 		bl	prvUnlockQueue
 1734              	.LVL177:
1356:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 1735              		.loc 1 1356 0
 1736 00ba FFF7FEFF 		bl	xTaskResumeAll
 1737              	.LVL178:
 1738 00be 09E0     		b	.L149
 1739              	.L157:
1363:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( void ) xTaskResumeAll();
 1740              		.loc 1 1363 0
 1741 00c0 2046     		mov	r0, r4
 1742 00c2 FFF7FEFF 		bl	prvUnlockQueue
 1743              	.LVL179:
1364:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1744              		.loc 1 1364 0
 1745 00c6 FFF7FEFF 		bl	xTaskResumeAll
 1746              	.LVL180:
1366:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 1747              		.loc 1 1366 0
 1748 00ca 2046     		mov	r0, r4
 1749 00cc FFF7FEFF 		bl	prvIsQueueEmpty
 1750              	.LVL181:
 1751 00d0 0028     		cmp	r0, #0
 1752 00d2 3DD1     		bne	.L165
 1753              	.LVL182:
 1754              	.L149:
1265:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 1755              		.loc 1 1265 0
 1756 00d4 FFF7FEFF 		bl	vPortEnterCritical
 1757              	.LVL183:
 1758              	.LBB142:
1267:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1759              		.loc 1 1267 0
 1760 00d8 A56B     		ldr	r5, [r4, #56]
 1761              	.LVL184:
1271:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 1762              		.loc 1 1271 0
ARM GAS  /tmp/ccQrEWyA.s 			page 80


 1763 00da 002D     		cmp	r5, #0
 1764 00dc BDD1     		bne	.L166
1302:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 1765              		.loc 1 1302 0
 1766 00de 019B     		ldr	r3, [sp, #4]
 1767 00e0 002B     		cmp	r3, #0
 1768 00e2 D6D0     		beq	.L167
1310:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 1769              		.loc 1 1310 0
 1770 00e4 002E     		cmp	r6, #0
 1771 00e6 D8D0     		beq	.L168
 1772              	.LVL185:
 1773              	.L154:
 1774              	.LBE142:
1324:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1775              		.loc 1 1324 0
 1776 00e8 FFF7FEFF 		bl	vPortExitCritical
 1777              	.LVL186:
1329:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
 1778              		.loc 1 1329 0
 1779 00ec FFF7FEFF 		bl	vTaskSuspendAll
 1780              	.LVL187:
1330:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1781              		.loc 1 1330 0
 1782 00f0 FFF7FEFF 		bl	vPortEnterCritical
 1783              	.LVL188:
 1784 00f4 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 1785 00f8 5BB2     		sxtb	r3, r3
 1786 00fa B3F1FF3F 		cmp	r3, #-1
 1787 00fe D1D0     		beq	.L169
 1788              	.L155:
1330:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1789              		.loc 1 1330 0 is_stmt 0 discriminator 3
 1790 0100 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 1791 0104 5BB2     		sxtb	r3, r3
 1792 0106 B3F1FF3F 		cmp	r3, #-1
 1793 010a CFD0     		beq	.L170
 1794              	.L156:
1330:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1795              		.loc 1 1330 0 discriminator 6
 1796 010c FFF7FEFF 		bl	vPortExitCritical
 1797              	.LVL189:
1333:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 1798              		.loc 1 1333 0 is_stmt 1 discriminator 6
 1799 0110 01A9     		add	r1, sp, #4
 1800 0112 02A8     		add	r0, sp, #8
 1801 0114 FFF7FEFF 		bl	xTaskCheckForTimeOut
 1802              	.LVL190:
 1803 0118 0028     		cmp	r0, #0
 1804 011a D1D1     		bne	.L157
1337:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 1805              		.loc 1 1337 0
 1806 011c 2046     		mov	r0, r4
 1807 011e FFF7FEFF 		bl	prvIsQueueEmpty
 1808              	.LVL191:
 1809 0122 0028     		cmp	r0, #0
 1810 0124 C6D0     		beq	.L158
ARM GAS  /tmp/ccQrEWyA.s 			page 81


1340:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
 1811              		.loc 1 1340 0
 1812 0126 0199     		ldr	r1, [sp, #4]
 1813 0128 04F12400 		add	r0, r4, #36
 1814 012c FFF7FEFF 		bl	vTaskPlaceOnEventList
 1815              	.LVL192:
1341:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 1816              		.loc 1 1341 0
 1817 0130 2046     		mov	r0, r4
 1818 0132 FFF7FEFF 		bl	prvUnlockQueue
 1819              	.LVL193:
1342:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 1820              		.loc 1 1342 0
 1821 0136 FFF7FEFF 		bl	xTaskResumeAll
 1822              	.LVL194:
 1823 013a 0028     		cmp	r0, #0
 1824 013c CAD1     		bne	.L149
1344:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 1825              		.loc 1 1344 0
 1826 013e 054B     		ldr	r3, .L171
 1827 0140 4FF08052 		mov	r2, #268435456
 1828 0144 1A60     		str	r2, [r3]
 1829              		.syntax unified
 1830              	@ 1344 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 1831 0146 BFF34F8F 		dsb
 1832              	@ 0 "" 2
 1833              	@ 1344 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 1834 014a BFF36F8F 		isb
 1835              	@ 0 "" 2
 1836              		.thumb
 1837              		.syntax unified
 1838 014e C1E7     		b	.L149
 1839              	.L165:
1369:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 1840              		.loc 1 1369 0
 1841 0150 0020     		movs	r0, #0
 1842 0152 8DE7     		b	.L142
 1843              	.L172:
 1844              		.align	2
 1845              	.L171:
 1846 0154 04ED00E0 		.word	-536810236
 1847              		.cfi_endproc
 1848              	.LFE13:
 1850              		.section	.text.xQueueSemaphoreTake,"ax",%progbits
 1851              		.align	1
 1852              		.global	xQueueSemaphoreTake
 1853              		.syntax unified
 1854              		.thumb
 1855              		.thumb_func
 1856              		.fpu fpv4-sp-d16
 1858              	xQueueSemaphoreTake:
 1859              	.LFB14:
1381:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 1860              		.loc 1 1381 0
 1861              		.cfi_startproc
 1862              		@ args = 0, pretend = 0, frame = 16
 1863              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccQrEWyA.s 			page 82


 1864              	.LVL195:
 1865 0000 70B5     		push	{r4, r5, r6, lr}
 1866              	.LCFI26:
 1867              		.cfi_def_cfa_offset 16
 1868              		.cfi_offset 4, -16
 1869              		.cfi_offset 5, -12
 1870              		.cfi_offset 6, -8
 1871              		.cfi_offset 14, -4
 1872 0002 84B0     		sub	sp, sp, #16
 1873              	.LCFI27:
 1874              		.cfi_def_cfa_offset 32
 1875 0004 0191     		str	r1, [sp, #4]
 1876              	.LVL196:
1391:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1877              		.loc 1 1391 0
 1878 0006 40B9     		cbnz	r0, .L174
 1879              	.LBB143:
 1880              	.LBB144:
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1881              		.loc 2 195 0
 1882              		.syntax unified
 1883              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1884 0008 4FF01003 			mov r3, #16												
 1885 000c 83F31188 		msr basepri, r3											
 1886 0010 BFF36F8F 		isb														
 1887 0014 BFF34F8F 		dsb														
 1888              	
 1889              	@ 0 "" 2
 1890              	.LVL197:
 1891              		.thumb
 1892              		.syntax unified
 1893              	.L175:
 1894 0018 FEE7     		b	.L175
 1895              	.L174:
 1896 001a 0446     		mov	r4, r0
 1897              	.LBE144:
 1898              	.LBE143:
1395:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1899              		.loc 1 1395 0
 1900 001c 036C     		ldr	r3, [r0, #64]
 1901 001e 43B1     		cbz	r3, .L176
 1902              	.LBB145:
 1903              	.LBB146:
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1904              		.loc 2 195 0
 1905              		.syntax unified
 1906              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1907 0020 4FF01003 			mov r3, #16												
 1908 0024 83F31188 		msr basepri, r3											
 1909 0028 BFF36F8F 		isb														
 1910 002c BFF34F8F 		dsb														
 1911              	
 1912              	@ 0 "" 2
 1913              	.LVL198:
 1914              		.thumb
 1915              		.syntax unified
 1916              	.L177:
ARM GAS  /tmp/ccQrEWyA.s 			page 83


 1917 0030 FEE7     		b	.L177
 1918              	.L176:
 1919              	.LBE146:
 1920              	.LBE145:
1400:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 1921              		.loc 1 1400 0
 1922 0032 FFF7FEFF 		bl	xTaskGetSchedulerState
 1923              	.LVL199:
 1924 0036 50B9     		cbnz	r0, .L195
1400:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 1925              		.loc 1 1400 0 is_stmt 0 discriminator 2
 1926 0038 019B     		ldr	r3, [sp, #4]
 1927 003a 5BB1     		cbz	r3, .L196
 1928              	.LBB147:
 1929              	.LBB148:
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1930              		.loc 2 195 0 is_stmt 1
 1931              		.syntax unified
 1932              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1933 003c 4FF01003 			mov r3, #16												
 1934 0040 83F31188 		msr basepri, r3											
 1935 0044 BFF36F8F 		isb														
 1936 0048 BFF34F8F 		dsb														
 1937              	
 1938              	@ 0 "" 2
 1939              	.LVL200:
 1940              		.thumb
 1941              		.syntax unified
 1942              	.L179:
 1943 004c FEE7     		b	.L179
 1944              	.L195:
 1945              	.LBE148:
 1946              	.LBE147:
 1947 004e 0025     		movs	r5, #0
 1948 0050 2E46     		mov	r6, r5
 1949 0052 51E0     		b	.L180
 1950              	.L196:
 1951 0054 0025     		movs	r5, #0
 1952 0056 2E46     		mov	r6, r5
 1953 0058 4EE0     		b	.L180
 1954              	.LVL201:
 1955              	.L199:
 1956              	.LBB149:
1425:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1957              		.loc 1 1425 0
 1958 005a 013B     		subs	r3, r3, #1
 1959              	.LVL202:
 1960 005c A363     		str	r3, [r4, #56]
1429:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 1961              		.loc 1 1429 0
 1962 005e 2368     		ldr	r3, [r4]
 1963              	.LVL203:
 1964 0060 13B9     		cbnz	r3, .L182
1433:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 1965              		.loc 1 1433 0
 1966 0062 FFF7FEFF 		bl	pvTaskIncrementMutexHeldCount
 1967              	.LVL204:
ARM GAS  /tmp/ccQrEWyA.s 			page 84


 1968 0066 6060     		str	r0, [r4, #4]
 1969              	.L182:
1444:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 1970              		.loc 1 1444 0
 1971 0068 2369     		ldr	r3, [r4, #16]
 1972 006a 63B1     		cbz	r3, .L183
1446:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 1973              		.loc 1 1446 0
 1974 006c 04F11000 		add	r0, r4, #16
 1975 0070 FFF7FEFF 		bl	xTaskRemoveFromEventList
 1976              	.LVL205:
 1977 0074 38B1     		cbz	r0, .L183
1448:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 1978              		.loc 1 1448 0
 1979 0076 484B     		ldr	r3, .L205
 1980 0078 4FF08052 		mov	r2, #268435456
 1981 007c 1A60     		str	r2, [r3]
 1982              		.syntax unified
 1983              	@ 1448 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 1984 007e BFF34F8F 		dsb
 1985              	@ 0 "" 2
 1986              	@ 1448 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 1987 0082 BFF36F8F 		isb
 1988              	@ 0 "" 2
 1989              		.thumb
 1990              		.syntax unified
 1991              	.L183:
1460:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				return pdPASS;
 1992              		.loc 1 1460 0
 1993 0086 FFF7FEFF 		bl	vPortExitCritical
 1994              	.LVL206:
1461:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 1995              		.loc 1 1461 0
 1996 008a 0125     		movs	r5, #1
 1997              	.LVL207:
 1998              	.L173:
 1999              	.LBE149:
1596:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 2000              		.loc 1 1596 0
 2001 008c 2846     		mov	r0, r5
 2002 008e 04B0     		add	sp, sp, #16
 2003              	.LCFI28:
 2004              		.cfi_remember_state
 2005              		.cfi_def_cfa_offset 16
 2006              		@ sp needed
 2007 0090 70BD     		pop	{r4, r5, r6, pc}
 2008              	.LVL208:
 2009              	.L200:
 2010              	.LCFI29:
 2011              		.cfi_restore_state
 2012              	.LBB152:
1472:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 2013              		.loc 1 1472 0
 2014 0092 45B1     		cbz	r5, .L186
 2015              	.LBB150:
 2016              	.LBB151:
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
ARM GAS  /tmp/ccQrEWyA.s 			page 85


 2017              		.loc 2 195 0
 2018              		.syntax unified
 2019              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2020 0094 4FF01003 			mov r3, #16												
 2021 0098 83F31188 		msr basepri, r3											
 2022 009c BFF36F8F 		isb														
 2023 00a0 BFF34F8F 		dsb														
 2024              	
 2025              	@ 0 "" 2
 2026              	.LVL209:
 2027              		.thumb
 2028              		.syntax unified
 2029              	.L187:
 2030 00a4 FEE7     		b	.L187
 2031              	.L186:
 2032              	.LBE151:
 2033              	.LBE150:
1478:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
 2034              		.loc 1 1478 0
 2035 00a6 FFF7FEFF 		bl	vPortExitCritical
 2036              	.LVL210:
1480:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 2037              		.loc 1 1480 0
 2038 00aa EFE7     		b	.L173
 2039              	.L201:
1486:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					xEntryTimeSet = pdTRUE;
 2040              		.loc 1 1486 0
 2041 00ac 02A8     		add	r0, sp, #8
 2042 00ae FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 2043              	.LVL211:
1487:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 2044              		.loc 1 1487 0
 2045 00b2 0126     		movs	r6, #1
 2046 00b4 2AE0     		b	.L188
 2047              	.LVL212:
 2048              	.L202:
 2049              	.LBE152:
1502:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2050              		.loc 1 1502 0 discriminator 1
 2051 00b6 0023     		movs	r3, #0
 2052 00b8 84F84430 		strb	r3, [r4, #68]
 2053 00bc 32E0     		b	.L189
 2054              	.L203:
1502:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2055              		.loc 1 1502 0 is_stmt 0 discriminator 4
 2056 00be 0023     		movs	r3, #0
 2057 00c0 84F84530 		strb	r3, [r4, #69]
 2058 00c4 34E0     		b	.L190
 2059              	.L204:
1519:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 2060              		.loc 1 1519 0 is_stmt 1
 2061 00c6 FFF7FEFF 		bl	vPortEnterCritical
 2062              	.LVL213:
1521:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 2063              		.loc 1 1521 0
 2064 00ca 6068     		ldr	r0, [r4, #4]
 2065 00cc FFF7FEFF 		bl	xTaskPriorityInherit
ARM GAS  /tmp/ccQrEWyA.s 			page 86


 2066              	.LVL214:
 2067 00d0 0546     		mov	r5, r0
 2068              	.LVL215:
1523:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 2069              		.loc 1 1523 0
 2070 00d2 FFF7FEFF 		bl	vPortExitCritical
 2071              	.LVL216:
 2072 00d6 3BE0     		b	.L193
 2073              	.L192:
1547:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				( void ) xTaskResumeAll();
 2074              		.loc 1 1547 0
 2075 00d8 2046     		mov	r0, r4
 2076 00da FFF7FEFF 		bl	prvUnlockQueue
 2077              	.LVL217:
1548:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 2078              		.loc 1 1548 0
 2079 00de FFF7FEFF 		bl	xTaskResumeAll
 2080              	.LVL218:
 2081 00e2 09E0     		b	.L180
 2082              	.L191:
1554:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( void ) xTaskResumeAll();
 2083              		.loc 1 1554 0
 2084 00e4 2046     		mov	r0, r4
 2085 00e6 FFF7FEFF 		bl	prvUnlockQueue
 2086              	.LVL219:
1555:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2087              		.loc 1 1555 0
 2088 00ea FFF7FEFF 		bl	xTaskResumeAll
 2089              	.LVL220:
1561:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 2090              		.loc 1 1561 0
 2091 00ee 2046     		mov	r0, r4
 2092 00f0 FFF7FEFF 		bl	prvIsQueueEmpty
 2093              	.LVL221:
 2094 00f4 0028     		cmp	r0, #0
 2095 00f6 40D1     		bne	.L198
 2096              	.LVL222:
 2097              	.L180:
1411:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 2098              		.loc 1 1411 0
 2099 00f8 FFF7FEFF 		bl	vPortEnterCritical
 2100              	.LVL223:
 2101              	.LBB153:
1415:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2102              		.loc 1 1415 0
 2103 00fc A36B     		ldr	r3, [r4, #56]
 2104              	.LVL224:
1419:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 2105              		.loc 1 1419 0
 2106 00fe 002B     		cmp	r3, #0
 2107 0100 ABD1     		bne	.L199
1465:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 2108              		.loc 1 1465 0
 2109 0102 019B     		ldr	r3, [sp, #4]
 2110              	.LVL225:
 2111 0104 002B     		cmp	r3, #0
 2112 0106 C4D0     		beq	.L200
ARM GAS  /tmp/ccQrEWyA.s 			page 87


1482:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 2113              		.loc 1 1482 0
 2114 0108 002E     		cmp	r6, #0
 2115 010a CFD0     		beq	.L201
 2116              	.LVL226:
 2117              	.L188:
 2118              	.LBE153:
1496:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2119              		.loc 1 1496 0
 2120 010c FFF7FEFF 		bl	vPortExitCritical
 2121              	.LVL227:
1501:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
 2122              		.loc 1 1501 0
 2123 0110 FFF7FEFF 		bl	vTaskSuspendAll
 2124              	.LVL228:
1502:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2125              		.loc 1 1502 0
 2126 0114 FFF7FEFF 		bl	vPortEnterCritical
 2127              	.LVL229:
 2128 0118 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 2129 011c 5BB2     		sxtb	r3, r3
 2130 011e B3F1FF3F 		cmp	r3, #-1
 2131 0122 C8D0     		beq	.L202
 2132              	.L189:
1502:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2133              		.loc 1 1502 0 is_stmt 0 discriminator 3
 2134 0124 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 2135 0128 5BB2     		sxtb	r3, r3
 2136 012a B3F1FF3F 		cmp	r3, #-1
 2137 012e C6D0     		beq	.L203
 2138              	.L190:
1502:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2139              		.loc 1 1502 0 discriminator 6
 2140 0130 FFF7FEFF 		bl	vPortExitCritical
 2141              	.LVL230:
1505:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 2142              		.loc 1 1505 0 is_stmt 1 discriminator 6
 2143 0134 01A9     		add	r1, sp, #4
 2144 0136 02A8     		add	r0, sp, #8
 2145 0138 FFF7FEFF 		bl	xTaskCheckForTimeOut
 2146              	.LVL231:
 2147 013c 0028     		cmp	r0, #0
 2148 013e D1D1     		bne	.L191
1511:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 2149              		.loc 1 1511 0
 2150 0140 2046     		mov	r0, r4
 2151 0142 FFF7FEFF 		bl	prvIsQueueEmpty
 2152              	.LVL232:
 2153 0146 0028     		cmp	r0, #0
 2154 0148 C6D0     		beq	.L192
1517:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 2155              		.loc 1 1517 0
 2156 014a 2368     		ldr	r3, [r4]
 2157 014c 002B     		cmp	r3, #0
 2158 014e BAD0     		beq	.L204
 2159              	.L193:
1532:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
ARM GAS  /tmp/ccQrEWyA.s 			page 88


 2160              		.loc 1 1532 0
 2161 0150 0199     		ldr	r1, [sp, #4]
 2162 0152 04F12400 		add	r0, r4, #36
 2163 0156 FFF7FEFF 		bl	vTaskPlaceOnEventList
 2164              	.LVL233:
1533:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 2165              		.loc 1 1533 0
 2166 015a 2046     		mov	r0, r4
 2167 015c FFF7FEFF 		bl	prvUnlockQueue
 2168              	.LVL234:
1534:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 2169              		.loc 1 1534 0
 2170 0160 FFF7FEFF 		bl	xTaskResumeAll
 2171              	.LVL235:
 2172 0164 0028     		cmp	r0, #0
 2173 0166 C7D1     		bne	.L180
1536:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 2174              		.loc 1 1536 0
 2175 0168 0B4B     		ldr	r3, .L205
 2176 016a 4FF08052 		mov	r2, #268435456
 2177 016e 1A60     		str	r2, [r3]
 2178              		.syntax unified
 2179              	@ 1536 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 2180 0170 BFF34F8F 		dsb
 2181              	@ 0 "" 2
 2182              	@ 1536 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 2183 0174 BFF36F8F 		isb
 2184              	@ 0 "" 2
 2185              		.thumb
 2186              		.syntax unified
 2187 0178 BEE7     		b	.L180
 2188              	.L198:
1568:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 2189              		.loc 1 1568 0
 2190 017a 002D     		cmp	r5, #0
 2191 017c 86D0     		beq	.L173
1570:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 2192              		.loc 1 1570 0
 2193 017e FFF7FEFF 		bl	vPortEnterCritical
 2194              	.LVL236:
 2195              	.LBB154:
1579:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPrio
 2196              		.loc 1 1579 0
 2197 0182 2046     		mov	r0, r4
 2198 0184 FFF7FEFF 		bl	prvGetDisinheritPriorityAfterTimeout
 2199              	.LVL237:
1580:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 2200              		.loc 1 1580 0
 2201 0188 0146     		mov	r1, r0
 2202 018a 6068     		ldr	r0, [r4, #4]
 2203              	.LVL238:
 2204 018c FFF7FEFF 		bl	vTaskPriorityDisinheritAfterTimeout
 2205              	.LVL239:
 2206              	.LBE154:
1582:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 2207              		.loc 1 1582 0
 2208 0190 FFF7FEFF 		bl	vPortExitCritical
ARM GAS  /tmp/ccQrEWyA.s 			page 89


 2209              	.LVL240:
1588:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 2210              		.loc 1 1588 0
 2211 0194 0025     		movs	r5, #0
 2212              	.LVL241:
 2213 0196 79E7     		b	.L173
 2214              	.L206:
 2215              		.align	2
 2216              	.L205:
 2217 0198 04ED00E0 		.word	-536810236
 2218              		.cfi_endproc
 2219              	.LFE14:
 2221              		.section	.text.xQueuePeek,"ax",%progbits
 2222              		.align	1
 2223              		.global	xQueuePeek
 2224              		.syntax unified
 2225              		.thumb
 2226              		.thumb_func
 2227              		.fpu fpv4-sp-d16
 2229              	xQueuePeek:
 2230              	.LFB15:
1600:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 2231              		.loc 1 1600 0
 2232              		.cfi_startproc
 2233              		@ args = 0, pretend = 0, frame = 16
 2234              		@ frame_needed = 0, uses_anonymous_args = 0
 2235              	.LVL242:
 2236 0000 70B5     		push	{r4, r5, r6, lr}
 2237              	.LCFI30:
 2238              		.cfi_def_cfa_offset 16
 2239              		.cfi_offset 4, -16
 2240              		.cfi_offset 5, -12
 2241              		.cfi_offset 6, -8
 2242              		.cfi_offset 14, -4
 2243 0002 84B0     		sub	sp, sp, #16
 2244              	.LCFI31:
 2245              		.cfi_def_cfa_offset 32
 2246 0004 0192     		str	r2, [sp, #4]
 2247              	.LVL243:
1607:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2248              		.loc 1 1607 0
 2249 0006 60B1     		cbz	r0, .L228
 2250 0008 0446     		mov	r4, r0
1611:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2251              		.loc 1 1611 0
 2252 000a 99B9     		cbnz	r1, .L210
1611:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2253              		.loc 1 1611 0 is_stmt 0 discriminator 2
 2254 000c 036C     		ldr	r3, [r0, #64]
 2255 000e 8BB1     		cbz	r3, .L210
 2256              	.LBB155:
 2257              	.LBB156:
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2258              		.loc 2 195 0 is_stmt 1
 2259              		.syntax unified
 2260              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2261 0010 4FF01003 			mov r3, #16												
ARM GAS  /tmp/ccQrEWyA.s 			page 90


 2262 0014 83F31188 		msr basepri, r3											
 2263 0018 BFF36F8F 		isb														
 2264 001c BFF34F8F 		dsb														
 2265              	
 2266              	@ 0 "" 2
 2267              	.LVL244:
 2268              		.thumb
 2269              		.syntax unified
 2270              	.L211:
 2271 0020 FEE7     		b	.L211
 2272              	.L228:
 2273              	.LBE156:
 2274              	.LBE155:
 2275              	.LBB157:
 2276              	.LBB158:
 2277              		.syntax unified
 2278              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2279 0022 4FF01003 			mov r3, #16												
 2280 0026 83F31188 		msr basepri, r3											
 2281 002a BFF36F8F 		isb														
 2282 002e BFF34F8F 		dsb														
 2283              	
 2284              	@ 0 "" 2
 2285              	.LVL245:
 2286              		.thumb
 2287              		.syntax unified
 2288              	.L209:
 2289 0032 FEE7     		b	.L209
 2290              	.L210:
 2291 0034 0E46     		mov	r6, r1
 2292              	.LBE158:
 2293              	.LBE157:
1616:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 2294              		.loc 1 1616 0
 2295 0036 FFF7FEFF 		bl	xTaskGetSchedulerState
 2296              	.LVL246:
 2297 003a 50B9     		cbnz	r0, .L225
1616:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 2298              		.loc 1 1616 0 is_stmt 0 discriminator 2
 2299 003c 019B     		ldr	r3, [sp, #4]
 2300 003e 53B1     		cbz	r3, .L226
 2301              	.LBB159:
 2302              	.LBB160:
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2303              		.loc 2 195 0 is_stmt 1
 2304              		.syntax unified
 2305              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2306 0040 4FF01003 			mov r3, #16												
 2307 0044 83F31188 		msr basepri, r3											
 2308 0048 BFF36F8F 		isb														
 2309 004c BFF34F8F 		dsb														
 2310              	
 2311              	@ 0 "" 2
 2312              	.LVL247:
 2313              		.thumb
 2314              		.syntax unified
 2315              	.L213:
ARM GAS  /tmp/ccQrEWyA.s 			page 91


 2316 0050 FEE7     		b	.L213
 2317              	.L225:
 2318              	.LBE160:
 2319              	.LBE159:
 2320 0052 0025     		movs	r5, #0
 2321 0054 3EE0     		b	.L214
 2322              	.L226:
 2323 0056 0025     		movs	r5, #0
 2324 0058 3CE0     		b	.L214
 2325              	.LVL248:
 2326              	.L231:
 2327              	.LBB161:
1638:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2328              		.loc 1 1638 0
 2329 005a E568     		ldr	r5, [r4, #12]
 2330              	.LVL249:
1640:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceQUEUE_PEEK( pxQueue );
 2331              		.loc 1 1640 0
 2332 005c 3146     		mov	r1, r6
 2333 005e 2046     		mov	r0, r4
 2334 0060 FFF7FEFF 		bl	prvCopyDataFromQueue
 2335              	.LVL250:
1644:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2336              		.loc 1 1644 0
 2337 0064 E560     		str	r5, [r4, #12]
1648:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 2338              		.loc 1 1648 0
 2339 0066 636A     		ldr	r3, [r4, #36]
 2340 0068 23B9     		cbnz	r3, .L229
 2341              	.L216:
1665:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				return pdPASS;
 2342              		.loc 1 1665 0
 2343 006a FFF7FEFF 		bl	vPortExitCritical
 2344              	.LVL251:
1666:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 2345              		.loc 1 1666 0
 2346 006e 0120     		movs	r0, #1
 2347              	.LVL252:
 2348              	.L207:
 2349              	.LBE161:
1746:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 2350              		.loc 1 1746 0
 2351 0070 04B0     		add	sp, sp, #16
 2352              	.LCFI32:
 2353              		.cfi_remember_state
 2354              		.cfi_def_cfa_offset 16
 2355              		@ sp needed
 2356 0072 70BD     		pop	{r4, r5, r6, pc}
 2357              	.LVL253:
 2358              	.L229:
 2359              	.LCFI33:
 2360              		.cfi_restore_state
 2361              	.LBB162:
1650:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 2362              		.loc 1 1650 0
 2363 0074 04F12400 		add	r0, r4, #36
 2364 0078 FFF7FEFF 		bl	xTaskRemoveFromEventList
ARM GAS  /tmp/ccQrEWyA.s 			page 92


 2365              	.LVL254:
 2366 007c 0028     		cmp	r0, #0
 2367 007e F4D0     		beq	.L216
1653:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 2368              		.loc 1 1653 0
 2369 0080 344B     		ldr	r3, .L236
 2370 0082 4FF08052 		mov	r2, #268435456
 2371 0086 1A60     		str	r2, [r3]
 2372              		.syntax unified
 2373              	@ 1653 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 2374 0088 BFF34F8F 		dsb
 2375              	@ 0 "" 2
 2376              	@ 1653 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 2377 008c BFF36F8F 		isb
 2378              	@ 0 "" 2
 2379              		.thumb
 2380              		.syntax unified
 2381 0090 EBE7     		b	.L216
 2382              	.LVL255:
 2383              	.L232:
1674:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					traceQUEUE_PEEK_FAILED( pxQueue );
 2384              		.loc 1 1674 0
 2385 0092 FFF7FEFF 		bl	vPortExitCritical
 2386              	.LVL256:
1676:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 2387              		.loc 1 1676 0
 2388 0096 0020     		movs	r0, #0
 2389 0098 EAE7     		b	.L207
 2390              	.L233:
1683:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					xEntryTimeSet = pdTRUE;
 2391              		.loc 1 1683 0
 2392 009a 02A8     		add	r0, sp, #8
 2393 009c FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 2394              	.LVL257:
1684:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 2395              		.loc 1 1684 0
 2396 00a0 0125     		movs	r5, #1
 2397 00a2 21E0     		b	.L219
 2398              	.LVL258:
 2399              	.L234:
 2400              	.LBE162:
1699:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2401              		.loc 1 1699 0 discriminator 1
 2402 00a4 0023     		movs	r3, #0
 2403 00a6 84F84430 		strb	r3, [r4, #68]
 2404 00aa 29E0     		b	.L220
 2405              	.L235:
1699:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2406              		.loc 1 1699 0 is_stmt 0 discriminator 4
 2407 00ac 0023     		movs	r3, #0
 2408 00ae 84F84530 		strb	r3, [r4, #69]
 2409 00b2 2BE0     		b	.L221
 2410              	.L223:
1724:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				( void ) xTaskResumeAll();
 2411              		.loc 1 1724 0 is_stmt 1
 2412 00b4 2046     		mov	r0, r4
 2413 00b6 FFF7FEFF 		bl	prvUnlockQueue
ARM GAS  /tmp/ccQrEWyA.s 			page 93


 2414              	.LVL259:
1725:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 2415              		.loc 1 1725 0
 2416 00ba FFF7FEFF 		bl	xTaskResumeAll
 2417              	.LVL260:
 2418 00be 09E0     		b	.L214
 2419              	.L222:
1732:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( void ) xTaskResumeAll();
 2420              		.loc 1 1732 0
 2421 00c0 2046     		mov	r0, r4
 2422 00c2 FFF7FEFF 		bl	prvUnlockQueue
 2423              	.LVL261:
1733:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2424              		.loc 1 1733 0
 2425 00c6 FFF7FEFF 		bl	xTaskResumeAll
 2426              	.LVL262:
1735:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 2427              		.loc 1 1735 0
 2428 00ca 2046     		mov	r0, r4
 2429 00cc FFF7FEFF 		bl	prvIsQueueEmpty
 2430              	.LVL263:
 2431 00d0 0028     		cmp	r0, #0
 2432 00d2 3DD1     		bne	.L230
 2433              	.LVL264:
 2434              	.L214:
1627:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 2435              		.loc 1 1627 0
 2436 00d4 FFF7FEFF 		bl	vPortEnterCritical
 2437              	.LVL265:
 2438              	.LBB163:
1629:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2439              		.loc 1 1629 0
 2440 00d8 A36B     		ldr	r3, [r4, #56]
 2441              	.LVL266:
1633:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 2442              		.loc 1 1633 0
 2443 00da 002B     		cmp	r3, #0
 2444 00dc BDD1     		bne	.L231
1670:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 2445              		.loc 1 1670 0
 2446 00de 019B     		ldr	r3, [sp, #4]
 2447              	.LVL267:
 2448 00e0 002B     		cmp	r3, #0
 2449 00e2 D6D0     		beq	.L232
1678:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 2450              		.loc 1 1678 0
 2451 00e4 002D     		cmp	r5, #0
 2452 00e6 D8D0     		beq	.L233
 2453              	.LVL268:
 2454              	.L219:
 2455              	.LBE163:
1693:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2456              		.loc 1 1693 0
 2457 00e8 FFF7FEFF 		bl	vPortExitCritical
 2458              	.LVL269:
1698:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
 2459              		.loc 1 1698 0
ARM GAS  /tmp/ccQrEWyA.s 			page 94


 2460 00ec FFF7FEFF 		bl	vTaskSuspendAll
 2461              	.LVL270:
1699:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2462              		.loc 1 1699 0
 2463 00f0 FFF7FEFF 		bl	vPortEnterCritical
 2464              	.LVL271:
 2465 00f4 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 2466 00f8 5BB2     		sxtb	r3, r3
 2467 00fa B3F1FF3F 		cmp	r3, #-1
 2468 00fe D1D0     		beq	.L234
 2469              	.L220:
1699:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2470              		.loc 1 1699 0 is_stmt 0 discriminator 3
 2471 0100 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 2472 0104 5BB2     		sxtb	r3, r3
 2473 0106 B3F1FF3F 		cmp	r3, #-1
 2474 010a CFD0     		beq	.L235
 2475              	.L221:
1699:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2476              		.loc 1 1699 0 discriminator 6
 2477 010c FFF7FEFF 		bl	vPortExitCritical
 2478              	.LVL272:
1702:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 2479              		.loc 1 1702 0 is_stmt 1 discriminator 6
 2480 0110 01A9     		add	r1, sp, #4
 2481 0112 02A8     		add	r0, sp, #8
 2482 0114 FFF7FEFF 		bl	xTaskCheckForTimeOut
 2483              	.LVL273:
 2484 0118 0028     		cmp	r0, #0
 2485 011a D1D1     		bne	.L222
1706:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 2486              		.loc 1 1706 0
 2487 011c 2046     		mov	r0, r4
 2488 011e FFF7FEFF 		bl	prvIsQueueEmpty
 2489              	.LVL274:
 2490 0122 0028     		cmp	r0, #0
 2491 0124 C6D0     		beq	.L223
1709:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
 2492              		.loc 1 1709 0
 2493 0126 0199     		ldr	r1, [sp, #4]
 2494 0128 04F12400 		add	r0, r4, #36
 2495 012c FFF7FEFF 		bl	vTaskPlaceOnEventList
 2496              	.LVL275:
1710:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 2497              		.loc 1 1710 0
 2498 0130 2046     		mov	r0, r4
 2499 0132 FFF7FEFF 		bl	prvUnlockQueue
 2500              	.LVL276:
1711:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 2501              		.loc 1 1711 0
 2502 0136 FFF7FEFF 		bl	xTaskResumeAll
 2503              	.LVL277:
 2504 013a 0028     		cmp	r0, #0
 2505 013c CAD1     		bne	.L214
1713:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 2506              		.loc 1 1713 0
 2507 013e 054B     		ldr	r3, .L236
ARM GAS  /tmp/ccQrEWyA.s 			page 95


 2508 0140 4FF08052 		mov	r2, #268435456
 2509 0144 1A60     		str	r2, [r3]
 2510              		.syntax unified
 2511              	@ 1713 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 2512 0146 BFF34F8F 		dsb
 2513              	@ 0 "" 2
 2514              	@ 1713 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 2515 014a BFF36F8F 		isb
 2516              	@ 0 "" 2
 2517              		.thumb
 2518              		.syntax unified
 2519 014e C1E7     		b	.L214
 2520              	.L230:
1738:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 2521              		.loc 1 1738 0
 2522 0150 0020     		movs	r0, #0
 2523 0152 8DE7     		b	.L207
 2524              	.L237:
 2525              		.align	2
 2526              	.L236:
 2527 0154 04ED00E0 		.word	-536810236
 2528              		.cfi_endproc
 2529              	.LFE15:
 2531              		.section	.text.xQueueReceiveFromISR,"ax",%progbits
 2532              		.align	1
 2533              		.global	xQueueReceiveFromISR
 2534              		.syntax unified
 2535              		.thumb
 2536              		.thumb_func
 2537              		.fpu fpv4-sp-d16
 2539              	xQueueReceiveFromISR:
 2540              	.LFB16:
1750:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
 2541              		.loc 1 1750 0
 2542              		.cfi_startproc
 2543              		@ args = 0, pretend = 0, frame = 0
 2544              		@ frame_needed = 0, uses_anonymous_args = 0
 2545              	.LVL278:
 2546 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 2547              	.LCFI34:
 2548              		.cfi_def_cfa_offset 32
 2549              		.cfi_offset 3, -32
 2550              		.cfi_offset 4, -28
 2551              		.cfi_offset 5, -24
 2552              		.cfi_offset 6, -20
 2553              		.cfi_offset 7, -16
 2554              		.cfi_offset 8, -12
 2555              		.cfi_offset 9, -8
 2556              		.cfi_offset 14, -4
 2557              	.LVL279:
1755:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 2558              		.loc 1 1755 0
 2559 0004 60B1     		cbz	r0, .L250
 2560 0006 0446     		mov	r4, r0
1756:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2561              		.loc 1 1756 0
 2562 0008 99B9     		cbnz	r1, .L241
ARM GAS  /tmp/ccQrEWyA.s 			page 96


1756:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2563              		.loc 1 1756 0 is_stmt 0 discriminator 2
 2564 000a 036C     		ldr	r3, [r0, #64]
 2565 000c 8BB1     		cbz	r3, .L241
 2566              	.LBB164:
 2567              	.LBB165:
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2568              		.loc 2 195 0 is_stmt 1
 2569              		.syntax unified
 2570              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2571 000e 4FF01003 			mov r3, #16												
 2572 0012 83F31188 		msr basepri, r3											
 2573 0016 BFF36F8F 		isb														
 2574 001a BFF34F8F 		dsb														
 2575              	
 2576              	@ 0 "" 2
 2577              	.LVL280:
 2578              		.thumb
 2579              		.syntax unified
 2580              	.L242:
 2581 001e FEE7     		b	.L242
 2582              	.L250:
 2583              	.LBE165:
 2584              	.LBE164:
 2585              	.LBB166:
 2586              	.LBB167:
 2587              		.syntax unified
 2588              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2589 0020 4FF01003 			mov r3, #16												
 2590 0024 83F31188 		msr basepri, r3											
 2591 0028 BFF36F8F 		isb														
 2592 002c BFF34F8F 		dsb														
 2593              	
 2594              	@ 0 "" 2
 2595              	.LVL281:
 2596              		.thumb
 2597              		.syntax unified
 2598              	.L240:
 2599 0030 FEE7     		b	.L240
 2600              	.L241:
 2601 0032 1746     		mov	r7, r2
 2602 0034 8946     		mov	r9, r1
 2603              	.LBE167:
 2604              	.LBE166:
1772:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2605              		.loc 1 1772 0
 2606 0036 FFF7FEFF 		bl	vPortValidateInterruptPriority
 2607              	.LVL282:
 2608              	.LBB168:
 2609              	.LBB169:
 211:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2610              		.loc 2 211 0
 2611              		.syntax unified
 2612              	@ 211 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2613 003a EFF31186 			mrs r6, basepri											
 2614 003e 4FF01003 		mov r3, #16												
 2615 0042 83F31188 		msr basepri, r3											
ARM GAS  /tmp/ccQrEWyA.s 			page 97


 2616 0046 BFF36F8F 		isb														
 2617 004a BFF34F8F 		dsb														
 2618              	
 2619              	@ 0 "" 2
 2620              		.thumb
 2621              		.syntax unified
 2622              	.LBE169:
 2623              	.LBE168:
 2624              	.LBB170:
1776:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2625              		.loc 1 1776 0
 2626 004e D4F83880 		ldr	r8, [r4, #56]
 2627              	.LVL283:
1779:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 2628              		.loc 1 1779 0
 2629 0052 B8F1000F 		cmp	r8, #0
 2630 0056 1DD0     		beq	.L245
 2631              	.LBB171:
1781:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2632              		.loc 1 1781 0
 2633 0058 94F84450 		ldrb	r5, [r4, #68]	@ zero_extendqisi2
 2634 005c 6DB2     		sxtb	r5, r5
 2635              	.LVL284:
1785:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 2636              		.loc 1 1785 0
 2637 005e 4946     		mov	r1, r9
 2638 0060 2046     		mov	r0, r4
 2639 0062 FFF7FEFF 		bl	prvCopyDataFromQueue
 2640              	.LVL285:
1786:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2641              		.loc 1 1786 0
 2642 0066 08F1FF33 		add	r3, r8, #-1
 2643 006a A363     		str	r3, [r4, #56]
1792:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 2644              		.loc 1 1792 0
 2645 006c B5F1FF3F 		cmp	r5, #-1
 2646 0070 05D0     		beq	.L251
1823:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 2647              		.loc 1 1823 0
 2648 0072 6B1C     		adds	r3, r5, #1
 2649 0074 5BB2     		sxtb	r3, r3
 2650 0076 84F84430 		strb	r3, [r4, #68]
1826:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 2651              		.loc 1 1826 0
 2652 007a 0120     		movs	r0, #1
 2653 007c 0BE0     		b	.L243
 2654              	.L251:
1794:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 2655              		.loc 1 1794 0
 2656 007e 2369     		ldr	r3, [r4, #16]
 2657 0080 6BB1     		cbz	r3, .L246
1796:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 2658              		.loc 1 1796 0
 2659 0082 04F11000 		add	r0, r4, #16
 2660 0086 FFF7FEFF 		bl	xTaskRemoveFromEventList
 2661              	.LVL286:
 2662 008a 50B1     		cbz	r0, .L247
ARM GAS  /tmp/ccQrEWyA.s 			page 98


1800:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 2663              		.loc 1 1800 0
 2664 008c 5FB1     		cbz	r7, .L248
1802:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 2665              		.loc 1 1802 0
 2666 008e 0120     		movs	r0, #1
 2667 0090 3860     		str	r0, [r7]
 2668 0092 00E0     		b	.L243
 2669              	.LVL287:
 2670              	.L245:
 2671              	.LBE171:
1830:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 2672              		.loc 1 1830 0
 2673 0094 0020     		movs	r0, #0
 2674              	.L243:
 2675              	.LVL288:
 2676              	.LBE170:
 2677              	.LBB173:
 2678              	.LBB174:
 2679              		.loc 2 229 0
 2680              		.syntax unified
 2681              	@ 229 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2682 0096 86F31188 			msr basepri, r6	
 2683              	@ 0 "" 2
 2684              	.LVL289:
 2685              		.thumb
 2686              		.syntax unified
 2687              	.LBE174:
 2688              	.LBE173:
1837:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 2689              		.loc 1 1837 0
 2690 009a BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 2691              	.LVL290:
 2692              	.L246:
 2693              	.LBB175:
 2694              	.LBB172:
1826:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 2695              		.loc 1 1826 0
 2696 009e 0120     		movs	r0, #1
 2697 00a0 F9E7     		b	.L243
 2698              	.L247:
 2699 00a2 0120     		movs	r0, #1
 2700 00a4 F7E7     		b	.L243
 2701              	.L248:
 2702 00a6 0120     		movs	r0, #1
 2703 00a8 F5E7     		b	.L243
 2704              	.LBE172:
 2705              	.LBE175:
 2706              		.cfi_endproc
 2707              	.LFE16:
 2709              		.section	.text.xQueuePeekFromISR,"ax",%progbits
 2710              		.align	1
 2711              		.global	xQueuePeekFromISR
 2712              		.syntax unified
 2713              		.thumb
 2714              		.thumb_func
 2715              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccQrEWyA.s 			page 99


 2717              	xQueuePeekFromISR:
 2718              	.LFB17:
1841:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
 2719              		.loc 1 1841 0
 2720              		.cfi_startproc
 2721              		@ args = 0, pretend = 0, frame = 0
 2722              		@ frame_needed = 0, uses_anonymous_args = 0
 2723              	.LVL291:
 2724 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2725              	.LCFI35:
 2726              		.cfi_def_cfa_offset 24
 2727              		.cfi_offset 3, -24
 2728              		.cfi_offset 4, -20
 2729              		.cfi_offset 5, -16
 2730              		.cfi_offset 6, -12
 2731              		.cfi_offset 7, -8
 2732              		.cfi_offset 14, -4
 2733              	.LVL292:
1847:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 2734              		.loc 1 1847 0
 2735 0002 60B1     		cbz	r0, .L262
 2736 0004 0446     		mov	r4, r0
1848:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 2737              		.loc 1 1848 0
 2738 0006 99B9     		cbnz	r1, .L255
1848:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 2739              		.loc 1 1848 0 is_stmt 0 discriminator 2
 2740 0008 036C     		ldr	r3, [r0, #64]
 2741 000a 8BB1     		cbz	r3, .L255
 2742              	.LBB176:
 2743              	.LBB177:
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2744              		.loc 2 195 0 is_stmt 1
 2745              		.syntax unified
 2746              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2747 000c 4FF01003 			mov r3, #16												
 2748 0010 83F31188 		msr basepri, r3											
 2749 0014 BFF36F8F 		isb														
 2750 0018 BFF34F8F 		dsb														
 2751              	
 2752              	@ 0 "" 2
 2753              	.LVL293:
 2754              		.thumb
 2755              		.syntax unified
 2756              	.L256:
 2757 001c FEE7     		b	.L256
 2758              	.L262:
 2759              	.LBE177:
 2760              	.LBE176:
 2761              	.LBB178:
 2762              	.LBB179:
 2763              		.syntax unified
 2764              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2765 001e 4FF01003 			mov r3, #16												
 2766 0022 83F31188 		msr basepri, r3											
 2767 0026 BFF36F8F 		isb														
 2768 002a BFF34F8F 		dsb														
ARM GAS  /tmp/ccQrEWyA.s 			page 100


 2769              	
 2770              	@ 0 "" 2
 2771              	.LVL294:
 2772              		.thumb
 2773              		.syntax unified
 2774              	.L254:
 2775 002e FEE7     		b	.L254
 2776              	.L255:
 2777              	.LBE179:
 2778              	.LBE178:
1849:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2779              		.loc 1 1849 0
 2780 0030 236C     		ldr	r3, [r4, #64]
 2781 0032 43B9     		cbnz	r3, .L257
 2782              	.LBB180:
 2783              	.LBB181:
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2784              		.loc 2 195 0
 2785              		.syntax unified
 2786              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2787 0034 4FF01003 			mov r3, #16												
 2788 0038 83F31188 		msr basepri, r3											
 2789 003c BFF36F8F 		isb														
 2790 0040 BFF34F8F 		dsb														
 2791              	
 2792              	@ 0 "" 2
 2793              	.LVL295:
 2794              		.thumb
 2795              		.syntax unified
 2796              	.L258:
 2797 0044 FEE7     		b	.L258
 2798              	.L257:
 2799 0046 0D46     		mov	r5, r1
 2800              	.LBE181:
 2801              	.LBE180:
1865:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2802              		.loc 1 1865 0
 2803 0048 FFF7FEFF 		bl	vPortValidateInterruptPriority
 2804              	.LVL296:
 2805              	.LBB182:
 2806              	.LBB183:
 211:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2807              		.loc 2 211 0
 2808              		.syntax unified
 2809              	@ 211 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2810 004c EFF31186 			mrs r6, basepri											
 2811 0050 4FF01003 		mov r3, #16												
 2812 0054 83F31188 		msr basepri, r3											
 2813 0058 BFF36F8F 		isb														
 2814 005c BFF34F8F 		dsb														
 2815              	
 2816              	@ 0 "" 2
 2817              		.thumb
 2818              		.syntax unified
 2819              	.LBE183:
 2820              	.LBE182:
1870:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
ARM GAS  /tmp/ccQrEWyA.s 			page 101


 2821              		.loc 1 1870 0
 2822 0060 A36B     		ldr	r3, [r4, #56]
 2823 0062 4BB1     		cbz	r3, .L260
1876:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
 2824              		.loc 1 1876 0
 2825 0064 E768     		ldr	r7, [r4, #12]
 2826              	.LVL297:
1877:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 2827              		.loc 1 1877 0
 2828 0066 2946     		mov	r1, r5
 2829 0068 2046     		mov	r0, r4
 2830 006a FFF7FEFF 		bl	prvCopyDataFromQueue
 2831              	.LVL298:
1878:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2832              		.loc 1 1878 0
 2833 006e E760     		str	r7, [r4, #12]
 2834              	.LVL299:
1880:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 2835              		.loc 1 1880 0
 2836 0070 0120     		movs	r0, #1
 2837              	.LVL300:
 2838              	.L259:
 2839              	.LBB184:
 2840              	.LBB185:
 2841              		.loc 2 229 0
 2842              		.syntax unified
 2843              	@ 229 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2844 0072 86F31188 			msr basepri, r6	
 2845              	@ 0 "" 2
 2846              	.LVL301:
 2847              		.thumb
 2848              		.syntax unified
 2849              	.LBE185:
 2850              	.LBE184:
1891:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 2851              		.loc 1 1891 0
 2852 0076 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2853              	.LVL302:
 2854              	.L260:
1884:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
 2855              		.loc 1 1884 0
 2856 0078 0020     		movs	r0, #0
 2857 007a FAE7     		b	.L259
 2858              		.cfi_endproc
 2859              	.LFE17:
 2861              		.section	.text.uxQueueMessagesWaiting,"ax",%progbits
 2862              		.align	1
 2863              		.global	uxQueueMessagesWaiting
 2864              		.syntax unified
 2865              		.thumb
 2866              		.thumb_func
 2867              		.fpu fpv4-sp-d16
 2869              	uxQueueMessagesWaiting:
 2870              	.LFB18:
1895:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxReturn;
 2871              		.loc 1 1895 0
 2872              		.cfi_startproc
ARM GAS  /tmp/ccQrEWyA.s 			page 102


 2873              		@ args = 0, pretend = 0, frame = 0
 2874              		@ frame_needed = 0, uses_anonymous_args = 0
 2875              	.LVL303:
1898:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2876              		.loc 1 1898 0
 2877 0000 40B9     		cbnz	r0, .L264
 2878              	.LBB186:
 2879              	.LBB187:
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2880              		.loc 2 195 0
 2881              		.syntax unified
 2882              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2883 0002 4FF01003 			mov r3, #16												
 2884 0006 83F31188 		msr basepri, r3											
 2885 000a BFF36F8F 		isb														
 2886 000e BFF34F8F 		dsb														
 2887              	
 2888              	@ 0 "" 2
 2889              	.LVL304:
 2890              		.thumb
 2891              		.syntax unified
 2892              	.L265:
 2893 0012 FEE7     		b	.L265
 2894              	.L264:
 2895              	.LBE187:
 2896              	.LBE186:
1895:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxReturn;
 2897              		.loc 1 1895 0
 2898 0014 10B5     		push	{r4, lr}
 2899              	.LCFI36:
 2900              		.cfi_def_cfa_offset 8
 2901              		.cfi_offset 4, -8
 2902              		.cfi_offset 14, -4
 2903 0016 0446     		mov	r4, r0
1900:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 2904              		.loc 1 1900 0
 2905 0018 FFF7FEFF 		bl	vPortEnterCritical
 2906              	.LVL305:
1902:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 2907              		.loc 1 1902 0
 2908 001c A46B     		ldr	r4, [r4, #56]
 2909              	.LVL306:
1904:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2910              		.loc 1 1904 0
 2911 001e FFF7FEFF 		bl	vPortExitCritical
 2912              	.LVL307:
1907:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 2913              		.loc 1 1907 0
 2914 0022 2046     		mov	r0, r4
 2915 0024 10BD     		pop	{r4, pc}
 2916              		.cfi_endproc
 2917              	.LFE18:
 2919              		.section	.text.uxQueueSpacesAvailable,"ax",%progbits
 2920              		.align	1
 2921              		.global	uxQueueSpacesAvailable
 2922              		.syntax unified
 2923              		.thumb
ARM GAS  /tmp/ccQrEWyA.s 			page 103


 2924              		.thumb_func
 2925              		.fpu fpv4-sp-d16
 2927              	uxQueueSpacesAvailable:
 2928              	.LFB19:
1911:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxReturn;
 2929              		.loc 1 1911 0
 2930              		.cfi_startproc
 2931              		@ args = 0, pretend = 0, frame = 0
 2932              		@ frame_needed = 0, uses_anonymous_args = 0
 2933              	.LVL308:
1916:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2934              		.loc 1 1916 0
 2935 0000 40B9     		cbnz	r0, .L269
 2936              	.LBB188:
 2937              	.LBB189:
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2938              		.loc 2 195 0
 2939              		.syntax unified
 2940              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2941 0002 4FF01003 			mov r3, #16												
 2942 0006 83F31188 		msr basepri, r3											
 2943 000a BFF36F8F 		isb														
 2944 000e BFF34F8F 		dsb														
 2945              	
 2946              	@ 0 "" 2
 2947              	.LVL309:
 2948              		.thumb
 2949              		.syntax unified
 2950              	.L270:
 2951 0012 FEE7     		b	.L270
 2952              	.L269:
 2953              	.LBE189:
 2954              	.LBE188:
1911:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxReturn;
 2955              		.loc 1 1911 0
 2956 0014 10B5     		push	{r4, lr}
 2957              	.LCFI37:
 2958              		.cfi_def_cfa_offset 8
 2959              		.cfi_offset 4, -8
 2960              		.cfi_offset 14, -4
 2961 0016 0446     		mov	r4, r0
1918:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 2962              		.loc 1 1918 0
 2963 0018 FFF7FEFF 		bl	vPortEnterCritical
 2964              	.LVL310:
1920:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 2965              		.loc 1 1920 0
 2966 001c E36B     		ldr	r3, [r4, #60]
 2967 001e A46B     		ldr	r4, [r4, #56]
 2968              	.LVL311:
 2969 0020 1C1B     		subs	r4, r3, r4
 2970              	.LVL312:
1922:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2971              		.loc 1 1922 0
 2972 0022 FFF7FEFF 		bl	vPortExitCritical
 2973              	.LVL313:
1925:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/ccQrEWyA.s 			page 104


 2974              		.loc 1 1925 0
 2975 0026 2046     		mov	r0, r4
 2976 0028 10BD     		pop	{r4, pc}
 2977              		.cfi_endproc
 2978              	.LFE19:
 2980              		.section	.text.uxQueueMessagesWaitingFromISR,"ax",%progbits
 2981              		.align	1
 2982              		.global	uxQueueMessagesWaitingFromISR
 2983              		.syntax unified
 2984              		.thumb
 2985              		.thumb_func
 2986              		.fpu fpv4-sp-d16
 2988              	uxQueueMessagesWaitingFromISR:
 2989              	.LFB20:
1929:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxReturn;
 2990              		.loc 1 1929 0
 2991              		.cfi_startproc
 2992              		@ args = 0, pretend = 0, frame = 0
 2993              		@ frame_needed = 0, uses_anonymous_args = 0
 2994              		@ link register save eliminated.
 2995              	.LVL314:
1932:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2996              		.loc 1 1932 0
 2997 0000 08B1     		cbz	r0, .L276
1934:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2998              		.loc 1 1934 0
 2999 0002 806B     		ldr	r0, [r0, #56]
 3000              	.LVL315:
1937:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 3001              		.loc 1 1937 0
 3002 0004 7047     		bx	lr
 3003              	.LVL316:
 3004              	.L276:
 3005              	.LBB190:
 3006              	.LBB191:
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3007              		.loc 2 195 0
 3008              		.syntax unified
 3009              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3010 0006 4FF01003 			mov r3, #16												
 3011 000a 83F31188 		msr basepri, r3											
 3012 000e BFF36F8F 		isb														
 3013 0012 BFF34F8F 		dsb														
 3014              	
 3015              	@ 0 "" 2
 3016              	.LVL317:
 3017              		.thumb
 3018              		.syntax unified
 3019              	.L275:
 3020 0016 FEE7     		b	.L275
 3021              	.LBE191:
 3022              	.LBE190:
 3023              		.cfi_endproc
 3024              	.LFE20:
 3026              		.section	.text.xQueueIsQueueEmptyFromISR,"ax",%progbits
 3027              		.align	1
 3028              		.global	xQueueIsQueueEmptyFromISR
ARM GAS  /tmp/ccQrEWyA.s 			page 105


 3029              		.syntax unified
 3030              		.thumb
 3031              		.thumb_func
 3032              		.fpu fpv4-sp-d16
 3034              	xQueueIsQueueEmptyFromISR:
 3035              	.LFB27:
2278:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
 3036              		.loc 1 2278 0
 3037              		.cfi_startproc
 3038              		@ args = 0, pretend = 0, frame = 0
 3039              		@ frame_needed = 0, uses_anonymous_args = 0
 3040              		@ link register save eliminated.
 3041              	.LVL318:
2281:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
 3042              		.loc 1 2281 0
 3043 0000 18B1     		cbz	r0, .L282
2282:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 3044              		.loc 1 2282 0
 3045 0002 836B     		ldr	r3, [r0, #56]
 3046 0004 53B9     		cbnz	r3, .L281
2284:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 3047              		.loc 1 2284 0
 3048 0006 0120     		movs	r0, #1
 3049              	.LVL319:
 3050 0008 7047     		bx	lr
 3051              	.LVL320:
 3052              	.L282:
 3053              	.LBB192:
 3054              	.LBB193:
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3055              		.loc 2 195 0
 3056              		.syntax unified
 3057              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3058 000a 4FF01003 			mov r3, #16												
 3059 000e 83F31188 		msr basepri, r3											
 3060 0012 BFF36F8F 		isb														
 3061 0016 BFF34F8F 		dsb														
 3062              	
 3063              	@ 0 "" 2
 3064              	.LVL321:
 3065              		.thumb
 3066              		.syntax unified
 3067              	.L279:
 3068 001a FEE7     		b	.L279
 3069              	.L281:
 3070              	.LBE193:
 3071              	.LBE192:
2288:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 3072              		.loc 1 2288 0
 3073 001c 0020     		movs	r0, #0
 3074              	.LVL322:
2292:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 3075              		.loc 1 2292 0
 3076 001e 7047     		bx	lr
 3077              		.cfi_endproc
 3078              	.LFE27:
 3080              		.section	.text.xQueueIsQueueFullFromISR,"ax",%progbits
ARM GAS  /tmp/ccQrEWyA.s 			page 106


 3081              		.align	1
 3082              		.global	xQueueIsQueueFullFromISR
 3083              		.syntax unified
 3084              		.thumb
 3085              		.thumb_func
 3086              		.fpu fpv4-sp-d16
 3088              	xQueueIsQueueFullFromISR:
 3089              	.LFB29:
2314:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2315:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2316:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
2317:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
 3090              		.loc 1 2317 0
 3091              		.cfi_startproc
 3092              		@ args = 0, pretend = 0, frame = 0
 3093              		@ frame_needed = 0, uses_anonymous_args = 0
 3094              		@ link register save eliminated.
 3095              	.LVL323:
2318:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
2319:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2320:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( xQueue );
 3096              		.loc 1 2320 0
 3097 0000 28B1     		cbz	r0, .L288
2321:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( ( Queue_t * ) xQueue )->uxLength )
 3098              		.loc 1 2321 0
 3099 0002 826B     		ldr	r2, [r0, #56]
 3100 0004 C36B     		ldr	r3, [r0, #60]
 3101 0006 9A42     		cmp	r2, r3
 3102 0008 0AD1     		bne	.L287
2322:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2323:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		xReturn = pdTRUE;
 3103              		.loc 1 2323 0
 3104 000a 0120     		movs	r0, #1
 3105              	.LVL324:
 3106 000c 7047     		bx	lr
 3107              	.LVL325:
 3108              	.L288:
 3109              	.LBB194:
 3110              	.LBB195:
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3111              		.loc 2 195 0
 3112              		.syntax unified
 3113              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3114 000e 4FF01003 			mov r3, #16												
 3115 0012 83F31188 		msr basepri, r3											
 3116 0016 BFF36F8F 		isb														
 3117 001a BFF34F8F 		dsb														
 3118              	
 3119              	@ 0 "" 2
 3120              	.LVL326:
 3121              		.thumb
 3122              		.syntax unified
 3123              	.L285:
 3124 001e FEE7     		b	.L285
 3125              	.L287:
 3126              	.LBE195:
 3127              	.LBE194:
ARM GAS  /tmp/ccQrEWyA.s 			page 107


2324:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2325:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	else
2326:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2327:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		xReturn = pdFALSE;
 3128              		.loc 1 2327 0
 3129 0020 0020     		movs	r0, #0
 3130              	.LVL327:
2328:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2329:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2330:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return xReturn;
2331:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 3131              		.loc 1 2331 0
 3132 0022 7047     		bx	lr
 3133              		.cfi_endproc
 3134              	.LFE29:
 3136              		.section	.text.vQueueAddToRegistry,"ax",%progbits
 3137              		.align	1
 3138              		.global	vQueueAddToRegistry
 3139              		.syntax unified
 3140              		.thumb
 3141              		.thumb_func
 3142              		.fpu fpv4-sp-d16
 3144              	vQueueAddToRegistry:
 3145              	.LFB30:
2332:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2333:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2334:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2335:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2336:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xQueueCRSend( QueueHandle_t xQueue, const void *pvItemToQueue, TickType_t xTicksToWait 
2337:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2338:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xReturn;
2339:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
2340:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2341:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* If the queue is already full we may have to block.  A critical section
2342:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		is required to prevent an interrupt removing something from the queue
2343:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		between the check to see if the queue is full and blocking on the queue. */
2344:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		portDISABLE_INTERRUPTS();
2345:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2346:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( prvIsQueueFull( pxQueue ) != pdFALSE )
2347:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2348:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* The queue is full - do we want to block or just leave without
2349:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				posting? */
2350:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
2351:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2352:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* As this is called from a coroutine we cannot block directly, but
2353:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					return indicating that we need to block. */
2354:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToSend ) );
2355:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					portENABLE_INTERRUPTS();
2356:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					return errQUEUE_BLOCKED;
2357:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2358:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
2359:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2360:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					portENABLE_INTERRUPTS();
2361:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					return errQUEUE_FULL;
2362:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2363:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2364:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
ARM GAS  /tmp/ccQrEWyA.s 			page 108


2365:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		portENABLE_INTERRUPTS();
2366:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2367:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		portDISABLE_INTERRUPTS();
2368:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2369:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
2370:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2371:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* There is room in the queue, copy the data into the queue. */
2372:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
2373:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				xReturn = pdPASS;
2374:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2375:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Were any co-routines waiting for data to become available? */
2376:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2377:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2378:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* In this instance the co-routine could be placed directly
2379:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					into the ready list as we are within a critical section.
2380:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					Instead the same pending ready list mechanism is used as if
2381:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					the event were caused from within an interrupt. */
2382:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2383:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2384:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						/* The co-routine waiting has a higher priority so record
2385:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						that a yield might be appropriate. */
2386:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						xReturn = errQUEUE_YIELD;
2387:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2388:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
2389:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2390:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2391:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2392:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2393:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
2394:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2395:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2396:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2397:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2398:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
2399:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2400:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				xReturn = errQUEUE_FULL;
2401:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2402:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2403:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		portENABLE_INTERRUPTS();
2404:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2405:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return xReturn;
2406:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2407:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2408:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
2409:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2410:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2411:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2412:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2413:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xQueueCRReceive( QueueHandle_t xQueue, void *pvBuffer, TickType_t xTicksToWait )
2414:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2415:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xReturn;
2416:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
2417:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2418:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* If the queue is already empty we may have to block.  A critical section
2419:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		is required to prevent an interrupt adding something to the queue
2420:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		between the check to see if the queue is empty and blocking on the queue. */
2421:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		portDISABLE_INTERRUPTS();
ARM GAS  /tmp/ccQrEWyA.s 			page 109


2422:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2423:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
2424:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2425:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* There are no messages in the queue, do we want to block or just
2426:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				leave with nothing? */
2427:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
2428:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2429:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* As this is a co-routine we cannot block directly, but return
2430:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					indicating that we need to block. */
2431:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToReceive ) );
2432:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					portENABLE_INTERRUPTS();
2433:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					return errQUEUE_BLOCKED;
2434:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2435:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
2436:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2437:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					portENABLE_INTERRUPTS();
2438:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					return errQUEUE_FULL;
2439:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2440:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2441:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
2442:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2443:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2444:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2445:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2446:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		portENABLE_INTERRUPTS();
2447:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2448:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		portDISABLE_INTERRUPTS();
2449:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2450:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2451:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2452:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Data is available from the queue. */
2453:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
2454:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( pxQueue->u.pcReadFrom >= pxQueue->pcTail )
2455:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2456:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					pxQueue->u.pcReadFrom = pxQueue->pcHead;
2457:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2458:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
2459:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2460:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2461:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2462:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				--( pxQueue->uxMessagesWaiting );
2463:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( unsigned ) pxQueue->u
2464:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2465:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				xReturn = pdPASS;
2466:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2467:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Were any co-routines waiting for space to become available? */
2468:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2469:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2470:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* In this instance the co-routine could be placed directly
2471:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					into the ready list as we are within a critical section.
2472:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					Instead the same pending ready list mechanism is used as if
2473:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					the event were caused from within an interrupt. */
2474:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2475:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2476:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						xReturn = errQUEUE_YIELD;
2477:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2478:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
ARM GAS  /tmp/ccQrEWyA.s 			page 110


2479:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2480:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2481:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2482:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2483:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
2484:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2485:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2486:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2487:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2488:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
2489:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2490:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				xReturn = pdFAIL;
2491:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2492:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2493:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		portENABLE_INTERRUPTS();
2494:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2495:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return xReturn;
2496:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2497:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2498:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
2499:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2500:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2501:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2502:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2503:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xQueueCRSendFromISR( QueueHandle_t xQueue, const void *pvItemToQueue, BaseType_t xCoRou
2504:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2505:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
2506:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2507:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Cannot block within an ISR so if there is no space on the queue then
2508:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		exit without doing anything. */
2509:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
2510:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2511:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
2512:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2513:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* We only want to wake one co-routine per ISR, so check that a
2514:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			co-routine has not already been woken. */
2515:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( xCoRoutinePreviouslyWoken == pdFALSE )
2516:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2517:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2518:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2519:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2520:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2521:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						return pdTRUE;
2522:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2523:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
2524:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2525:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2526:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2527:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2528:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
2529:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2530:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2531:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2532:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2533:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
2534:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2535:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
ARM GAS  /tmp/ccQrEWyA.s 			page 111


2536:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2537:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2538:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
2539:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2540:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2541:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2542:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2543:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return xCoRoutinePreviouslyWoken;
2544:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2545:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2546:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
2547:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2548:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2549:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2550:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2551:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xQueueCRReceiveFromISR( QueueHandle_t xQueue, void *pvBuffer, BaseType_t *pxCoRoutineWo
2552:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2553:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xReturn;
2554:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
2555:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2556:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* We cannot block from an ISR, so check there is data available. If
2557:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		not then just leave without doing anything. */
2558:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2559:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2560:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Copy the data from the queue. */
2561:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
2562:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( pxQueue->u.pcReadFrom >= pxQueue->pcTail )
2563:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2564:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxQueue->u.pcReadFrom = pxQueue->pcHead;
2565:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2566:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
2567:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2568:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2569:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2570:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			--( pxQueue->uxMessagesWaiting );
2571:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( unsigned ) pxQueue->ux
2572:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2573:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( ( *pxCoRoutineWoken ) == pdFALSE )
2574:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2575:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2576:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2577:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2578:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2579:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						*pxCoRoutineWoken = pdTRUE;
2580:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2581:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
2582:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2583:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2584:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2585:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2586:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
2587:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2588:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2589:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2590:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2591:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
2592:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
ARM GAS  /tmp/ccQrEWyA.s 			page 112


2593:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2594:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2595:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2596:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
2597:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2598:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
2599:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2600:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdFAIL;
2601:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2602:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2603:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return xReturn;
2604:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2605:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2606:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
2607:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2608:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2609:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2610:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2611:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified
2612:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 3146              		.loc 1 2612 0
 3147              		.cfi_startproc
 3148              		@ args = 0, pretend = 0, frame = 0
 3149              		@ frame_needed = 0, uses_anonymous_args = 0
 3150              		@ link register save eliminated.
 3151              	.LVL328:
2613:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	UBaseType_t ux;
2614:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2615:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* See if there is an empty space in the registry.  A NULL name denotes
2616:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		a free slot. */
2617:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 3152              		.loc 1 2617 0
 3153 0000 0023     		movs	r3, #0
 3154              	.LVL329:
 3155              	.L290:
 3156              		.loc 1 2617 0 is_stmt 0 discriminator 1
 3157 0002 072B     		cmp	r3, #7
 3158 0004 0CD8     		bhi	.L294
2618:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2619:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 3159              		.loc 1 2619 0 is_stmt 1
 3160 0006 074A     		ldr	r2, .L296
 3161 0008 52F83320 		ldr	r2, [r2, r3, lsl #3]
 3162 000c 0AB1     		cbz	r2, .L295
2617:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 3163              		.loc 1 2617 0 discriminator 2
 3164 000e 0133     		adds	r3, r3, #1
 3165              	.LVL330:
 3166 0010 F7E7     		b	.L290
 3167              	.L295:
2620:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2621:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Store the information on this queue. */
2622:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 3168              		.loc 1 2622 0
 3169 0012 044A     		ldr	r2, .L296
 3170 0014 42F83310 		str	r1, [r2, r3, lsl #3]
2623:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				xQueueRegistry[ ux ].xHandle = xQueue;
ARM GAS  /tmp/ccQrEWyA.s 			page 113


 3171              		.loc 1 2623 0
 3172 0018 02EBC303 		add	r3, r2, r3, lsl #3
 3173              	.LVL331:
 3174 001c 5860     		str	r0, [r3, #4]
2624:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2625:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
2626:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				break;
 3175              		.loc 1 2626 0
 3176 001e 7047     		bx	lr
 3177              	.LVL332:
 3178              	.L294:
2627:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2628:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
2629:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2630:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2631:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2632:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2633:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 3179              		.loc 1 2633 0
 3180 0020 7047     		bx	lr
 3181              	.L297:
 3182 0022 00BF     		.align	2
 3183              	.L296:
 3184 0024 00000000 		.word	xQueueRegistry
 3185              		.cfi_endproc
 3186              	.LFE30:
 3188              		.section	.text.pcQueueGetName,"ax",%progbits
 3189              		.align	1
 3190              		.global	pcQueueGetName
 3191              		.syntax unified
 3192              		.thumb
 3193              		.thumb_func
 3194              		.fpu fpv4-sp-d16
 3196              	pcQueueGetName:
 3197              	.LFB31:
2634:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2635:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2636:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2637:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2638:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2639:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2640:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	const char *pcQueueGetName( QueueHandle_t xQueue ) /*lint !e971 Unqualified char types are allowed
2641:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 3198              		.loc 1 2641 0
 3199              		.cfi_startproc
 3200              		@ args = 0, pretend = 0, frame = 0
 3201              		@ frame_needed = 0, uses_anonymous_args = 0
 3202              		@ link register save eliminated.
 3203              	.LVL333:
2642:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	UBaseType_t ux;
2643:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	const char *pcReturn = NULL; /*lint !e971 Unqualified char types are allowed for strings and singl
2644:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2645:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Note there is nothing here to protect against another task adding or
2646:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		removing entries from the registry while it is being searched. */
2647:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 3204              		.loc 1 2647 0
 3205 0000 0023     		movs	r3, #0
ARM GAS  /tmp/ccQrEWyA.s 			page 114


 3206              	.LVL334:
 3207              	.L299:
 3208              		.loc 1 2647 0 is_stmt 0 discriminator 1
 3209 0002 072B     		cmp	r3, #7
 3210 0004 0BD8     		bhi	.L303
2648:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2649:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( xQueueRegistry[ ux ].xHandle == xQueue )
 3211              		.loc 1 2649 0 is_stmt 1
 3212 0006 074A     		ldr	r2, .L305
 3213 0008 02EBC302 		add	r2, r2, r3, lsl #3
 3214 000c 5268     		ldr	r2, [r2, #4]
 3215 000e 8242     		cmp	r2, r0
 3216 0010 01D0     		beq	.L304
2647:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 3217              		.loc 1 2647 0 discriminator 2
 3218 0012 0133     		adds	r3, r3, #1
 3219              	.LVL335:
 3220 0014 F5E7     		b	.L299
 3221              	.L304:
2650:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2651:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pcReturn = xQueueRegistry[ ux ].pcQueueName;
 3222              		.loc 1 2651 0
 3223 0016 034A     		ldr	r2, .L305
 3224 0018 52F83300 		ldr	r0, [r2, r3, lsl #3]
 3225              	.LVL336:
2652:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				break;
 3226              		.loc 1 2652 0
 3227 001c 7047     		bx	lr
 3228              	.LVL337:
 3229              	.L303:
2643:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 3230              		.loc 1 2643 0
 3231 001e 0020     		movs	r0, #0
 3232              	.LVL338:
2653:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2654:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
2655:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2656:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2657:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2658:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2659:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2660:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return pcReturn;
2661:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	} /*lint !e818 xQueue cannot be a pointer to const because it is a typedef. */
 3233              		.loc 1 2661 0
 3234 0020 7047     		bx	lr
 3235              	.L306:
 3236 0022 00BF     		.align	2
 3237              	.L305:
 3238 0024 00000000 		.word	xQueueRegistry
 3239              		.cfi_endproc
 3240              	.LFE31:
 3242              		.section	.text.vQueueUnregisterQueue,"ax",%progbits
 3243              		.align	1
 3244              		.global	vQueueUnregisterQueue
 3245              		.syntax unified
 3246              		.thumb
 3247              		.thumb_func
ARM GAS  /tmp/ccQrEWyA.s 			page 115


 3248              		.fpu fpv4-sp-d16
 3250              	vQueueUnregisterQueue:
 3251              	.LFB32:
2662:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2663:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2664:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2665:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2666:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2667:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2668:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	void vQueueUnregisterQueue( QueueHandle_t xQueue )
2669:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 3252              		.loc 1 2669 0
 3253              		.cfi_startproc
 3254              		@ args = 0, pretend = 0, frame = 0
 3255              		@ frame_needed = 0, uses_anonymous_args = 0
 3256              		@ link register save eliminated.
 3257              	.LVL339:
2670:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	UBaseType_t ux;
2671:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2672:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* See if the handle of the queue being unregistered in actually in the
2673:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		registry. */
2674:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 3258              		.loc 1 2674 0
 3259 0000 0023     		movs	r3, #0
 3260              	.LVL340:
 3261              	.L308:
 3262              		.loc 1 2674 0 is_stmt 0 discriminator 1
 3263 0002 072B     		cmp	r3, #7
 3264 0004 0FD8     		bhi	.L312
2675:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2676:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( xQueueRegistry[ ux ].xHandle == xQueue )
 3265              		.loc 1 2676 0 is_stmt 1
 3266 0006 084A     		ldr	r2, .L314
 3267 0008 02EBC302 		add	r2, r2, r3, lsl #3
 3268 000c 5268     		ldr	r2, [r2, #4]
 3269 000e 8242     		cmp	r2, r0
 3270 0010 01D0     		beq	.L313
2674:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 3271              		.loc 1 2674 0 discriminator 2
 3272 0012 0133     		adds	r3, r3, #1
 3273              	.LVL341:
 3274 0014 F5E7     		b	.L308
 3275              	.L313:
2677:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2678:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Set the name to NULL to show that this slot if free again. */
2679:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				xQueueRegistry[ ux ].pcQueueName = NULL;
 3276              		.loc 1 2679 0
 3277 0016 044A     		ldr	r2, .L314
 3278 0018 0021     		movs	r1, #0
 3279 001a 42F83310 		str	r1, [r2, r3, lsl #3]
2680:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2681:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Set the handle to NULL to ensure the same queue handle cannot
2682:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				appear in the registry twice if it is added, removed, then
2683:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				added again. */
2684:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 3280              		.loc 1 2684 0
 3281 001e 02EBC303 		add	r3, r2, r3, lsl #3
ARM GAS  /tmp/ccQrEWyA.s 			page 116


 3282              	.LVL342:
 3283 0022 5960     		str	r1, [r3, #4]
2685:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				break;
 3284              		.loc 1 2685 0
 3285 0024 7047     		bx	lr
 3286              	.LVL343:
 3287              	.L312:
2686:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2687:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
2688:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2689:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2690:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2691:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2692:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2693:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 3288              		.loc 1 2693 0
 3289 0026 7047     		bx	lr
 3290              	.L315:
 3291              		.align	2
 3292              	.L314:
 3293 0028 00000000 		.word	xQueueRegistry
 3294              		.cfi_endproc
 3295              	.LFE32:
 3297              		.section	.text.vQueueDelete,"ax",%progbits
 3298              		.align	1
 3299              		.global	vQueueDelete
 3300              		.syntax unified
 3301              		.thumb
 3302              		.thumb_func
 3303              		.fpu fpv4-sp-d16
 3305              	vQueueDelete:
 3306              	.LFB21:
1941:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 3307              		.loc 1 1941 0
 3308              		.cfi_startproc
 3309              		@ args = 0, pretend = 0, frame = 0
 3310              		@ frame_needed = 0, uses_anonymous_args = 0
 3311              	.LVL344:
1944:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	traceQUEUE_DELETE( pxQueue );
 3312              		.loc 1 1944 0
 3313 0000 40B9     		cbnz	r0, .L317
 3314              	.LBB196:
 3315              	.LBB197:
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3316              		.loc 2 195 0
 3317              		.syntax unified
 3318              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3319 0002 4FF01003 			mov r3, #16												
 3320 0006 83F31188 		msr basepri, r3											
 3321 000a BFF36F8F 		isb														
 3322 000e BFF34F8F 		dsb														
 3323              	
 3324              	@ 0 "" 2
 3325              	.LVL345:
 3326              		.thumb
 3327              		.syntax unified
 3328              	.L318:
ARM GAS  /tmp/ccQrEWyA.s 			page 117


 3329 0012 FEE7     		b	.L318
 3330              	.L317:
 3331              	.LBE197:
 3332              	.LBE196:
1941:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 3333              		.loc 1 1941 0
 3334 0014 10B5     		push	{r4, lr}
 3335              	.LCFI38:
 3336              		.cfi_def_cfa_offset 8
 3337              		.cfi_offset 4, -8
 3338              		.cfi_offset 14, -4
 3339 0016 0446     		mov	r4, r0
1949:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 3340              		.loc 1 1949 0
 3341 0018 FFF7FEFF 		bl	vQueueUnregisterQueue
 3342              	.LVL346:
1957:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 3343              		.loc 1 1957 0
 3344 001c 2046     		mov	r0, r4
 3345 001e FFF7FEFF 		bl	vPortFree
 3346              	.LVL347:
1979:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 3347              		.loc 1 1979 0
 3348 0022 10BD     		pop	{r4, pc}
 3349              		.cfi_endproc
 3350              	.LFE21:
 3352              		.section	.text.vQueueWaitForMessageRestricted,"ax",%progbits
 3353              		.align	1
 3354              		.global	vQueueWaitForMessageRestricted
 3355              		.syntax unified
 3356              		.thumb
 3357              		.thumb_func
 3358              		.fpu fpv4-sp-d16
 3360              	vQueueWaitForMessageRestricted:
 3361              	.LFB33:
2694:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2695:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2696:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2697:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2698:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_TIMERS == 1 )
2699:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2700:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType
2701:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 3362              		.loc 1 2701 0
 3363              		.cfi_startproc
 3364              		@ args = 0, pretend = 0, frame = 0
 3365              		@ frame_needed = 0, uses_anonymous_args = 0
 3366              	.LVL348:
 3367 0000 70B5     		push	{r4, r5, r6, lr}
 3368              	.LCFI39:
 3369              		.cfi_def_cfa_offset 16
 3370              		.cfi_offset 4, -16
 3371              		.cfi_offset 5, -12
 3372              		.cfi_offset 6, -8
 3373              		.cfi_offset 14, -4
 3374 0002 0446     		mov	r4, r0
 3375 0004 0D46     		mov	r5, r1
ARM GAS  /tmp/ccQrEWyA.s 			page 118


 3376 0006 1646     		mov	r6, r2
 3377              	.LVL349:
2702:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
2703:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2704:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* This function should not be called by application code hence the
2705:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
2706:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		designed for use by kernel code, and has special calling requirements.
2707:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		It can result in vListInsert() being called on a list that can only
2708:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		possibly ever have one item in it, so the list will be fast, but even
2709:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		so it should be called with the scheduler locked and not from a critical
2710:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		section. */
2711:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2712:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Only do anything if there are no messages in the queue.  This function
2713:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		will not actually cause the task to block, just place it on a blocked
2714:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		list.  It will not block until the scheduler is unlocked - at which
2715:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		time a yield will be performed.  If an item is added to the queue while
2716:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		the queue is locked, and the calling task blocks on the queue, then the
2717:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		calling task will be immediately unblocked when the queue is unlocked. */
2718:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
 3378              		.loc 1 2718 0
 3379 0008 FFF7FEFF 		bl	vPortEnterCritical
 3380              	.LVL350:
 3381 000c 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 3382 0010 5BB2     		sxtb	r3, r3
 3383 0012 B3F1FF3F 		cmp	r3, #-1
 3384 0016 0DD0     		beq	.L326
 3385              	.L322:
 3386              		.loc 1 2718 0 is_stmt 0 discriminator 3
 3387 0018 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 3388 001c 5BB2     		sxtb	r3, r3
 3389 001e B3F1FF3F 		cmp	r3, #-1
 3390 0022 0BD0     		beq	.L327
 3391              	.L323:
 3392              		.loc 1 2718 0 discriminator 6
 3393 0024 FFF7FEFF 		bl	vPortExitCritical
 3394              	.LVL351:
2719:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 3395              		.loc 1 2719 0 is_stmt 1 discriminator 6
 3396 0028 A36B     		ldr	r3, [r4, #56]
 3397 002a 5BB1     		cbz	r3, .L328
 3398              	.L324:
2720:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2721:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* There is nothing in the queue, block for the specified period. */
2722:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefi
2723:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2724:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
2725:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2726:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2727:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2728:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		prvUnlockQueue( pxQueue );
 3399              		.loc 1 2728 0
 3400 002c 2046     		mov	r0, r4
 3401 002e FFF7FEFF 		bl	prvUnlockQueue
 3402              	.LVL352:
2729:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 3403              		.loc 1 2729 0
 3404 0032 70BD     		pop	{r4, r5, r6, pc}
ARM GAS  /tmp/ccQrEWyA.s 			page 119


 3405              	.LVL353:
 3406              	.L326:
2718:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 3407              		.loc 1 2718 0 discriminator 1
 3408 0034 0023     		movs	r3, #0
 3409 0036 84F84430 		strb	r3, [r4, #68]
 3410 003a EDE7     		b	.L322
 3411              	.L327:
2718:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 3412              		.loc 1 2718 0 is_stmt 0 discriminator 4
 3413 003c 0023     		movs	r3, #0
 3414 003e 84F84530 		strb	r3, [r4, #69]
 3415 0042 EFE7     		b	.L323
 3416              	.L328:
2722:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 3417              		.loc 1 2722 0 is_stmt 1
 3418 0044 3246     		mov	r2, r6
 3419 0046 2946     		mov	r1, r5
 3420 0048 04F12400 		add	r0, r4, #36
 3421 004c FFF7FEFF 		bl	vTaskPlaceOnEventListRestricted
 3422              	.LVL354:
 3423 0050 ECE7     		b	.L324
 3424              		.cfi_endproc
 3425              	.LFE33:
 3427              		.comm	xQueueRegistry,64,4
 3428              		.text
 3429              	.Letext0:
 3430              		.file 3 "/home/mats/gcc-arm-none-eabi-7-2018-q2-update/lib/gcc/arm-none-eabi/7.3.1/include/stddef.
 3431              		.file 4 "/home/mats/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/machine/_default_type
 3432              		.file 5 "/home/mats/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/lock.h"
 3433              		.file 6 "/home/mats/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/_types.h"
 3434              		.file 7 "/home/mats/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/reent.h"
 3435              		.file 8 "/home/mats/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/stdlib.h"
 3436              		.file 9 "/home/mats/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/_stdint.h"
 3437              		.file 10 "../../core/platform/octa/inc/FreeRTOSConfig.h"
 3438              		.file 11 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/include/list.h"
 3439              		.file 12 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 3440              		.file 13 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/include/queue.h"
 3441              		.file 14 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/include/portable.h"
 3442              		.file 15 "<built-in>"
ARM GAS  /tmp/ccQrEWyA.s 			page 120


DEFINED SYMBOLS
                            *ABS*:0000000000000000 queue.c
     /tmp/ccQrEWyA.s:18     .text.prvGetDisinheritPriorityAfterTimeout:0000000000000000 $t
     /tmp/ccQrEWyA.s:24     .text.prvGetDisinheritPriorityAfterTimeout:0000000000000000 prvGetDisinheritPriorityAfterTimeout
     /tmp/ccQrEWyA.s:54     .text.prvIsQueueFull:0000000000000000 $t
     /tmp/ccQrEWyA.s:60     .text.prvIsQueueFull:0000000000000000 prvIsQueueFull
     /tmp/ccQrEWyA.s:101    .text.prvIsQueueEmpty:0000000000000000 $t
     /tmp/ccQrEWyA.s:107    .text.prvIsQueueEmpty:0000000000000000 prvIsQueueEmpty
     /tmp/ccQrEWyA.s:146    .text.prvCopyDataToQueue:0000000000000000 $t
     /tmp/ccQrEWyA.s:152    .text.prvCopyDataToQueue:0000000000000000 prvCopyDataToQueue
     /tmp/ccQrEWyA.s:271    .text.prvCopyDataFromQueue:0000000000000000 $t
     /tmp/ccQrEWyA.s:277    .text.prvCopyDataFromQueue:0000000000000000 prvCopyDataFromQueue
     /tmp/ccQrEWyA.s:326    .text.prvUnlockQueue:0000000000000000 $t
     /tmp/ccQrEWyA.s:332    .text.prvUnlockQueue:0000000000000000 prvUnlockQueue
     /tmp/ccQrEWyA.s:438    .text.xQueueGenericReset:0000000000000000 $t
     /tmp/ccQrEWyA.s:445    .text.xQueueGenericReset:0000000000000000 xQueueGenericReset
     /tmp/ccQrEWyA.s:554    .text.xQueueGenericReset:0000000000000080 $d
     /tmp/ccQrEWyA.s:559    .text.prvInitialiseNewQueue:0000000000000000 $t
     /tmp/ccQrEWyA.s:565    .text.prvInitialiseNewQueue:0000000000000000 prvInitialiseNewQueue
     /tmp/ccQrEWyA.s:607    .text.xQueueGenericCreate:0000000000000000 $t
     /tmp/ccQrEWyA.s:614    .text.xQueueGenericCreate:0000000000000000 xQueueGenericCreate
     /tmp/ccQrEWyA.s:701    .text.xQueueGenericSend:0000000000000000 $t
     /tmp/ccQrEWyA.s:708    .text.xQueueGenericSend:0000000000000000 xQueueGenericSend
     /tmp/ccQrEWyA.s:1032   .text.xQueueGenericSend:0000000000000178 $d
     /tmp/ccQrEWyA.s:1037   .text.prvInitialiseMutex:0000000000000000 $t
     /tmp/ccQrEWyA.s:1043   .text.prvInitialiseMutex:0000000000000000 prvInitialiseMutex
     /tmp/ccQrEWyA.s:1083   .text.xQueueCreateMutex:0000000000000000 $t
     /tmp/ccQrEWyA.s:1090   .text.xQueueCreateMutex:0000000000000000 xQueueCreateMutex
     /tmp/ccQrEWyA.s:1122   .text.xQueueGenericSendFromISR:0000000000000000 $t
     /tmp/ccQrEWyA.s:1129   .text.xQueueGenericSendFromISR:0000000000000000 xQueueGenericSendFromISR
     /tmp/ccQrEWyA.s:1327   .text.xQueueGiveFromISR:0000000000000000 $t
     /tmp/ccQrEWyA.s:1334   .text.xQueueGiveFromISR:0000000000000000 xQueueGiveFromISR
     /tmp/ccQrEWyA.s:1542   .text.xQueueReceive:0000000000000000 $t
     /tmp/ccQrEWyA.s:1549   .text.xQueueReceive:0000000000000000 xQueueReceive
     /tmp/ccQrEWyA.s:1846   .text.xQueueReceive:0000000000000154 $d
     /tmp/ccQrEWyA.s:1851   .text.xQueueSemaphoreTake:0000000000000000 $t
     /tmp/ccQrEWyA.s:1858   .text.xQueueSemaphoreTake:0000000000000000 xQueueSemaphoreTake
     /tmp/ccQrEWyA.s:2217   .text.xQueueSemaphoreTake:0000000000000198 $d
     /tmp/ccQrEWyA.s:2222   .text.xQueuePeek:0000000000000000 $t
     /tmp/ccQrEWyA.s:2229   .text.xQueuePeek:0000000000000000 xQueuePeek
     /tmp/ccQrEWyA.s:2527   .text.xQueuePeek:0000000000000154 $d
     /tmp/ccQrEWyA.s:2532   .text.xQueueReceiveFromISR:0000000000000000 $t
     /tmp/ccQrEWyA.s:2539   .text.xQueueReceiveFromISR:0000000000000000 xQueueReceiveFromISR
     /tmp/ccQrEWyA.s:2710   .text.xQueuePeekFromISR:0000000000000000 $t
     /tmp/ccQrEWyA.s:2717   .text.xQueuePeekFromISR:0000000000000000 xQueuePeekFromISR
     /tmp/ccQrEWyA.s:2862   .text.uxQueueMessagesWaiting:0000000000000000 $t
     /tmp/ccQrEWyA.s:2869   .text.uxQueueMessagesWaiting:0000000000000000 uxQueueMessagesWaiting
     /tmp/ccQrEWyA.s:2920   .text.uxQueueSpacesAvailable:0000000000000000 $t
     /tmp/ccQrEWyA.s:2927   .text.uxQueueSpacesAvailable:0000000000000000 uxQueueSpacesAvailable
     /tmp/ccQrEWyA.s:2981   .text.uxQueueMessagesWaitingFromISR:0000000000000000 $t
     /tmp/ccQrEWyA.s:2988   .text.uxQueueMessagesWaitingFromISR:0000000000000000 uxQueueMessagesWaitingFromISR
     /tmp/ccQrEWyA.s:3027   .text.xQueueIsQueueEmptyFromISR:0000000000000000 $t
     /tmp/ccQrEWyA.s:3034   .text.xQueueIsQueueEmptyFromISR:0000000000000000 xQueueIsQueueEmptyFromISR
     /tmp/ccQrEWyA.s:3081   .text.xQueueIsQueueFullFromISR:0000000000000000 $t
     /tmp/ccQrEWyA.s:3088   .text.xQueueIsQueueFullFromISR:0000000000000000 xQueueIsQueueFullFromISR
     /tmp/ccQrEWyA.s:3137   .text.vQueueAddToRegistry:0000000000000000 $t
     /tmp/ccQrEWyA.s:3144   .text.vQueueAddToRegistry:0000000000000000 vQueueAddToRegistry
ARM GAS  /tmp/ccQrEWyA.s 			page 121


     /tmp/ccQrEWyA.s:3184   .text.vQueueAddToRegistry:0000000000000024 $d
                            *COM*:0000000000000040 xQueueRegistry
     /tmp/ccQrEWyA.s:3189   .text.pcQueueGetName:0000000000000000 $t
     /tmp/ccQrEWyA.s:3196   .text.pcQueueGetName:0000000000000000 pcQueueGetName
     /tmp/ccQrEWyA.s:3238   .text.pcQueueGetName:0000000000000024 $d
     /tmp/ccQrEWyA.s:3243   .text.vQueueUnregisterQueue:0000000000000000 $t
     /tmp/ccQrEWyA.s:3250   .text.vQueueUnregisterQueue:0000000000000000 vQueueUnregisterQueue
     /tmp/ccQrEWyA.s:3293   .text.vQueueUnregisterQueue:0000000000000028 $d
     /tmp/ccQrEWyA.s:3298   .text.vQueueDelete:0000000000000000 $t
     /tmp/ccQrEWyA.s:3305   .text.vQueueDelete:0000000000000000 vQueueDelete
     /tmp/ccQrEWyA.s:3353   .text.vQueueWaitForMessageRestricted:0000000000000000 $t
     /tmp/ccQrEWyA.s:3360   .text.vQueueWaitForMessageRestricted:0000000000000000 vQueueWaitForMessageRestricted

UNDEFINED SYMBOLS
vPortEnterCritical
vPortExitCritical
xTaskPriorityDisinherit
memcpy
vTaskMissedYield
xTaskRemoveFromEventList
vListInitialise
pvPortMalloc
xTaskGetSchedulerState
vTaskInternalSetTimeOutState
xTaskResumeAll
vTaskSuspendAll
xTaskCheckForTimeOut
vTaskPlaceOnEventList
vPortValidateInterruptPriority
pvTaskIncrementMutexHeldCount
xTaskPriorityInherit
vTaskPriorityDisinheritAfterTimeout
vPortFree
vTaskPlaceOnEventListRestricted
